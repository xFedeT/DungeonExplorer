{"snapshots":{"C:/Users/tagli/RiderProjects/DungeonExplorer/Game1.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Game1.cs","baseContent":"using Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing Microsoft.Xna.Framework.Input;\nusing DungeonExplorer.Core;\nusing DungeonExplorer.Systems;\nusing DungeonExplorer.World;\nusing DungeonExplorer.Entities;\nusing DungeonExplorer.Data;\nusing System.Collections.Generic;\nusing System;\n\nnamespace DungeonExplorer\n{\n    /// <summary>\n    /// Classe principale del gioco che gestisce il loop di gioco e coordina tutti i sistemi\n    /// </summary>\n    public class Game1 : Game\n    {\n        private GraphicsDeviceManager _graphics;\n        private SpriteBatch _spriteBatch;\n\n        // Core Systems\n        private GameManager _gameManager;\n        private InputManager _inputManager;\n        private Camera2D _camera;\n\n        // ECS Systems\n        private RenderSystem _renderSystem;\n        private MovementSystem _movementSystem;\n        private AISystem _aiSystem;\n        private CollisionSystem _collisionSystem;\n\n        // World\n        private Dungeon _currentDungeon;\n        private DungeonGenerator _dungeonGenerator;\n\n        // Entities\n        private Player _player;\n        private List<Enemy> _enemies;\n        private List<Treasure> _treasures;\n\n        // Content\n        private Dictionary<string, Texture2D> _textures;\n        private SpriteFont _font;\n\n        // Game State\n        private bool _gameStarted = false;\n\n        public Game1()\n        {\n            _graphics = new GraphicsDeviceManager(this);\n            Content.RootDirectory = \"Content\";\n            IsMouseVisible = true;\n            \n            // Set window size\n            _graphics.PreferredBackBufferWidth = 1200;\n            _graphics.PreferredBackBufferHeight = 800;\n        }\n\n        protected override void Initialize()\n        {\n            // Initialize core systems\n            _inputManager = new InputManager();\n            _camera = new Camera2D(GraphicsDevice.Viewport);\n            _gameManager = new GameManager();\n\n            // Initialize ECS systems\n            _renderSystem = new RenderSystem();\n            _movementSystem = new MovementSystem();\n            _aiSystem = new AISystem();\n            _collisionSystem = new CollisionSystem();\n\n            // Initialize collections\n            _enemies = new List<Enemy>();\n            _treasures = new List<Treasure>();\n            _textures = new Dictionary<string, Texture2D>();\n\n            base.Initialize();\n        }\n\n        protected override void LoadContent()\n        {\n            _spriteBatch = new SpriteBatch(GraphicsDevice);\n\n            // Load textures\n            LoadTextures();\n\n            // Load font\n            _font = Content.Load<SpriteFont>(\"Fonts/DefaultFont\");\n\n            // Initialize dungeon generator\n            _dungeonGenerator = new DungeonGenerator();\n\n            // Start new game\n            StartNewGame();\n        }\n\n        private void LoadTextures()\n        {\n            try\n            {\n                _textures[\"player\"] = Content.Load<Texture2D>(\"Textures/player\");\n                _textures[\"enemy\"] = Content.Load<Texture2D>(\"Textures/enemy\");\n                _textures[\"wall\"] = Content.Load<Texture2D>(\"Textures/wall\");\n                _textures[\"floor\"] = Content.Load<Texture2D>(\"Textures/floor\");\n                _textures[\"treasure\"] = Content.Load<Texture2D>(\"Textures/treasure\");\n            }\n            catch\n            {\n                // Create placeholder textures if files not found\n                CreatePlaceholderTextures();\n            }\n        }\n\n        private void CreatePlaceholderTextures()\n        {\n            // Create simple colored rectangles as placeholder textures\n            _textures[\"player\"] = CreateColorTexture(Color.Blue, 32, 32);\n            _textures[\"enemy\"] = CreateColorTexture(Color.Red, 32, 32);\n            _textures[\"wall\"] = CreateColorTexture(Color.Gray, 32, 32);\n            _textures[\"floor\"] = CreateColorTexture(Color.LightGray, 32, 32);\n            _textures[\"treasure\"] = CreateColorTexture(Color.Gold, 32, 32);\n        }\n\n        private Texture2D CreateColorTexture(Color color, int width, int height)\n        {\n            Texture2D texture = new Texture2D(GraphicsDevice, width, height);\n            Color[] data = new Color[width * height];\n            for (int i = 0; i < data.Length; i++)\n                data[i] = color;\n            texture.SetData(data);\n            return texture;\n        }\n\n        private void StartNewGame()\n        {\n            // Generate new dungeon\n            _currentDungeon = _dungeonGenerator.Generate(50, 30, 5, 15);\n\n            // Create player at dungeon start position\n            var startPosition = _currentDungeon.GetStartPosition();\n            _player = new Player(startPosition * 32, _textures[\"player\"]);\n\n            // Clear existing entities\n            _enemies.Clear();\n            _treasures.Clear();\n\n            // Spawn enemies and treasures\n            SpawnEntities();\n\n            // Center camera on player\n            _camera.Follow(_player.Transform.Position);\n\n            _gameStarted = true;\n        }\n\n        private void SpawnEntities()\n        {\n            var random = new Random();\n            var rooms = _currentDungeon.GetRooms();\n\n            // Spawn enemies (1-3 per room, excluding start room)\n            for (int i = 1; i < rooms.Count; i++)\n            {\n                var room = rooms[i];\n                int enemyCount = random.Next(1, 4);\n\n                for (int j = 0; j < enemyCount; j++)\n                {\n                    var pos = room.GetRandomPosition();\n                    var enemy = new Enemy(pos * 32, _textures[\"enemy\"]);\n                    _enemies.Add(enemy);\n                }\n            }\n\n            // Spawn treasures (1 per room, excluding start room)\n            for (int i = 1; i < rooms.Count; i++)\n            {\n                var room = rooms[i];\n                var pos = room.GetRandomPosition();\n                var treasure = new Treasure(pos * 32, _textures[\"treasure\"]);\n                _treasures.Add(treasure);\n            }\n        }\n\n        protected override void Update(GameTime gameTime)\n        {\n            if (!_gameStarted) return;\n\n            // Update input\n            _inputManager.Update();\n\n            // Handle exit\n            if (_inputManager.IsKeyPressed(Keys.Escape))\n                Exit();\n\n            // Handle save/load\n            if (_inputManager.IsKeyPressed(Keys.F5))\n                SaveGame();\n            if (_inputManager.IsKeyPressed(Keys.F9))\n                LoadGame();\n\n            // Handle new game\n            if (_inputManager.IsKeyPressed(Keys.F2))\n                StartNewGame();\n\n            // Update systems\n            _movementSystem.Update(gameTime, _player, _inputManager);\n            \n            // Update enemies AI\n            foreach (var enemy in _enemies)\n            {\n                _aiSystem.Update(gameTime, enemy, _player, _currentDungeon);\n            }\n\n            // Handle collisions\n            _collisionSystem.CheckPlayerEnemyCollisions(_player, _enemies);\n            _collisionSystem.CheckPlayerTreasureCollisions(_player, _treasures);\n            _collisionSystem.CheckWorldCollisions(_player, _currentDungeon);\n\n            foreach (var enemy in _enemies)\n            {\n                _collisionSystem.CheckWorldCollisions(enemy, _currentDungeon);\n            }\n\n            // Update camera\n            _camera.Follow(_player.Transform.Position);\n            _camera.Update();\n\n            base.Update(gameTime);\n        }\n\n        protected override void Draw(GameTime gameTime)\n        {\n            GraphicsDevice.Clear(Color.Black);\n\n            _spriteBatch.Begin(transformMatrix: _camera.Transform);\n\n            // Render world\n            _renderSystem.RenderDungeon(_spriteBatch, _currentDungeon, _textures);\n\n            // Render entities\n            _renderSystem.RenderEntity(_spriteBatch, _player);\n            \n            foreach (var enemy in _enemies)\n                _renderSystem.RenderEntity(_spriteBatch, enemy);\n                \n            foreach (var treasure in _treasures)\n                _renderSystem.RenderEntity(_spriteBatch, treasure);\n\n            _spriteBatch.End();\n\n            // Render UI (not affected by camera transform)\n            _spriteBatch.Begin();\n            RenderUI();\n            _spriteBatch.End();\n\n            base.Draw(gameTime);\n        }\n\n        private void RenderUI()\n        {\n            string instructions = \"WASD: Move | F2: New Game | F5: Save | F9: Load | ESC: Exit\";\n            string stats = $\"Health: {_player.Health.CurrentHealth}/{_player.Health.MaxHealth} | \" +\n                          $\"Score: {_gameManager.Score} | Treasures: {_gameManager.TreasuresCollected}\";\n\n            _spriteBatch.DrawString(_font, instructions, new Vector2(10, 10), Color.White);\n            _spriteBatch.DrawString(_font, stats, new Vector2(10, 35), Color.White);\n\n            if (_player.Health.CurrentHealth <= 0)\n            {\n                string gameOver = \"GAME OVER - Press F2 to restart\";\n                var size = _font.MeasureString(gameOver);\n                var pos = new Vector2(\n                    (_graphics.PreferredBackBufferWidth - size.X) / 2,\n                    (_graphics.PreferredBackBufferHeight - size.Y) / 2\n                );\n                _spriteBatch.DrawString(_font, gameOver, pos, Color.Red);\n            }\n        }\n\n        private void SaveGame()\n        {\n            try\n            {\n                var saveManager = new SaveManager();\n                var gameData = new GameData\n                {\n                    PlayerPosition = _player.Transform.Position,\n                    PlayerHealth = _player.Health.CurrentHealth,\n                    Score = _gameManager.Score,\n                    TreasuresCollected = _gameManager.TreasuresCollected,\n                    DungeonSeed = _dungeonGenerator.LastSeed,\n                    EnemyPositions = _enemies.ConvertAll(e => e.Transform.Position),\n                    TreasurePositions = _treasures.ConvertAll(t => t.Transform.Position)\n                };\n\n                saveManager.SaveGame(gameData, \"savegame.json\");\n                // Could add UI feedback here\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($\"Save failed: {ex.Message}\");\n            }\n        }\n\n        private void LoadGame()\n        {\n            try\n            {\n                var saveManager = new SaveManager();\n                var gameData = saveManager.LoadGame(\"savegame.json\");\n\n                if (gameData != null)\n                {\n                    // Regenerate dungeon with same seed\n                    _currentDungeon = _dungeonGenerator.Generate(50, 30, 5, 15, gameData.DungeonSeed);\n\n                    // Restore player\n                    _player.Transform.Position = gameData.PlayerPosition;\n                    _player.Health.CurrentHealth = gameData.PlayerHealth;\n\n                    // Restore game state\n                    _gameManager.Score = gameData.Score;\n                    _gameManager.TreasuresCollected = gameData.TreasuresCollected;\n\n                    // Restore entities (simplified - in a full game you'd want more data)\n                    _enemies.Clear();\n                    _treasures.Clear();\n\n                    for (int i = 0; i < gameData.EnemyPositions.Count; i++)\n                    {\n                        var enemy = new Enemy(gameData.EnemyPositions[i], _textures[\"enemy\"]);\n                        _enemies.Add(enemy);\n                    }\n\n                    for (int i = 0; i < gameData.TreasurePositions.Count; i++)\n                    {\n                        var treasure = new Treasure(gameData.TreasurePositions[i], _textures[\"treasure\"]);\n                        _treasures.Add(treasure);\n                    }\n\n                    _camera.Follow(_player.Transform.Position);\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($\"Load failed: {ex.Message}\");\n            }\n        }\n    }\n}","baseTimestamp":1756228048618},"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/IComponent.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/IComponent.cs","baseContent":"namespace DungeonExplorer.Components;\n\npublic class IComponent\n{\n    \n}","baseTimestamp":1756228135654,"deltas":[{"timestamp":1756228139178,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":1,"content":"// IComponent.cs - Base interface for all components"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class IComponent"},{"type":"INSERT","lineNumber":5,"content":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":7,"content":"    public interface IComponent"},{"type":"INSERT","lineNumber":8,"content":"    {"},{"type":"INSERT","lineNumber":9,"content":"        void Update(GameTime gameTime);"},{"type":"INSERT","lineNumber":10,"content":"    }"},{"type":"INSERT","lineNumber":12,"content":""},{"type":"INSERT","lineNumber":13,"content":"// ============================================"},{"type":"INSERT","lineNumber":14,"content":"// TransformComponent.cs - Position, rotation, scale"},{"type":"INSERT","lineNumber":15,"content":"// ============================================"},{"type":"INSERT","lineNumber":16,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":17,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"namespace DungeonExplorer.Components"},{"type":"INSERT","lineNumber":20,"content":"{"},{"type":"INSERT","lineNumber":21,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":22,"content":"    /// Component that handles position, rotation and scale of an entity"},{"type":"INSERT","lineNumber":23,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":24,"content":"    public class TransformComponent : IComponent"},{"type":"INSERT","lineNumber":25,"content":"    {"},{"type":"INSERT","lineNumber":26,"content":"        public Vector2 Position { get; set; }"},{"type":"INSERT","lineNumber":27,"content":"        public float Rotation { get; set; }"},{"type":"INSERT","lineNumber":28,"content":"        public Vector2 Scale { get; set; }"},{"type":"INSERT","lineNumber":29,"content":"        public Vector2 Origin { get; set; }"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":"        public TransformComponent(Vector2 position)"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"            Position = position;"},{"type":"INSERT","lineNumber":34,"content":"            Rotation = 0f;"},{"type":"INSERT","lineNumber":35,"content":"            Scale = Vector2.One;"},{"type":"INSERT","lineNumber":36,"content":"            Origin = Vector2.Zero;"},{"type":"INSERT","lineNumber":37,"content":"        }"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":40,"content":"        {"},{"type":"INSERT","lineNumber":41,"content":"            // Transform component doesn't need active updates"},{"type":"INSERT","lineNumber":42,"content":"        }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"        public Rectangle GetBounds(int width, int height)"},{"type":"INSERT","lineNumber":45,"content":"        {"},{"type":"INSERT","lineNumber":46,"content":"            return new Rectangle("},{"type":"INSERT","lineNumber":47,"content":"                (int)(Position.X - Origin.X * Scale.X),"},{"type":"INSERT","lineNumber":48,"content":"                (int)(Position.Y - Origin.Y * Scale.Y),"},{"type":"INSERT","lineNumber":49,"content":"                (int)(width * Scale.X),"},{"type":"INSERT","lineNumber":50,"content":"                (int)(height * Scale.Y)"},{"type":"INSERT","lineNumber":51,"content":"            );"},{"type":"INSERT","lineNumber":52,"content":"        }"},{"type":"INSERT","lineNumber":53,"content":"    }"},{"type":"INSERT","lineNumber":54,"content":"}"},{"type":"INSERT","lineNumber":55,"content":""},{"type":"INSERT","lineNumber":56,"content":"// ============================================"},{"type":"INSERT","lineNumber":57,"content":"// RenderComponent.cs - Handles visual representation"},{"type":"INSERT","lineNumber":58,"content":"// ============================================"},{"type":"INSERT","lineNumber":59,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":60,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":61,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"namespace DungeonExplorer.Components"},{"type":"INSERT","lineNumber":64,"content":"{"},{"type":"INSERT","lineNumber":65,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":66,"content":"    /// Component that handles the visual representation of an entity"},{"type":"INSERT","lineNumber":67,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":68,"content":"    public class RenderComponent : IComponent"},{"type":"INSERT","lineNumber":69,"content":"    {"},{"type":"INSERT","lineNumber":70,"content":"        public Texture2D Texture { get; set; }"},{"type":"INSERT","lineNumber":71,"content":"        public Color Tint { get; set; }"},{"type":"INSERT","lineNumber":72,"content":"        public bool Visible { get; set; }"},{"type":"INSERT","lineNumber":73,"content":"        public Rectangle? SourceRectangle { get; set; }"},{"type":"INSERT","lineNumber":74,"content":"        public SpriteEffects SpriteEffects { get; set; }"},{"type":"INSERT","lineNumber":75,"content":"        public float LayerDepth { get; set; }"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"        public RenderComponent(Texture2D texture)"},{"type":"INSERT","lineNumber":78,"content":"        {"},{"type":"INSERT","lineNumber":79,"content":"            Texture = texture;"},{"type":"INSERT","lineNumber":80,"content":"            Tint = Color.White;"},{"type":"INSERT","lineNumber":81,"content":"            Visible = true;"},{"type":"INSERT","lineNumber":82,"content":"            SourceRectangle = null;"},{"type":"INSERT","lineNumber":83,"content":"            SpriteEffects = SpriteEffects.None;"},{"type":"INSERT","lineNumber":84,"content":"            LayerDepth = 0f;"},{"type":"INSERT","lineNumber":85,"content":"        }"},{"type":"INSERT","lineNumber":86,"content":""},{"type":"INSERT","lineNumber":87,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":88,"content":"        {"},{"type":"INSERT","lineNumber":89,"content":"            // Basic render component doesn't need updates"},{"type":"INSERT","lineNumber":90,"content":"            // Could be extended for animations, effects, etc."},{"type":"INSERT","lineNumber":91,"content":"        }"},{"type":"INSERT","lineNumber":92,"content":"    }"},{"type":"INSERT","lineNumber":93,"content":"}"},{"type":"INSERT","lineNumber":94,"content":""},{"type":"INSERT","lineNumber":95,"content":"// ============================================"},{"type":"INSERT","lineNumber":96,"content":"// MovementComponent.cs - Handles movement and physics"},{"type":"INSERT","lineNumber":97,"content":"// ============================================"},{"type":"INSERT","lineNumber":98,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":99,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"namespace DungeonExplorer.Components"},{"type":"INSERT","lineNumber":102,"content":"{"},{"type":"INSERT","lineNumber":103,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":104,"content":"    /// Component that handles entity movement and basic physics"},{"type":"INSERT","lineNumber":105,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":106,"content":"    public class MovementComponent : IComponent"},{"type":"INSERT","lineNumber":107,"content":"    {"},{"type":"INSERT","lineNumber":108,"content":"        public Vector2 Velocity { get; set; }"},{"type":"INSERT","lineNumber":109,"content":"        public Vector2 Acceleration { get; set; }"},{"type":"INSERT","lineNumber":110,"content":"        public float MaxSpeed { get; set; }"},{"type":"INSERT","lineNumber":111,"content":"        public float Friction { get; set; }"},{"type":"INSERT","lineNumber":112,"content":"        public bool CanMove { get; set; }"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"INSERT","lineNumber":114,"content":"        public MovementComponent(float maxSpeed = 100f, float friction = 0.8f)"},{"type":"INSERT","lineNumber":115,"content":"        {"},{"type":"INSERT","lineNumber":116,"content":"            Velocity = Vector2.Zero;"},{"type":"INSERT","lineNumber":117,"content":"            Acceleration = Vector2.Zero;"},{"type":"INSERT","lineNumber":118,"content":"            MaxSpeed = maxSpeed;"},{"type":"INSERT","lineNumber":119,"content":"            Friction = friction;"},{"type":"INSERT","lineNumber":120,"content":"            CanMove = true;"},{"type":"INSERT","lineNumber":121,"content":"        }"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":124,"content":"        {"},{"type":"INSERT","lineNumber":125,"content":"            if (!CanMove) return;"},{"type":"INSERT","lineNumber":126,"content":""},{"type":"INSERT","lineNumber":127,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"            // Apply acceleration to velocity"},{"type":"INSERT","lineNumber":130,"content":"            Velocity += Acceleration * deltaTime;"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"            // Apply friction"},{"type":"INSERT","lineNumber":133,"content":"            Velocity *= Friction;"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"            // Clamp to max speed"},{"type":"INSERT","lineNumber":136,"content":"            if (Velocity.Length() > MaxSpeed)"},{"type":"INSERT","lineNumber":137,"content":"            {"},{"type":"INSERT","lineNumber":138,"content":"                Velocity.Normalize();"},{"type":"INSERT","lineNumber":139,"content":"                Velocity *= MaxSpeed;"},{"type":"INSERT","lineNumber":140,"content":"            }"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"INSERT","lineNumber":142,"content":"            // Reset acceleration for next frame"},{"type":"INSERT","lineNumber":143,"content":"            Acceleration = Vector2.Zero;"},{"type":"INSERT","lineNumber":144,"content":"        }"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"INSERT","lineNumber":146,"content":"        public void AddForce(Vector2 force)"},{"type":"INSERT","lineNumber":147,"content":"        {"},{"type":"INSERT","lineNumber":148,"content":"            Acceleration += force;"},{"type":"INSERT","lineNumber":149,"content":"        }"},{"type":"INSERT","lineNumber":150,"content":""},{"type":"INSERT","lineNumber":151,"content":"        public void SetVelocity(Vector2 velocity)"},{"type":"INSERT","lineNumber":152,"content":"        {"},{"type":"INSERT","lineNumber":153,"content":"            Velocity = velocity;"},{"type":"INSERT","lineNumber":154,"content":"        }"},{"type":"INSERT","lineNumber":155,"content":"    }"},{"type":"INSERT","lineNumber":156,"content":"}"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"INSERT","lineNumber":158,"content":"// ============================================"},{"type":"INSERT","lineNumber":159,"content":"// HealthComponent.cs - Health and damage system"},{"type":"INSERT","lineNumber":160,"content":"// ============================================"},{"type":"INSERT","lineNumber":161,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":162,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":163,"content":"using System;"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"INSERT","lineNumber":165,"content":"namespace DungeonExplorer.Components"},{"type":"INSERT","lineNumber":166,"content":"{"},{"type":"INSERT","lineNumber":167,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":168,"content":"    /// Component that handles entity health and damage"},{"type":"INSERT","lineNumber":169,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":170,"content":"    public class HealthComponent : IComponent"},{"type":"INSERT","lineNumber":171,"content":"    {"},{"type":"INSERT","lineNumber":172,"content":"        public int MaxHealth { get; private set; }"},{"type":"INSERT","lineNumber":173,"content":"        public int CurrentHealth { get; set; }"},{"type":"INSERT","lineNumber":174,"content":"        public bool IsAlive => CurrentHealth > 0;"},{"type":"INSERT","lineNumber":175,"content":"        public bool IsInvulnerable { get; set; }"},{"type":"INSERT","lineNumber":176,"content":"        public float InvulnerabilityDuration { get; set; }"},{"type":"INSERT","lineNumber":177,"content":"        private float _invulnerabilityTimer;"},{"type":"INSERT","lineNumber":178,"content":""},{"type":"INSERT","lineNumber":179,"content":"        public event Action<int> OnHealthChanged;"},{"type":"INSERT","lineNumber":180,"content":"        public event Action OnDeath;"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"        public HealthComponent(int maxHealth)"},{"type":"INSERT","lineNumber":183,"content":"        {"},{"type":"INSERT","lineNumber":184,"content":"            MaxHealth = maxHealth;"},{"type":"INSERT","lineNumber":185,"content":"            CurrentHealth = maxHealth;"},{"type":"INSERT","lineNumber":186,"content":"            IsInvulnerable = false;"},{"type":"INSERT","lineNumber":187,"content":"            InvulnerabilityDuration = 1f; // 1 second of invulnerability after taking damage"},{"type":"INSERT","lineNumber":188,"content":"        }"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":191,"content":"        {"},{"type":"INSERT","lineNumber":192,"content":"            if (IsInvulnerable)"},{"type":"INSERT","lineNumber":193,"content":"            {"},{"type":"INSERT","lineNumber":194,"content":"                _invulnerabilityTimer -= (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":195,"content":"                if (_invulnerabilityTimer <= 0)"},{"type":"INSERT","lineNumber":196,"content":"                {"},{"type":"INSERT","lineNumber":197,"content":"                    IsInvulnerable = false;"},{"type":"INSERT","lineNumber":198,"content":"                }"},{"type":"INSERT","lineNumber":199,"content":"            }"},{"type":"INSERT","lineNumber":200,"content":"        }"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"        public bool TakeDamage(int damage)"},{"type":"INSERT","lineNumber":203,"content":"        {"},{"type":"INSERT","lineNumber":204,"content":"            if (IsInvulnerable || !IsAlive || damage <= 0)"},{"type":"INSERT","lineNumber":205,"content":"                return false;"},{"type":"INSERT","lineNumber":206,"content":""},{"type":"INSERT","lineNumber":207,"content":"            CurrentHealth = Math.Max(0, CurrentHealth - damage);"},{"type":"INSERT","lineNumber":208,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            if (CurrentHealth <= 0)"},{"type":"INSERT","lineNumber":211,"content":"            {"},{"type":"INSERT","lineNumber":212,"content":"                OnDeath?.Invoke();"},{"type":"INSERT","lineNumber":213,"content":"                return true; // Entity died"},{"type":"INSERT","lineNumber":214,"content":"            }"},{"type":"INSERT","lineNumber":215,"content":"            else"},{"type":"INSERT","lineNumber":216,"content":"            {"},{"type":"INSERT","lineNumber":217,"content":"                // Start invulnerability period"},{"type":"INSERT","lineNumber":218,"content":"                IsInvulnerable = true;"},{"type":"INSERT","lineNumber":219,"content":"                _invulnerabilityTimer = InvulnerabilityDuration;"},{"type":"INSERT","lineNumber":220,"content":"            }"},{"type":"INSERT","lineNumber":221,"content":""},{"type":"INSERT","lineNumber":222,"content":"            return false; // Entity survived"},{"type":"INSERT","lineNumber":223,"content":"        }"},{"type":"INSERT","lineNumber":224,"content":""},{"type":"INSERT","lineNumber":225,"content":"        public void Heal(int amount)"},{"type":"INSERT","lineNumber":226,"content":"        {"},{"type":"INSERT","lineNumber":227,"content":"            if (amount <= 0) return;"},{"type":"INSERT","lineNumber":228,"content":""},{"type":"INSERT","lineNumber":229,"content":"            CurrentHealth = Math.Min(MaxHealth, CurrentHealth + amount);"},{"type":"INSERT","lineNumber":230,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":231,"content":"        }"},{"type":"INSERT","lineNumber":232,"content":""},{"type":"INSERT","lineNumber":233,"content":"        public void SetMaxHealth(int newMaxHealth)"},{"type":"INSERT","lineNumber":234,"content":"        {"},{"type":"INSERT","lineNumber":235,"content":"            MaxHealth = newMaxHealth;"},{"type":"INSERT","lineNumber":236,"content":"            if (CurrentHealth > MaxHealth)"},{"type":"INSERT","lineNumber":237,"content":"                CurrentHealth = MaxHealth;"},{"type":"INSERT","lineNumber":238,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":239,"content":"        }"},{"type":"INSERT","lineNumber":240,"content":"    }"},{"type":"INSERT","lineNumber":241,"content":"}"},{"type":"INSERT","lineNumber":242,"content":""},{"type":"INSERT","lineNumber":243,"content":"// ============================================"},{"type":"INSERT","lineNumber":244,"content":"// AIComponent.cs - AI behavior and pathfinding"},{"type":"INSERT","lineNumber":245,"content":"// ============================================"},{"type":"INSERT","lineNumber":246,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":247,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":248,"content":"using DungeonExplorer.AI;"},{"type":"INSERT","lineNumber":249,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":250,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":251,"content":""},{"type":"INSERT","lineNumber":252,"content":"namespace DungeonExplorer.Components"},{"type":"INSERT","lineNumber":253,"content":"{"},{"type":"INSERT","lineNumber":254,"content":"    public enum AIState"},{"type":"INSERT","lineNumber":255,"content":"    {"},{"type":"INSERT","lineNumber":256,"content":"        Idle,"},{"type":"INSERT","lineNumber":257,"content":"        Patrolling,"},{"type":"INSERT","lineNumber":258,"content":"        Chasing,"},{"type":"INSERT","lineNumber":259,"content":"        Attacking,"},{"type":"INSERT","lineNumber":260,"content":"        Searching"},{"type":"INSERT","lineNumber":261,"content":"    }"},{"type":"INSERT","lineNumber":262,"content":""},{"type":"INSERT","lineNumber":263,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":264,"content":"    /// Component that handles AI behavior and decision making"},{"type":"INSERT","lineNumber":265,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":266,"content":"    public class AIComponent : IComponent"},{"type":"INSERT","lineNumber":267,"content":"    {"},{"type":"INSERT","lineNumber":268,"content":"        public AIState CurrentState { get; set; }"},{"type":"INSERT","lineNumber":269,"content":"        public float DetectionRange { get; set; }"},{"type":"INSERT","lineNumber":270,"content":"        public float AttackRange { get; set; }"},{"type":"INSERT","lineNumber":271,"content":"        public float MoveSpeed { get; set; }"},{"type":"INSERT","lineNumber":272,"content":"        public Vector2 Target { get; set; }"},{"type":"INSERT","lineNumber":273,"content":"        public List<Vector2> CurrentPath { get; private set; }"},{"type":"INSERT","lineNumber":274,"content":"        public int CurrentPathIndex { get; set; }"},{"type":"INSERT","lineNumber":275,"content":"        "},{"type":"INSERT","lineNumber":276,"content":"        // Patrol behavior"},{"type":"INSERT","lineNumber":277,"content":"        public List<Vector2> PatrolPoints { get; set; }"},{"type":"INSERT","lineNumber":278,"content":"        public int PatrolIndex { get; set; }"},{"type":"INSERT","lineNumber":279,"content":"        public float PatrolWaitTime { get; set; }"},{"type":"INSERT","lineNumber":280,"content":"        private float _patrolTimer;"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"        // State timers"},{"type":"INSERT","lineNumber":283,"content":"        public float StateTimer { get; set; }"},{"type":"INSERT","lineNumber":284,"content":"        public float LastPlayerSeenTime { get; set; }"},{"type":"INSERT","lineNumber":285,"content":"        public Vector2 LastPlayerPosition { get; set; }"},{"type":"INSERT","lineNumber":286,"content":""},{"type":"INSERT","lineNumber":287,"content":"        private AStar _pathfinder;"},{"type":"INSERT","lineNumber":288,"content":""},{"type":"INSERT","lineNumber":289,"content":"        public AIComponent(float detectionRange = 128f, float attackRange = 40f, float moveSpeed = 50f)"},{"type":"INSERT","lineNumber":290,"content":"        {"},{"type":"INSERT","lineNumber":291,"content":"            CurrentState = AIState.Idle;"},{"type":"INSERT","lineNumber":292,"content":"            DetectionRange = detectionRange;"},{"type":"INSERT","lineNumber":293,"content":"            AttackRange = attackRange;"},{"type":"INSERT","lineNumber":294,"content":"            MoveSpeed = moveSpeed;"},{"type":"INSERT","lineNumber":295,"content":"            CurrentPath = new List<Vector2>();"},{"type":"INSERT","lineNumber":296,"content":"            PatrolPoints = new List<Vector2>();"},{"type":"INSERT","lineNumber":297,"content":"            PatrolWaitTime = 2f;"},{"type":"INSERT","lineNumber":298,"content":"            _pathfinder = new AStar();"},{"type":"INSERT","lineNumber":299,"content":"        }"},{"type":"INSERT","lineNumber":300,"content":""},{"type":"INSERT","lineNumber":301,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":302,"content":"        {"},{"type":"INSERT","lineNumber":303,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":304,"content":"            StateTimer += deltaTime;"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"INSERT","lineNumber":306,"content":"            if (CurrentState == AIState.Patrolling)"},{"type":"INSERT","lineNumber":307,"content":"            {"},{"type":"INSERT","lineNumber":308,"content":"                _patrolTimer += deltaTime;"},{"type":"INSERT","lineNumber":309,"content":"            }"},{"type":"INSERT","lineNumber":310,"content":"        }"},{"type":"INSERT","lineNumber":311,"content":""},{"type":"INSERT","lineNumber":312,"content":"        public bool FindPath(Vector2 start, Vector2 end, Dungeon dungeon)"},{"type":"INSERT","lineNumber":313,"content":"        {"},{"type":"INSERT","lineNumber":314,"content":"            var path = _pathfinder.FindPath(start, end, dungeon);"},{"type":"INSERT","lineNumber":315,"content":"            if (path != null && path.Count > 0)"},{"type":"INSERT","lineNumber":316,"content":"            {"},{"type":"INSERT","lineNumber":317,"content":"                CurrentPath = path;"},{"type":"INSERT","lineNumber":318,"content":"                CurrentPathIndex = 0;"},{"type":"INSERT","lineNumber":319,"content":"                return true;"},{"type":"INSERT","lineNumber":320,"content":"            }"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"            CurrentPath.Clear();"},{"type":"INSERT","lineNumber":323,"content":"            return false;"},{"type":"INSERT","lineNumber":324,"content":"        }"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"INSERT","lineNumber":326,"content":"        public Vector2? GetNextPathPoint()"},{"type":"INSERT","lineNumber":327,"content":"        {"},{"type":"INSERT","lineNumber":328,"content":"            if (CurrentPath.Count == 0 || CurrentPathIndex >= CurrentPath.Count)"},{"type":"INSERT","lineNumber":329,"content":"                return null;"},{"type":"INSERT","lineNumber":330,"content":""},{"type":"INSERT","lineNumber":331,"content":"            return CurrentPath[CurrentPathIndex];"},{"type":"INSERT","lineNumber":332,"content":"        }"},{"type":"INSERT","lineNumber":333,"content":""},{"type":"INSERT","lineNumber":334,"content":"        public void AdvanceToNextPathPoint()"},{"type":"INSERT","lineNumber":335,"content":"        {"},{"type":"INSERT","lineNumber":336,"content":"            CurrentPathIndex++;"},{"type":"INSERT","lineNumber":337,"content":"        }"},{"type":"INSERT","lineNumber":338,"content":""},{"type":"INSERT","lineNumber":339,"content":"        public bool HasReachedEndOfPath()"},{"type":"INSERT","lineNumber":340,"content":"        {"},{"type":"INSERT","lineNumber":341,"content":"            return CurrentPathIndex >= CurrentPath.Count;"},{"type":"INSERT","lineNumber":342,"content":"        }"},{"type":"INSERT","lineNumber":343,"content":""},{"type":"INSERT","lineNumber":344,"content":"        public void SetState(AIState newState)"},{"type":"INSERT","lineNumber":345,"content":"        {"},{"type":"INSERT","lineNumber":346,"content":"            if (CurrentState != newState)"},{"type":"INSERT","lineNumber":347,"content":"            {"},{"type":"INSERT","lineNumber":348,"content":"                CurrentState = newState;"},{"type":"INSERT","lineNumber":349,"content":"                StateTimer = 0f;"},{"type":"INSERT","lineNumber":350,"content":"                "},{"type":"INSERT","lineNumber":351,"content":"                // State-specific initialization"},{"type":"INSERT","lineNumber":352,"content":"                switch (newState)"},{"type":"INSERT","lineNumber":353,"content":"                {"},{"type":"INSERT","lineNumber":354,"content":"                    case AIState.Patrolling:"},{"type":"INSERT","lineNumber":355,"content":"                        _patrolTimer = 0f;"},{"type":"INSERT","lineNumber":356,"content":"                        break;"},{"type":"INSERT","lineNumber":357,"content":"                }"},{"type":"INSERT","lineNumber":358,"content":"            }"},{"type":"INSERT","lineNumber":359,"content":"        }"},{"type":"INSERT","lineNumber":360,"content":""},{"type":"INSERT","lineNumber":361,"content":"        public bool CanPatrol()"},{"type":"INSERT","lineNumber":362,"content":"        {"},{"type":"INSERT","lineNumber":363,"content":"            return _patrolTimer >= PatrolWaitTime;"},{"type":"INSERT","lineNumber":364,"content":"        }"},{"type":"INSERT","lineNumber":365,"content":""},{"type":"INSERT","lineNumber":366,"content":"        public void ResetPatrolTimer()"},{"type":"INSERT","lineNumber":367,"content":"        {"},{"type":"INSERT","lineNumber":368,"content":"            _patrolTimer = 0f;"},{"type":"INSERT","lineNumber":369,"content":"        }"},{"type":"INSERT","lineNumber":370,"content":""},{"type":"INSERT","lineNumber":371,"content":"        public void AddPatrolPoint(Vector2 point)"},{"type":"INSERT","lineNumber":372,"content":"        {"},{"type":"INSERT","lineNumber":373,"content":"            PatrolPoints.Add(point);"},{"type":"INSERT","lineNumber":374,"content":"        }"},{"type":"INSERT","lineNumber":375,"content":""},{"type":"INSERT","lineNumber":376,"content":"        public Vector2? GetNextPatrolPoint()"},{"type":"INSERT","lineNumber":377,"content":"        {"},{"type":"INSERT","lineNumber":378,"content":"            if (PatrolPoints.Count == 0) return null;"},{"type":"INSERT","lineNumber":379,"content":""},{"type":"INSERT","lineNumber":380,"content":"            PatrolIndex = (PatrolIndex + 1) % PatrolPoints.Count;"},{"type":"INSERT","lineNumber":381,"content":"            return PatrolPoints[PatrolIndex];"},{"type":"INSERT","lineNumber":382,"content":"        }"},{"type":"INSERT","lineNumber":383,"content":"    }"},{"type":"INSERT","lineNumber":384,"content":"}"},{"type":"INSERT","lineNumber":385,"content":""},{"type":"INSERT","lineNumber":386,"content":"// ============================================"},{"type":"INSERT","lineNumber":387,"content":"// Entity.cs - Base entity class"},{"type":"INSERT","lineNumber":388,"content":"// ============================================"},{"type":"INSERT","lineNumber":389,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":390,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":391,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":392,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":393,"content":"using System;"},{"type":"INSERT","lineNumber":394,"content":""},{"type":"INSERT","lineNumber":395,"content":"namespace DungeonExplorer.Entities"},{"type":"INSERT","lineNumber":396,"content":"{"},{"type":"INSERT","lineNumber":397,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":398,"content":"    /// Base entity class using Entity-Component pattern"},{"type":"INSERT","lineNumber":399,"content":"    /// All game objects inherit from this class"},{"type":"INSERT","lineNumber":400,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":401,"content":"    public abstract class Entity"},{"type":"INSERT","lineNumber":402,"content":"    {"},{"type":"INSERT","lineNumber":403,"content":"        protected Dictionary<Type, IComponent> _components;"},{"type":"INSERT","lineNumber":404,"content":"        public bool IsActive { get; set; }"}]},{"timestamp":1756228146920,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"INSERT","lineNumber":4,"content":""},{"type":"DELETE","lineNumber":7,"oldContent":"}"},{"type":"DELETE","lineNumber":8,"oldContent":"        public bool IsActive { get; set; }"},{"type":"INSERT","lineNumber":6,"content":"{"},{"type":"DELETE","lineNumber":10,"oldContent":"        protected Dictionary<Type, IComponent> _components;"},{"type":"DELETE","lineNumber":12,"oldContent":"    {"},{"type":"DELETE","lineNumber":14,"oldContent":"    public abstract class Entity"},{"type":"DELETE","lineNumber":16,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":17,"oldContent":"    /// All game objects inherit from this class"},{"type":"INSERT","lineNumber":11,"content":"}"},{"type":"DELETE","lineNumber":19,"oldContent":"    /// Base entity class using Entity-Component pattern"},{"type":"DELETE","lineNumber":21,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":23,"oldContent":"{"},{"type":"DELETE","lineNumber":25,"oldContent":"namespace DungeonExplorer.Entities"},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":29,"oldContent":"using System;"},{"type":"DELETE","lineNumber":31,"oldContent":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":33,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":35,"oldContent":"using Microsoft.Xna.Framework.Graphics;"},{"type":"DELETE","lineNumber":37,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":39,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":41,"oldContent":"// Entity.cs - Base entity class"},{"type":"DELETE","lineNumber":43,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":47,"oldContent":"}"},{"type":"DELETE","lineNumber":49,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":"        }"},{"type":"DELETE","lineNumber":53,"oldContent":"            return PatrolPoints[PatrolIndex];"},{"type":"DELETE","lineNumber":55,"oldContent":"            PatrolIndex = (PatrolIndex + 1) % PatrolPoints.Count;"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"            if (PatrolPoints.Count == 0) return null;"},{"type":"DELETE","lineNumber":61,"oldContent":"        {"},{"type":"DELETE","lineNumber":63,"oldContent":"        public Vector2? GetNextPatrolPoint()"},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":68,"oldContent":"        }"},{"type":"DELETE","lineNumber":69,"oldContent":"            PatrolPoints.Add(point);"},{"type":"DELETE","lineNumber":71,"oldContent":"        {"},{"type":"DELETE","lineNumber":73,"oldContent":"        public void AddPatrolPoint(Vector2 point)"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"        }"},{"type":"DELETE","lineNumber":79,"oldContent":"            _patrolTimer = 0f;"},{"type":"DELETE","lineNumber":81,"oldContent":"        {"},{"type":"DELETE","lineNumber":83,"oldContent":"        public void ResetPatrolTimer()"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"        }"},{"type":"DELETE","lineNumber":89,"oldContent":"            return _patrolTimer >= PatrolWaitTime;"},{"type":"DELETE","lineNumber":91,"oldContent":"        {"},{"type":"DELETE","lineNumber":93,"oldContent":"        public bool CanPatrol()"},{"type":"DELETE","lineNumber":95,"oldContent":""},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"            }"},{"type":"DELETE","lineNumber":101,"oldContent":"                }"},{"type":"DELETE","lineNumber":103,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":105,"oldContent":"                        _patrolTimer = 0f;"},{"type":"DELETE","lineNumber":107,"oldContent":"                    case AIState.Patrolling:"},{"type":"DELETE","lineNumber":109,"oldContent":"                {"},{"type":"DELETE","lineNumber":111,"oldContent":"                switch (newState)"},{"type":"DELETE","lineNumber":113,"oldContent":"                // State-specific initialization"},{"type":"DELETE","lineNumber":115,"oldContent":"                "},{"type":"DELETE","lineNumber":117,"oldContent":"                StateTimer = 0f;"},{"type":"DELETE","lineNumber":119,"oldContent":"                CurrentState = newState;"},{"type":"DELETE","lineNumber":121,"oldContent":"            {"},{"type":"DELETE","lineNumber":123,"oldContent":"            if (CurrentState != newState)"},{"type":"DELETE","lineNumber":125,"oldContent":"        {"},{"type":"DELETE","lineNumber":127,"oldContent":"        public void SetState(AIState newState)"},{"type":"DELETE","lineNumber":129,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"        }"},{"type":"DELETE","lineNumber":133,"oldContent":"            return CurrentPathIndex >= CurrentPath.Count;"},{"type":"DELETE","lineNumber":135,"oldContent":"        {"},{"type":"DELETE","lineNumber":137,"oldContent":"        public bool HasReachedEndOfPath()"},{"type":"DELETE","lineNumber":139,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"        }"},{"type":"DELETE","lineNumber":143,"oldContent":"            CurrentPathIndex++;"},{"type":"DELETE","lineNumber":145,"oldContent":"        {"},{"type":"DELETE","lineNumber":147,"oldContent":"        public void AdvanceToNextPathPoint()"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":151,"oldContent":"        }"},{"type":"DELETE","lineNumber":153,"oldContent":"            return CurrentPath[CurrentPathIndex];"},{"type":"DELETE","lineNumber":155,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"                return null;"},{"type":"DELETE","lineNumber":159,"oldContent":"            if (CurrentPath.Count == 0 || CurrentPathIndex >= CurrentPath.Count)"},{"type":"DELETE","lineNumber":161,"oldContent":"        {"},{"type":"DELETE","lineNumber":163,"oldContent":"        public Vector2? GetNextPathPoint()"},{"type":"DELETE","lineNumber":166,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"        }"},{"type":"DELETE","lineNumber":169,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":171,"oldContent":"            CurrentPath.Clear();"},{"type":"DELETE","lineNumber":173,"oldContent":""},{"type":"DELETE","lineNumber":175,"oldContent":"            }"},{"type":"DELETE","lineNumber":177,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":179,"oldContent":"                CurrentPathIndex = 0;"},{"type":"DELETE","lineNumber":181,"oldContent":"                CurrentPath = path;"},{"type":"DELETE","lineNumber":183,"oldContent":"            {"},{"type":"DELETE","lineNumber":185,"oldContent":"            if (path != null && path.Count > 0)"},{"type":"DELETE","lineNumber":187,"oldContent":"            var path = _pathfinder.FindPath(start, end, dungeon);"},{"type":"DELETE","lineNumber":189,"oldContent":"        {"},{"type":"DELETE","lineNumber":191,"oldContent":"        public bool FindPath(Vector2 start, Vector2 end, Dungeon dungeon)"},{"type":"DELETE","lineNumber":194,"oldContent":""},{"type":"DELETE","lineNumber":195,"oldContent":"        }"},{"type":"DELETE","lineNumber":197,"oldContent":"            }"},{"type":"DELETE","lineNumber":199,"oldContent":"                _patrolTimer += deltaTime;"},{"type":"DELETE","lineNumber":201,"oldContent":"            {"},{"type":"DELETE","lineNumber":203,"oldContent":"            if (CurrentState == AIState.Patrolling)"},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"            StateTimer += deltaTime;"},{"type":"DELETE","lineNumber":209,"oldContent":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":211,"oldContent":"        {"},{"type":"DELETE","lineNumber":213,"oldContent":"        public void Update(GameTime gameTime)"},{"type":"DELETE","lineNumber":215,"oldContent":""},{"type":"DELETE","lineNumber":217,"oldContent":"        }"},{"type":"DELETE","lineNumber":219,"oldContent":"            _pathfinder = new AStar();"},{"type":"DELETE","lineNumber":221,"oldContent":"            PatrolWaitTime = 2f;"},{"type":"DELETE","lineNumber":223,"oldContent":"            PatrolPoints = new List<Vector2>();"},{"type":"DELETE","lineNumber":225,"oldContent":"            CurrentPath = new List<Vector2>();"},{"type":"DELETE","lineNumber":227,"oldContent":"            MoveSpeed = moveSpeed;"},{"type":"DELETE","lineNumber":229,"oldContent":"            AttackRange = attackRange;"},{"type":"DELETE","lineNumber":231,"oldContent":"            DetectionRange = detectionRange;"},{"type":"DELETE","lineNumber":233,"oldContent":"            CurrentState = AIState.Idle;"},{"type":"DELETE","lineNumber":235,"oldContent":"        {"},{"type":"DELETE","lineNumber":237,"oldContent":"        public AIComponent(float detectionRange = 128f, float attackRange = 40f, float moveSpeed = 50f)"},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"DELETE","lineNumber":241,"oldContent":"        private AStar _pathfinder;"},{"type":"DELETE","lineNumber":243,"oldContent":""},{"type":"DELETE","lineNumber":245,"oldContent":"        public Vector2 LastPlayerPosition { get; set; }"},{"type":"DELETE","lineNumber":247,"oldContent":"        public float LastPlayerSeenTime { get; set; }"},{"type":"DELETE","lineNumber":249,"oldContent":"        public float StateTimer { get; set; }"},{"type":"DELETE","lineNumber":251,"oldContent":"        // State timers"},{"type":"DELETE","lineNumber":253,"oldContent":""},{"type":"DELETE","lineNumber":255,"oldContent":"        private float _patrolTimer;"},{"type":"DELETE","lineNumber":257,"oldContent":"        public float PatrolWaitTime { get; set; }"},{"type":"DELETE","lineNumber":259,"oldContent":"        public int PatrolIndex { get; set; }"},{"type":"DELETE","lineNumber":261,"oldContent":"        public List<Vector2> PatrolPoints { get; set; }"},{"type":"DELETE","lineNumber":263,"oldContent":"        // Patrol behavior"},{"type":"DELETE","lineNumber":265,"oldContent":"        "},{"type":"DELETE","lineNumber":267,"oldContent":"        public int CurrentPathIndex { get; set; }"},{"type":"DELETE","lineNumber":269,"oldContent":"        public List<Vector2> CurrentPath { get; private set; }"},{"type":"DELETE","lineNumber":271,"oldContent":"        public Vector2 Target { get; set; }"},{"type":"DELETE","lineNumber":273,"oldContent":"        public float MoveSpeed { get; set; }"},{"type":"DELETE","lineNumber":275,"oldContent":"        public float AttackRange { get; set; }"},{"type":"DELETE","lineNumber":277,"oldContent":"        public float DetectionRange { get; set; }"},{"type":"DELETE","lineNumber":279,"oldContent":"        public AIState CurrentState { get; set; }"},{"type":"DELETE","lineNumber":281,"oldContent":"    {"},{"type":"DELETE","lineNumber":283,"oldContent":"    public class AIComponent : IComponent"},{"type":"DELETE","lineNumber":285,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":287,"oldContent":"    /// Component that handles AI behavior and decision making"},{"type":"DELETE","lineNumber":289,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":291,"oldContent":""},{"type":"DELETE","lineNumber":293,"oldContent":"    }"},{"type":"DELETE","lineNumber":295,"oldContent":"        Searching"},{"type":"DELETE","lineNumber":297,"oldContent":"        Attacking,"},{"type":"DELETE","lineNumber":299,"oldContent":"        Chasing,"},{"type":"DELETE","lineNumber":301,"oldContent":"        Patrolling,"},{"type":"DELETE","lineNumber":303,"oldContent":"        Idle,"},{"type":"DELETE","lineNumber":305,"oldContent":"    {"},{"type":"DELETE","lineNumber":307,"oldContent":"    public enum AIState"},{"type":"DELETE","lineNumber":309,"oldContent":"{"},{"type":"DELETE","lineNumber":311,"oldContent":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":313,"oldContent":""},{"type":"DELETE","lineNumber":315,"oldContent":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":317,"oldContent":"using DungeonExplorer.World;"},{"type":"DELETE","lineNumber":319,"oldContent":"using DungeonExplorer.AI;"},{"type":"DELETE","lineNumber":321,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":323,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":325,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":327,"oldContent":"// AIComponent.cs - AI behavior and pathfinding"},{"type":"DELETE","lineNumber":329,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":331,"oldContent":""},{"type":"DELETE","lineNumber":333,"oldContent":"}"},{"type":"DELETE","lineNumber":335,"oldContent":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":"        }"},{"type":"DELETE","lineNumber":339,"oldContent":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"DELETE","lineNumber":341,"oldContent":"                CurrentHealth = MaxHealth;"},{"type":"DELETE","lineNumber":343,"oldContent":"            if (CurrentHealth > MaxHealth)"},{"type":"DELETE","lineNumber":345,"oldContent":"            MaxHealth = newMaxHealth;"},{"type":"DELETE","lineNumber":347,"oldContent":"        {"},{"type":"DELETE","lineNumber":349,"oldContent":"        public void SetMaxHealth(int newMaxHealth)"},{"type":"DELETE","lineNumber":351,"oldContent":""},{"type":"DELETE","lineNumber":353,"oldContent":"        }"},{"type":"DELETE","lineNumber":355,"oldContent":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"DELETE","lineNumber":357,"oldContent":"            CurrentHealth = Math.Min(MaxHealth, CurrentHealth + amount);"},{"type":"DELETE","lineNumber":359,"oldContent":""},{"type":"DELETE","lineNumber":361,"oldContent":"            if (amount <= 0) return;"},{"type":"DELETE","lineNumber":363,"oldContent":"        {"},{"type":"DELETE","lineNumber":365,"oldContent":"        public void Heal(int amount)"},{"type":"DELETE","lineNumber":367,"oldContent":""},{"type":"DELETE","lineNumber":370,"oldContent":"        }"},{"type":"DELETE","lineNumber":371,"oldContent":"            return false; // Entity survived"},{"type":"DELETE","lineNumber":373,"oldContent":""},{"type":"DELETE","lineNumber":375,"oldContent":"            }"},{"type":"DELETE","lineNumber":377,"oldContent":"                _invulnerabilityTimer = InvulnerabilityDuration;"},{"type":"DELETE","lineNumber":379,"oldContent":"                IsInvulnerable = true;"},{"type":"DELETE","lineNumber":381,"oldContent":"                // Start invulnerability period"},{"type":"DELETE","lineNumber":383,"oldContent":"            {"},{"type":"DELETE","lineNumber":385,"oldContent":"            else"},{"type":"DELETE","lineNumber":387,"oldContent":"            }"},{"type":"DELETE","lineNumber":389,"oldContent":"                return true; // Entity died"},{"type":"INSERT","lineNumber":199,"content":"            }"},{"type":"INSERT","lineNumber":200,"content":"        }"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"        public bool TakeDamage(int damage)"},{"type":"INSERT","lineNumber":203,"content":"        {"},{"type":"INSERT","lineNumber":204,"content":"            if (IsInvulnerable || !IsAlive || damage <= 0)"},{"type":"INSERT","lineNumber":205,"content":"                return false;"},{"type":"INSERT","lineNumber":206,"content":""},{"type":"INSERT","lineNumber":207,"content":"            CurrentHealth = Math.Max(0, CurrentHealth - damage);"},{"type":"INSERT","lineNumber":208,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            if (CurrentHealth <= 0)"},{"type":"INSERT","lineNumber":211,"content":"            {"},{"type":"INSERT","lineNumber":213,"content":"                return true; // Entity died"},{"type":"INSERT","lineNumber":215,"content":"            else"},{"type":"INSERT","lineNumber":217,"content":"                // Start invulnerability period"},{"type":"INSERT","lineNumber":218,"content":"                IsInvulnerable = true;"},{"type":"INSERT","lineNumber":219,"content":"                _invulnerabilityTimer = InvulnerabilityDuration;"},{"type":"INSERT","lineNumber":220,"content":"            }"},{"type":"INSERT","lineNumber":221,"content":""},{"type":"INSERT","lineNumber":222,"content":"            return false; // Entity survived"},{"type":"DELETE","lineNumber":395,"oldContent":"            if (CurrentHealth <= 0)"},{"type":"INSERT","lineNumber":225,"content":"        public void Heal(int amount)"},{"type":"INSERT","lineNumber":226,"content":"        {"},{"type":"INSERT","lineNumber":227,"content":"            if (amount <= 0) return;"},{"type":"DELETE","lineNumber":398,"oldContent":"        public bool TakeDamage(int damage)"},{"type":"INSERT","lineNumber":229,"content":"            CurrentHealth = Math.Min(MaxHealth, CurrentHealth + amount);"},{"type":"INSERT","lineNumber":231,"content":"        }"},{"type":"INSERT","lineNumber":232,"content":""},{"type":"INSERT","lineNumber":233,"content":"        public void SetMaxHealth(int newMaxHealth)"},{"type":"DELETE","lineNumber":401,"oldContent":"            CurrentHealth = Math.Max(0, CurrentHealth - damage);"},{"type":"DELETE","lineNumber":402,"oldContent":"            if (IsInvulnerable || !IsAlive || damage <= 0)"},{"type":"INSERT","lineNumber":235,"content":"            MaxHealth = newMaxHealth;"},{"type":"INSERT","lineNumber":236,"content":"            if (CurrentHealth > MaxHealth)"},{"type":"INSERT","lineNumber":237,"content":"                CurrentHealth = MaxHealth;"},{"type":"INSERT","lineNumber":238,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":239,"content":"        }"},{"type":"INSERT","lineNumber":240,"content":"    }"},{"type":"INSERT","lineNumber":241,"content":"}"},{"type":"DELETE","lineNumber":404,"oldContent":"                return false;"},{"type":"INSERT","lineNumber":243,"content":"// ============================================"},{"type":"INSERT","lineNumber":244,"content":"// AIComponent.cs - AI behavior and pathfinding"},{"type":"INSERT","lineNumber":245,"content":"// ============================================"},{"type":"INSERT","lineNumber":246,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":247,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":248,"content":"using DungeonExplorer.AI;"},{"type":"INSERT","lineNumber":249,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":250,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":251,"content":""},{"type":"INSERT","lineNumber":252,"content":"namespace DungeonExplorer.Components"},{"type":"INSERT","lineNumber":253,"content":"{"},{"type":"INSERT","lineNumber":254,"content":"    public enum AIState"},{"type":"INSERT","lineNumber":255,"content":"    {"},{"type":"INSERT","lineNumber":256,"content":"        Idle,"},{"type":"INSERT","lineNumber":257,"content":"        Patrolling,"},{"type":"INSERT","lineNumber":258,"content":"        Chasing,"},{"type":"INSERT","lineNumber":259,"content":"        Attacking,"},{"type":"INSERT","lineNumber":260,"content":"        Searching"},{"type":"INSERT","lineNumber":261,"content":"    }"},{"type":"INSERT","lineNumber":262,"content":""},{"type":"INSERT","lineNumber":263,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":264,"content":"    /// Component that handles AI behavior and decision making"},{"type":"INSERT","lineNumber":265,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":266,"content":"    public class AIComponent : IComponent"},{"type":"INSERT","lineNumber":267,"content":"    {"},{"type":"INSERT","lineNumber":268,"content":"        public AIState CurrentState { get; set; }"},{"type":"INSERT","lineNumber":269,"content":"        public float DetectionRange { get; set; }"},{"type":"INSERT","lineNumber":270,"content":"        public float AttackRange { get; set; }"},{"type":"INSERT","lineNumber":271,"content":"        public float MoveSpeed { get; set; }"},{"type":"INSERT","lineNumber":272,"content":"        public Vector2 Target { get; set; }"},{"type":"INSERT","lineNumber":273,"content":"        public List<Vector2> CurrentPath { get; private set; }"},{"type":"INSERT","lineNumber":274,"content":"        public int CurrentPathIndex { get; set; }"},{"type":"INSERT","lineNumber":275,"content":"        "},{"type":"INSERT","lineNumber":276,"content":"        // Patrol behavior"},{"type":"INSERT","lineNumber":277,"content":"        public List<Vector2> PatrolPoints { get; set; }"},{"type":"INSERT","lineNumber":278,"content":"        public int PatrolIndex { get; set; }"},{"type":"INSERT","lineNumber":279,"content":"        public float PatrolWaitTime { get; set; }"},{"type":"INSERT","lineNumber":280,"content":"        private float _patrolTimer;"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"        // State timers"},{"type":"INSERT","lineNumber":283,"content":"        public float StateTimer { get; set; }"},{"type":"INSERT","lineNumber":284,"content":"        public float LastPlayerSeenTime { get; set; }"},{"type":"INSERT","lineNumber":285,"content":"        public Vector2 LastPlayerPosition { get; set; }"},{"type":"INSERT","lineNumber":286,"content":""},{"type":"INSERT","lineNumber":287,"content":"        private AStar _pathfinder;"},{"type":"INSERT","lineNumber":288,"content":""},{"type":"INSERT","lineNumber":289,"content":"        public AIComponent(float detectionRange = 128f, float attackRange = 40f, float moveSpeed = 50f)"},{"type":"INSERT","lineNumber":290,"content":"        {"},{"type":"INSERT","lineNumber":291,"content":"            CurrentState = AIState.Idle;"},{"type":"INSERT","lineNumber":292,"content":"            DetectionRange = detectionRange;"},{"type":"INSERT","lineNumber":293,"content":"            AttackRange = attackRange;"},{"type":"INSERT","lineNumber":294,"content":"            MoveSpeed = moveSpeed;"},{"type":"INSERT","lineNumber":295,"content":"            CurrentPath = new List<Vector2>();"},{"type":"INSERT","lineNumber":296,"content":"            PatrolPoints = new List<Vector2>();"},{"type":"INSERT","lineNumber":297,"content":"            PatrolWaitTime = 2f;"},{"type":"INSERT","lineNumber":298,"content":"            _pathfinder = new AStar();"},{"type":"INSERT","lineNumber":299,"content":"        }"},{"type":"INSERT","lineNumber":300,"content":""},{"type":"INSERT","lineNumber":301,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":302,"content":"        {"},{"type":"INSERT","lineNumber":303,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":304,"content":"            StateTimer += deltaTime;"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"INSERT","lineNumber":306,"content":"            if (CurrentState == AIState.Patrolling)"},{"type":"INSERT","lineNumber":307,"content":"            {"},{"type":"INSERT","lineNumber":308,"content":"                _patrolTimer += deltaTime;"},{"type":"INSERT","lineNumber":309,"content":"            }"},{"type":"INSERT","lineNumber":310,"content":"        }"},{"type":"INSERT","lineNumber":311,"content":""},{"type":"INSERT","lineNumber":312,"content":"        public bool FindPath(Vector2 start, Vector2 end, Dungeon dungeon)"},{"type":"INSERT","lineNumber":313,"content":"        {"},{"type":"INSERT","lineNumber":314,"content":"            var path = _pathfinder.FindPath(start, end, dungeon);"},{"type":"INSERT","lineNumber":315,"content":"            if (path != null && path.Count > 0)"},{"type":"INSERT","lineNumber":316,"content":"            {"},{"type":"INSERT","lineNumber":317,"content":"                CurrentPath = path;"},{"type":"INSERT","lineNumber":318,"content":"                CurrentPathIndex = 0;"},{"type":"INSERT","lineNumber":319,"content":"                return true;"},{"type":"INSERT","lineNumber":320,"content":"            }"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"            CurrentPath.Clear();"},{"type":"INSERT","lineNumber":323,"content":"            return false;"},{"type":"INSERT","lineNumber":324,"content":"        }"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"INSERT","lineNumber":326,"content":"        public Vector2? GetNextPathPoint()"},{"type":"INSERT","lineNumber":327,"content":"        {"},{"type":"INSERT","lineNumber":328,"content":"            if (CurrentPath.Count == 0 || CurrentPathIndex >= CurrentPath.Count)"},{"type":"INSERT","lineNumber":329,"content":"                return null;"},{"type":"INSERT","lineNumber":330,"content":""},{"type":"INSERT","lineNumber":331,"content":"            return CurrentPath[CurrentPathIndex];"},{"type":"INSERT","lineNumber":332,"content":"        }"},{"type":"INSERT","lineNumber":333,"content":""},{"type":"INSERT","lineNumber":334,"content":"        public void AdvanceToNextPathPoint()"},{"type":"INSERT","lineNumber":335,"content":"        {"},{"type":"INSERT","lineNumber":336,"content":"            CurrentPathIndex++;"},{"type":"INSERT","lineNumber":337,"content":"        }"},{"type":"INSERT","lineNumber":338,"content":""},{"type":"INSERT","lineNumber":339,"content":"        public bool HasReachedEndOfPath()"},{"type":"INSERT","lineNumber":340,"content":"        {"},{"type":"INSERT","lineNumber":341,"content":"            return CurrentPathIndex >= CurrentPath.Count;"},{"type":"INSERT","lineNumber":342,"content":"        }"},{"type":"INSERT","lineNumber":343,"content":""},{"type":"INSERT","lineNumber":344,"content":"        public void SetState(AIState newState)"},{"type":"INSERT","lineNumber":345,"content":"        {"},{"type":"INSERT","lineNumber":346,"content":"            if (CurrentState != newState)"},{"type":"INSERT","lineNumber":347,"content":"            {"},{"type":"INSERT","lineNumber":348,"content":"                CurrentState = newState;"},{"type":"INSERT","lineNumber":349,"content":"                StateTimer = 0f;"},{"type":"INSERT","lineNumber":350,"content":"                "},{"type":"INSERT","lineNumber":351,"content":"                // State-specific initialization"},{"type":"INSERT","lineNumber":352,"content":"                switch (newState)"},{"type":"INSERT","lineNumber":353,"content":"                {"},{"type":"INSERT","lineNumber":354,"content":"                    case AIState.Patrolling:"},{"type":"INSERT","lineNumber":355,"content":"                        _patrolTimer = 0f;"},{"type":"INSERT","lineNumber":356,"content":"                        break;"},{"type":"INSERT","lineNumber":357,"content":"                }"},{"type":"INSERT","lineNumber":358,"content":"            }"},{"type":"INSERT","lineNumber":359,"content":"        }"},{"type":"INSERT","lineNumber":360,"content":""},{"type":"INSERT","lineNumber":361,"content":"        public bool CanPatrol()"},{"type":"INSERT","lineNumber":362,"content":"        {"},{"type":"INSERT","lineNumber":363,"content":"            return _patrolTimer >= PatrolWaitTime;"},{"type":"INSERT","lineNumber":364,"content":"        }"},{"type":"INSERT","lineNumber":365,"content":""},{"type":"INSERT","lineNumber":366,"content":"        public void ResetPatrolTimer()"},{"type":"INSERT","lineNumber":367,"content":"        {"},{"type":"INSERT","lineNumber":368,"content":"            _patrolTimer = 0f;"},{"type":"INSERT","lineNumber":369,"content":"        }"},{"type":"INSERT","lineNumber":370,"content":""},{"type":"INSERT","lineNumber":371,"content":"        public void AddPatrolPoint(Vector2 point)"},{"type":"INSERT","lineNumber":372,"content":"        {"},{"type":"INSERT","lineNumber":373,"content":"            PatrolPoints.Add(point);"},{"type":"INSERT","lineNumber":374,"content":"        }"},{"type":"INSERT","lineNumber":375,"content":""},{"type":"INSERT","lineNumber":376,"content":"        public Vector2? GetNextPatrolPoint()"},{"type":"INSERT","lineNumber":377,"content":"        {"},{"type":"INSERT","lineNumber":378,"content":"            if (PatrolPoints.Count == 0) return null;"},{"type":"INSERT","lineNumber":379,"content":""},{"type":"INSERT","lineNumber":380,"content":"            PatrolIndex = (PatrolIndex + 1) % PatrolPoints.Count;"},{"type":"INSERT","lineNumber":381,"content":"            return PatrolPoints[PatrolIndex];"},{"type":"INSERT","lineNumber":382,"content":"        }"},{"type":"INSERT","lineNumber":383,"content":"    }"},{"type":"INSERT","lineNumber":384,"content":"}"},{"type":"INSERT","lineNumber":385,"content":""},{"type":"INSERT","lineNumber":386,"content":"// ============================================"},{"type":"INSERT","lineNumber":387,"content":"// Entity.cs - Base entity class"},{"type":"INSERT","lineNumber":388,"content":"// ============================================"},{"type":"INSERT","lineNumber":389,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":390,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":391,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":392,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":393,"content":"using System;"},{"type":"INSERT","lineNumber":394,"content":""},{"type":"INSERT","lineNumber":395,"content":"namespace DungeonExplorer.Entities"},{"type":"INSERT","lineNumber":396,"content":"{"},{"type":"INSERT","lineNumber":397,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":398,"content":"    /// Base entity class using Entity-Component pattern"},{"type":"INSERT","lineNumber":399,"content":"    /// All game objects inherit from this class"},{"type":"INSERT","lineNumber":400,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":401,"content":"    public abstract class Entity"},{"type":"INSERT","lineNumber":402,"content":"    {"},{"type":"INSERT","lineNumber":403,"content":"        protected Dictionary<Type, IComponent> _components;"},{"type":"INSERT","lineNumber":404,"content":"        public bool IsActive { get; set; }"}]},{"timestamp":1756228159118,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":1,"oldContent":"// IComponent.cs - Base interface for all components"},{"type":"DELETE","lineNumber":2,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"INSERT","lineNumber":1,"content":""},{"type":"INSERT","lineNumber":3,"content":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":12,"oldContent":""},{"type":"DELETE","lineNumber":13,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":14,"oldContent":"// TransformComponent.cs - Position, rotation, scale"},{"type":"DELETE","lineNumber":15,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":16,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":17,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":20,"oldContent":"{"},{"type":"DELETE","lineNumber":21,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":22,"oldContent":"    /// Component that handles position, rotation and scale of an entity"},{"type":"DELETE","lineNumber":23,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":24,"oldContent":"    public class TransformComponent : IComponent"},{"type":"DELETE","lineNumber":25,"oldContent":"    {"},{"type":"DELETE","lineNumber":26,"oldContent":"        public Vector2 Position { get; set; }"},{"type":"DELETE","lineNumber":27,"oldContent":"        public float Rotation { get; set; }"},{"type":"DELETE","lineNumber":28,"oldContent":"        public Vector2 Scale { get; set; }"},{"type":"DELETE","lineNumber":29,"oldContent":"        public Vector2 Origin { get; set; }"},{"type":"DELETE","lineNumber":30,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"        public TransformComponent(Vector2 position)"},{"type":"DELETE","lineNumber":32,"oldContent":"        {"},{"type":"DELETE","lineNumber":33,"oldContent":"            Position = position;"},{"type":"DELETE","lineNumber":34,"oldContent":"            Rotation = 0f;"},{"type":"DELETE","lineNumber":35,"oldContent":"            Scale = Vector2.One;"},{"type":"DELETE","lineNumber":36,"oldContent":"            Origin = Vector2.Zero;"},{"type":"DELETE","lineNumber":37,"oldContent":"        }"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"        public void Update(GameTime gameTime)"},{"type":"DELETE","lineNumber":40,"oldContent":"        {"},{"type":"DELETE","lineNumber":41,"oldContent":"            // Transform component doesn't need active updates"},{"type":"DELETE","lineNumber":42,"oldContent":"        }"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"        public Rectangle GetBounds(int width, int height)"},{"type":"DELETE","lineNumber":45,"oldContent":"        {"},{"type":"DELETE","lineNumber":46,"oldContent":"            return new Rectangle("},{"type":"DELETE","lineNumber":47,"oldContent":"                (int)(Position.X - Origin.X * Scale.X),"},{"type":"DELETE","lineNumber":48,"oldContent":"                (int)(Position.Y - Origin.Y * Scale.Y),"},{"type":"DELETE","lineNumber":49,"oldContent":"                (int)(width * Scale.X),"},{"type":"DELETE","lineNumber":50,"oldContent":"                (int)(height * Scale.Y)"},{"type":"DELETE","lineNumber":51,"oldContent":"            );"},{"type":"DELETE","lineNumber":52,"oldContent":"        }"},{"type":"DELETE","lineNumber":53,"oldContent":"    }"},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":57,"oldContent":"// RenderComponent.cs - Handles visual representation"},{"type":"DELETE","lineNumber":58,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":59,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":60,"oldContent":"using Microsoft.Xna.Framework.Graphics;"},{"type":"DELETE","lineNumber":61,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":63,"oldContent":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":64,"oldContent":"{"},{"type":"DELETE","lineNumber":65,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":66,"oldContent":"    /// Component that handles the visual representation of an entity"},{"type":"DELETE","lineNumber":67,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":68,"oldContent":"    public class RenderComponent : IComponent"},{"type":"DELETE","lineNumber":69,"oldContent":"    {"},{"type":"DELETE","lineNumber":70,"oldContent":"        public Texture2D Texture { get; set; }"},{"type":"DELETE","lineNumber":71,"oldContent":"        public Color Tint { get; set; }"},{"type":"DELETE","lineNumber":72,"oldContent":"        public bool Visible { get; set; }"},{"type":"DELETE","lineNumber":73,"oldContent":"        public Rectangle? SourceRectangle { get; set; }"},{"type":"DELETE","lineNumber":74,"oldContent":"        public SpriteEffects SpriteEffects { get; set; }"},{"type":"DELETE","lineNumber":75,"oldContent":"        public float LayerDepth { get; set; }"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":77,"oldContent":"        public RenderComponent(Texture2D texture)"},{"type":"DELETE","lineNumber":78,"oldContent":"        {"},{"type":"DELETE","lineNumber":79,"oldContent":"            Texture = texture;"},{"type":"DELETE","lineNumber":80,"oldContent":"            Tint = Color.White;"},{"type":"DELETE","lineNumber":81,"oldContent":"            Visible = true;"},{"type":"DELETE","lineNumber":82,"oldContent":"            SourceRectangle = null;"},{"type":"DELETE","lineNumber":83,"oldContent":"            SpriteEffects = SpriteEffects.None;"},{"type":"DELETE","lineNumber":84,"oldContent":"            LayerDepth = 0f;"},{"type":"DELETE","lineNumber":85,"oldContent":"        }"},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"        public void Update(GameTime gameTime)"},{"type":"DELETE","lineNumber":88,"oldContent":"        {"},{"type":"DELETE","lineNumber":89,"oldContent":"            // Basic render component doesn't need updates"},{"type":"DELETE","lineNumber":90,"oldContent":"            // Could be extended for animations, effects, etc."},{"type":"DELETE","lineNumber":91,"oldContent":"        }"},{"type":"DELETE","lineNumber":92,"oldContent":"    }"},{"type":"DELETE","lineNumber":93,"oldContent":"}"},{"type":"DELETE","lineNumber":94,"oldContent":""},{"type":"DELETE","lineNumber":95,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":96,"oldContent":"// MovementComponent.cs - Handles movement and physics"},{"type":"DELETE","lineNumber":97,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":98,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":99,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":102,"oldContent":"{"},{"type":"DELETE","lineNumber":103,"oldContent":"            }"},{"type":"DELETE","lineNumber":104,"oldContent":"        }"},{"type":"DELETE","lineNumber":105,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"        public bool TakeDamage(int damage)"},{"type":"DELETE","lineNumber":108,"oldContent":"    /// Component that handles entity movement and basic physics"},{"type":"DELETE","lineNumber":109,"oldContent":"        {"},{"type":"DELETE","lineNumber":110,"oldContent":"            if (IsInvulnerable || !IsAlive || damage <= 0)"},{"type":"DELETE","lineNumber":111,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":112,"oldContent":"                return false;"},{"type":"DELETE","lineNumber":113,"oldContent":""},{"type":"DELETE","lineNumber":114,"oldContent":"    public class MovementComponent : IComponent"},{"type":"DELETE","lineNumber":115,"oldContent":"            CurrentHealth = Math.Max(0, CurrentHealth - damage);"},{"type":"DELETE","lineNumber":116,"oldContent":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"DELETE","lineNumber":117,"oldContent":"    {"},{"type":"DELETE","lineNumber":118,"oldContent":""},{"type":"DELETE","lineNumber":119,"oldContent":"            if (CurrentHealth <= 0)"},{"type":"DELETE","lineNumber":120,"oldContent":"        public Vector2 Velocity { get; set; }"},{"type":"DELETE","lineNumber":121,"oldContent":"            {"},{"type":"DELETE","lineNumber":122,"oldContent":"        public Vector2 Acceleration { get; set; }"},{"type":"DELETE","lineNumber":123,"oldContent":"                return true; // Entity died"},{"type":"DELETE","lineNumber":124,"oldContent":"        public float MaxSpeed { get; set; }"},{"type":"DELETE","lineNumber":125,"oldContent":"            else"},{"type":"DELETE","lineNumber":126,"oldContent":"        public float Friction { get; set; }"},{"type":"DELETE","lineNumber":127,"oldContent":"                // Start invulnerability period"},{"type":"DELETE","lineNumber":128,"oldContent":"                IsInvulnerable = true;"},{"type":"DELETE","lineNumber":129,"oldContent":"        public bool CanMove { get; set; }"},{"type":"DELETE","lineNumber":130,"oldContent":"                _invulnerabilityTimer = InvulnerabilityDuration;"},{"type":"DELETE","lineNumber":131,"oldContent":"            }"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":""},{"type":"DELETE","lineNumber":134,"oldContent":"            return false; // Entity survived"},{"type":"DELETE","lineNumber":135,"oldContent":"        public MovementComponent(float maxSpeed = 100f, float friction = 0.8f)"},{"type":"DELETE","lineNumber":136,"oldContent":"        {"},{"type":"DELETE","lineNumber":137,"oldContent":"        public void Heal(int amount)"},{"type":"DELETE","lineNumber":138,"oldContent":"        {"},{"type":"DELETE","lineNumber":139,"oldContent":"            Velocity = Vector2.Zero;"},{"type":"DELETE","lineNumber":140,"oldContent":"            if (amount <= 0) return;"},{"type":"DELETE","lineNumber":141,"oldContent":"            Acceleration = Vector2.Zero;"},{"type":"DELETE","lineNumber":142,"oldContent":"            CurrentHealth = Math.Min(MaxHealth, CurrentHealth + amount);"},{"type":"DELETE","lineNumber":143,"oldContent":"            MaxSpeed = maxSpeed;"},{"type":"DELETE","lineNumber":144,"oldContent":"        }"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":146,"oldContent":"            Friction = friction;"},{"type":"DELETE","lineNumber":147,"oldContent":"        public void SetMaxHealth(int newMaxHealth)"},{"type":"DELETE","lineNumber":148,"oldContent":"            CanMove = true;"},{"type":"DELETE","lineNumber":149,"oldContent":"            MaxHealth = newMaxHealth;"},{"type":"DELETE","lineNumber":150,"oldContent":"            if (CurrentHealth > MaxHealth)"},{"type":"DELETE","lineNumber":151,"oldContent":"        }"},{"type":"DELETE","lineNumber":152,"oldContent":"                CurrentHealth = MaxHealth;"},{"type":"DELETE","lineNumber":153,"oldContent":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"DELETE","lineNumber":154,"oldContent":""},{"type":"DELETE","lineNumber":155,"oldContent":"        }"},{"type":"DELETE","lineNumber":156,"oldContent":"    }"},{"type":"DELETE","lineNumber":157,"oldContent":"        public void Update(GameTime gameTime)"},{"type":"DELETE","lineNumber":158,"oldContent":"}"},{"type":"DELETE","lineNumber":159,"oldContent":"        {"},{"type":"DELETE","lineNumber":160,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":161,"oldContent":"// AIComponent.cs - AI behavior and pathfinding"},{"type":"DELETE","lineNumber":162,"oldContent":"            if (!CanMove) return;"},{"type":"DELETE","lineNumber":163,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":164,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"DELETE","lineNumber":166,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":167,"oldContent":"using DungeonExplorer.AI;"},{"type":"DELETE","lineNumber":168,"oldContent":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":169,"oldContent":"using DungeonExplorer.World;"},{"type":"DELETE","lineNumber":170,"oldContent":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":171,"oldContent":""},{"type":"DELETE","lineNumber":172,"oldContent":""},{"type":"DELETE","lineNumber":173,"oldContent":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":174,"oldContent":"            // Apply acceleration to velocity"},{"type":"DELETE","lineNumber":175,"oldContent":"{"},{"type":"DELETE","lineNumber":176,"oldContent":"    public enum AIState"},{"type":"DELETE","lineNumber":177,"oldContent":"            Velocity += Acceleration * deltaTime;"},{"type":"DELETE","lineNumber":178,"oldContent":"    {"},{"type":"DELETE","lineNumber":179,"oldContent":"        Idle,"},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"DELETE","lineNumber":181,"oldContent":"        Patrolling,"},{"type":"DELETE","lineNumber":182,"oldContent":"        Chasing,"},{"type":"DELETE","lineNumber":183,"oldContent":"            // Apply friction"},{"type":"DELETE","lineNumber":184,"oldContent":"        Attacking,"},{"type":"DELETE","lineNumber":185,"oldContent":"        Searching"},{"type":"DELETE","lineNumber":186,"oldContent":"            Velocity *= Friction;"},{"type":"DELETE","lineNumber":187,"oldContent":"    }"},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"DELETE","lineNumber":190,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":191,"oldContent":"    /// Component that handles AI behavior and decision making"},{"type":"DELETE","lineNumber":192,"oldContent":"            // Clamp to max speed"},{"type":"DELETE","lineNumber":193,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":194,"oldContent":"    public class AIComponent : IComponent"},{"type":"DELETE","lineNumber":195,"oldContent":"            if (Velocity.Length() > MaxSpeed)"},{"type":"DELETE","lineNumber":196,"oldContent":"    {"},{"type":"DELETE","lineNumber":197,"oldContent":"        public AIState CurrentState { get; set; }"},{"type":"DELETE","lineNumber":198,"oldContent":"            {"},{"type":"DELETE","lineNumber":199,"oldContent":"        public float DetectionRange { get; set; }"},{"type":"DELETE","lineNumber":200,"oldContent":"        public float AttackRange { get; set; }"},{"type":"DELETE","lineNumber":201,"oldContent":"                Velocity.Normalize();"},{"type":"DELETE","lineNumber":202,"oldContent":"        public float MoveSpeed { get; set; }"},{"type":"DELETE","lineNumber":203,"oldContent":"        public Vector2 Target { get; set; }"},{"type":"DELETE","lineNumber":204,"oldContent":"                Velocity *= MaxSpeed;"},{"type":"DELETE","lineNumber":205,"oldContent":"        public List<Vector2> CurrentPath { get; private set; }"},{"type":"DELETE","lineNumber":206,"oldContent":"        public int CurrentPathIndex { get; set; }"},{"type":"DELETE","lineNumber":207,"oldContent":"            }"},{"type":"DELETE","lineNumber":208,"oldContent":"        "},{"type":"DELETE","lineNumber":209,"oldContent":"        // Patrol behavior"},{"type":"DELETE","lineNumber":210,"oldContent":""},{"type":"DELETE","lineNumber":211,"oldContent":"        public List<Vector2> PatrolPoints { get; set; }"},{"type":"DELETE","lineNumber":212,"oldContent":"        public int PatrolIndex { get; set; }"},{"type":"DELETE","lineNumber":213,"oldContent":"            // Reset acceleration for next frame"},{"type":"DELETE","lineNumber":214,"oldContent":"        public float PatrolWaitTime { get; set; }"},{"type":"DELETE","lineNumber":215,"oldContent":"        private float _patrolTimer;"},{"type":"DELETE","lineNumber":216,"oldContent":"            Acceleration = Vector2.Zero;"},{"type":"DELETE","lineNumber":217,"oldContent":""},{"type":"DELETE","lineNumber":218,"oldContent":"        // State timers"},{"type":"DELETE","lineNumber":219,"oldContent":"        }"},{"type":"DELETE","lineNumber":220,"oldContent":"        public float StateTimer { get; set; }"},{"type":"DELETE","lineNumber":221,"oldContent":"        public float LastPlayerSeenTime { get; set; }"},{"type":"DELETE","lineNumber":222,"oldContent":""},{"type":"DELETE","lineNumber":223,"oldContent":"        public Vector2 LastPlayerPosition { get; set; }"},{"type":"DELETE","lineNumber":224,"oldContent":""},{"type":"DELETE","lineNumber":225,"oldContent":"        public void AddForce(Vector2 force)"},{"type":"DELETE","lineNumber":226,"oldContent":"        private AStar _pathfinder;"},{"type":"DELETE","lineNumber":227,"oldContent":""},{"type":"DELETE","lineNumber":228,"oldContent":"        {"},{"type":"DELETE","lineNumber":229,"oldContent":"        public AIComponent(float detectionRange = 128f, float attackRange = 40f, float moveSpeed = 50f)"},{"type":"DELETE","lineNumber":230,"oldContent":"        {"},{"type":"DELETE","lineNumber":231,"oldContent":"            Acceleration += force;"},{"type":"DELETE","lineNumber":232,"oldContent":"            CurrentState = AIState.Idle;"},{"type":"DELETE","lineNumber":233,"oldContent":"            DetectionRange = detectionRange;"},{"type":"DELETE","lineNumber":234,"oldContent":"        }"},{"type":"DELETE","lineNumber":235,"oldContent":"            AttackRange = attackRange;"},{"type":"DELETE","lineNumber":236,"oldContent":"            MoveSpeed = moveSpeed;"},{"type":"DELETE","lineNumber":237,"oldContent":""},{"type":"DELETE","lineNumber":238,"oldContent":"            CurrentPath = new List<Vector2>();"},{"type":"DELETE","lineNumber":239,"oldContent":"            PatrolPoints = new List<Vector2>();"},{"type":"DELETE","lineNumber":240,"oldContent":"        public void SetVelocity(Vector2 velocity)"},{"type":"DELETE","lineNumber":241,"oldContent":"            PatrolWaitTime = 2f;"},{"type":"DELETE","lineNumber":242,"oldContent":"            _pathfinder = new AStar();"},{"type":"DELETE","lineNumber":243,"oldContent":"        {"},{"type":"DELETE","lineNumber":244,"oldContent":"        }"},{"type":"DELETE","lineNumber":245,"oldContent":""},{"type":"DELETE","lineNumber":246,"oldContent":"            Velocity = velocity;"},{"type":"DELETE","lineNumber":247,"oldContent":"        public void Update(GameTime gameTime)"},{"type":"DELETE","lineNumber":248,"oldContent":"        {"},{"type":"DELETE","lineNumber":249,"oldContent":"        }"},{"type":"DELETE","lineNumber":250,"oldContent":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":251,"oldContent":"            StateTimer += deltaTime;"},{"type":"DELETE","lineNumber":252,"oldContent":"    }"},{"type":"DELETE","lineNumber":253,"oldContent":""},{"type":"DELETE","lineNumber":254,"oldContent":"            if (CurrentState == AIState.Patrolling)"},{"type":"DELETE","lineNumber":255,"oldContent":"}"},{"type":"DELETE","lineNumber":256,"oldContent":"            {"},{"type":"DELETE","lineNumber":257,"oldContent":"                _patrolTimer += deltaTime;"},{"type":"DELETE","lineNumber":258,"oldContent":""},{"type":"DELETE","lineNumber":259,"oldContent":"            }"},{"type":"DELETE","lineNumber":260,"oldContent":"        }"},{"type":"DELETE","lineNumber":261,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":262,"oldContent":""},{"type":"DELETE","lineNumber":263,"oldContent":"        public bool FindPath(Vector2 start, Vector2 end, Dungeon dungeon)"},{"type":"DELETE","lineNumber":264,"oldContent":"// HealthComponent.cs - Health and damage system"},{"type":"DELETE","lineNumber":265,"oldContent":"        {"},{"type":"DELETE","lineNumber":266,"oldContent":"            var path = _pathfinder.FindPath(start, end, dungeon);"},{"type":"DELETE","lineNumber":267,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":268,"oldContent":"            if (path != null && path.Count > 0)"},{"type":"DELETE","lineNumber":269,"oldContent":"            {"},{"type":"DELETE","lineNumber":270,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":271,"oldContent":"                CurrentPath = path;"},{"type":"DELETE","lineNumber":272,"oldContent":"                CurrentPathIndex = 0;"},{"type":"DELETE","lineNumber":273,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":274,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":275,"oldContent":"            }"},{"type":"DELETE","lineNumber":276,"oldContent":"using System;"},{"type":"DELETE","lineNumber":277,"oldContent":""},{"type":"DELETE","lineNumber":278,"oldContent":"            CurrentPath.Clear();"},{"type":"DELETE","lineNumber":279,"oldContent":""},{"type":"DELETE","lineNumber":280,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":281,"oldContent":"        }"},{"type":"DELETE","lineNumber":282,"oldContent":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":283,"oldContent":""},{"type":"DELETE","lineNumber":284,"oldContent":"        public Vector2? GetNextPathPoint()"},{"type":"DELETE","lineNumber":285,"oldContent":"{"},{"type":"DELETE","lineNumber":286,"oldContent":"        {"},{"type":"DELETE","lineNumber":287,"oldContent":"            if (CurrentPath.Count == 0 || CurrentPathIndex >= CurrentPath.Count)"},{"type":"DELETE","lineNumber":288,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":289,"oldContent":"                return null;"},{"type":"DELETE","lineNumber":290,"oldContent":""},{"type":"DELETE","lineNumber":291,"oldContent":"    /// Component that handles entity health and damage"},{"type":"DELETE","lineNumber":292,"oldContent":"            return CurrentPath[CurrentPathIndex];"},{"type":"DELETE","lineNumber":293,"oldContent":"        }"},{"type":"DELETE","lineNumber":294,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":295,"oldContent":""},{"type":"DELETE","lineNumber":296,"oldContent":"        public void AdvanceToNextPathPoint()"},{"type":"DELETE","lineNumber":297,"oldContent":"    public class HealthComponent : IComponent"},{"type":"DELETE","lineNumber":298,"oldContent":"        {"},{"type":"DELETE","lineNumber":299,"oldContent":"            CurrentPathIndex++;"},{"type":"DELETE","lineNumber":300,"oldContent":"    {"},{"type":"DELETE","lineNumber":301,"oldContent":"        }"},{"type":"DELETE","lineNumber":302,"oldContent":""},{"type":"DELETE","lineNumber":303,"oldContent":"        public int MaxHealth { get; private set; }"},{"type":"DELETE","lineNumber":304,"oldContent":"        public bool HasReachedEndOfPath()"},{"type":"DELETE","lineNumber":305,"oldContent":"        {"},{"type":"DELETE","lineNumber":306,"oldContent":"        public int CurrentHealth { get; set; }"},{"type":"DELETE","lineNumber":307,"oldContent":"            return CurrentPathIndex >= CurrentPath.Count;"},{"type":"DELETE","lineNumber":308,"oldContent":"        }"},{"type":"DELETE","lineNumber":309,"oldContent":"        public bool IsAlive => CurrentHealth > 0;"},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":311,"oldContent":"        public void SetState(AIState newState)"},{"type":"DELETE","lineNumber":312,"oldContent":"        public bool IsInvulnerable { get; set; }"},{"type":"DELETE","lineNumber":313,"oldContent":"        {"},{"type":"DELETE","lineNumber":314,"oldContent":"            if (CurrentState != newState)"},{"type":"DELETE","lineNumber":315,"oldContent":"        public float InvulnerabilityDuration { get; set; }"},{"type":"DELETE","lineNumber":316,"oldContent":"            {"},{"type":"DELETE","lineNumber":317,"oldContent":"                CurrentState = newState;"},{"type":"DELETE","lineNumber":318,"oldContent":"        private float _invulnerabilityTimer;"},{"type":"DELETE","lineNumber":319,"oldContent":"                StateTimer = 0f;"},{"type":"DELETE","lineNumber":320,"oldContent":"                "},{"type":"DELETE","lineNumber":321,"oldContent":""},{"type":"DELETE","lineNumber":322,"oldContent":"                // State-specific initialization"},{"type":"DELETE","lineNumber":323,"oldContent":"                switch (newState)"},{"type":"DELETE","lineNumber":324,"oldContent":"        public event Action<int> OnHealthChanged;"},{"type":"DELETE","lineNumber":325,"oldContent":"                {"},{"type":"DELETE","lineNumber":326,"oldContent":"                    case AIState.Patrolling:"},{"type":"DELETE","lineNumber":327,"oldContent":"        public event Action OnDeath;"},{"type":"DELETE","lineNumber":328,"oldContent":"                        _patrolTimer = 0f;"},{"type":"DELETE","lineNumber":329,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":330,"oldContent":""},{"type":"DELETE","lineNumber":331,"oldContent":"                }"},{"type":"DELETE","lineNumber":332,"oldContent":"            }"},{"type":"DELETE","lineNumber":333,"oldContent":"        public HealthComponent(int maxHealth)"},{"type":"DELETE","lineNumber":334,"oldContent":"        }"},{"type":"DELETE","lineNumber":335,"oldContent":""},{"type":"DELETE","lineNumber":336,"oldContent":"        {"},{"type":"DELETE","lineNumber":337,"oldContent":"        public bool CanPatrol()"},{"type":"DELETE","lineNumber":338,"oldContent":"        {"},{"type":"DELETE","lineNumber":339,"oldContent":"            MaxHealth = maxHealth;"},{"type":"DELETE","lineNumber":340,"oldContent":"            return _patrolTimer >= PatrolWaitTime;"},{"type":"DELETE","lineNumber":341,"oldContent":"        }"},{"type":"DELETE","lineNumber":342,"oldContent":"            CurrentHealth = maxHealth;"},{"type":"DELETE","lineNumber":343,"oldContent":""},{"type":"DELETE","lineNumber":344,"oldContent":"        public void ResetPatrolTimer()"},{"type":"DELETE","lineNumber":345,"oldContent":"            IsInvulnerable = false;"},{"type":"DELETE","lineNumber":346,"oldContent":"        {"},{"type":"DELETE","lineNumber":347,"oldContent":"            _patrolTimer = 0f;"},{"type":"DELETE","lineNumber":348,"oldContent":"            InvulnerabilityDuration = 1f; // 1 second of invulnerability after taking damage"},{"type":"DELETE","lineNumber":349,"oldContent":"        }"},{"type":"DELETE","lineNumber":350,"oldContent":"        }"},{"type":"DELETE","lineNumber":351,"oldContent":""},{"type":"DELETE","lineNumber":352,"oldContent":"        public void AddPatrolPoint(Vector2 point)"},{"type":"DELETE","lineNumber":353,"oldContent":"        {"},{"type":"DELETE","lineNumber":354,"oldContent":""},{"type":"DELETE","lineNumber":355,"oldContent":"            PatrolPoints.Add(point);"},{"type":"DELETE","lineNumber":356,"oldContent":"        }"},{"type":"DELETE","lineNumber":357,"oldContent":"        public void Update(GameTime gameTime)"},{"type":"DELETE","lineNumber":358,"oldContent":""},{"type":"DELETE","lineNumber":359,"oldContent":"        public Vector2? GetNextPatrolPoint()"},{"type":"DELETE","lineNumber":360,"oldContent":"        {"},{"type":"DELETE","lineNumber":361,"oldContent":"        {"},{"type":"DELETE","lineNumber":362,"oldContent":"            if (PatrolPoints.Count == 0) return null;"},{"type":"DELETE","lineNumber":363,"oldContent":"            if (IsInvulnerable)"},{"type":"DELETE","lineNumber":364,"oldContent":""},{"type":"DELETE","lineNumber":365,"oldContent":"            PatrolIndex = (PatrolIndex + 1) % PatrolPoints.Count;"},{"type":"DELETE","lineNumber":366,"oldContent":"            {"},{"type":"DELETE","lineNumber":367,"oldContent":"            return PatrolPoints[PatrolIndex];"},{"type":"DELETE","lineNumber":368,"oldContent":"        }"},{"type":"DELETE","lineNumber":369,"oldContent":"                _invulnerabilityTimer -= (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":370,"oldContent":"    }"},{"type":"DELETE","lineNumber":371,"oldContent":"}"},{"type":"DELETE","lineNumber":372,"oldContent":"                if (_invulnerabilityTimer <= 0)"},{"type":"DELETE","lineNumber":373,"oldContent":""},{"type":"DELETE","lineNumber":374,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":375,"oldContent":"                {"},{"type":"DELETE","lineNumber":376,"oldContent":"// Entity.cs - Base entity class"},{"type":"DELETE","lineNumber":377,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":378,"oldContent":"                    IsInvulnerable = false;"},{"type":"DELETE","lineNumber":379,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":380,"oldContent":"using Microsoft.Xna.Framework.Graphics;"},{"type":"DELETE","lineNumber":381,"oldContent":"                }"},{"type":"DELETE","lineNumber":382,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":383,"oldContent":"                OnDeath?.Invoke();"},{"type":"DELETE","lineNumber":384,"oldContent":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":385,"oldContent":"            }"},{"type":"DELETE","lineNumber":386,"oldContent":"using System;"},{"type":"DELETE","lineNumber":387,"oldContent":"            {"},{"type":"DELETE","lineNumber":388,"oldContent":""},{"type":"DELETE","lineNumber":389,"oldContent":"        }"},{"type":"DELETE","lineNumber":390,"oldContent":"namespace DungeonExplorer.Entities"},{"type":"DELETE","lineNumber":391,"oldContent":"{"},{"type":"DELETE","lineNumber":392,"oldContent":""},{"type":"DELETE","lineNumber":393,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":394,"oldContent":""},{"type":"DELETE","lineNumber":395,"oldContent":"    /// Base entity class using Entity-Component pattern"},{"type":"DELETE","lineNumber":396,"oldContent":"    /// All game objects inherit from this class"},{"type":"DELETE","lineNumber":397,"oldContent":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"DELETE","lineNumber":398,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":399,"oldContent":"        {"},{"type":"DELETE","lineNumber":400,"oldContent":"    public abstract class Entity"},{"type":"DELETE","lineNumber":401,"oldContent":"    {"},{"type":"DELETE","lineNumber":402,"oldContent":"        protected Dictionary<Type, IComponent> _components;"},{"type":"DELETE","lineNumber":403,"oldContent":""},{"type":"DELETE","lineNumber":404,"oldContent":"        public bool IsActive { get; set; }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/TransformComponent.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/TransformComponent.cs","baseContent":"namespace DungeonExplorer.Components;\n\npublic class TransformComponent\n{\n    \n}","baseTimestamp":1756228176304,"deltas":[{"timestamp":1756228186897,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":1,"content":"// TransformComponent.cs - Position, rotation, scale"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class TransformComponent"},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Component that handles position, rotation and scale of an entity"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public class TransformComponent : IComponent"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        public Vector2 Position { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        public float Rotation { get; set; }"},{"type":"INSERT","lineNumber":15,"content":"        public Vector2 Scale { get; set; }"},{"type":"INSERT","lineNumber":16,"content":"        public Vector2 Origin { get; set; }"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"        public TransformComponent(Vector2 position)"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            Position = position;"},{"type":"INSERT","lineNumber":21,"content":"            Rotation = 0f;"},{"type":"INSERT","lineNumber":22,"content":"            Scale = Vector2.One;"},{"type":"INSERT","lineNumber":23,"content":"            Origin = Vector2.Zero;"},{"type":"INSERT","lineNumber":24,"content":"        }"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":27,"content":"        {"},{"type":"INSERT","lineNumber":28,"content":"            // Transform component doesn't need active updates"},{"type":"INSERT","lineNumber":29,"content":"        }"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":"        public Rectangle GetBounds(int width, int height)"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"            return new Rectangle("},{"type":"INSERT","lineNumber":34,"content":"                (int)(Position.X - Origin.X * Scale.X),"},{"type":"INSERT","lineNumber":35,"content":"                (int)(Position.Y - Origin.Y * Scale.Y),"},{"type":"INSERT","lineNumber":36,"content":"                (int)(width * Scale.X),"},{"type":"INSERT","lineNumber":37,"content":"                (int)(height * Scale.Y)"},{"type":"INSERT","lineNumber":38,"content":"            );"},{"type":"INSERT","lineNumber":39,"content":"        }"},{"type":"INSERT","lineNumber":40,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/RenderComponents.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/RenderComponents.cs","baseContent":"// ============================================\n// RenderComponent.cs - Handles visual representation\n// ============================================\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing DungeonExplorer.Components;\n\nnamespace DungeonExplorer.Components\n{\n    /// <summary>\n    /// Component that handles the visual representation of an entity\n    /// </summary>\n    public class RenderComponent : IComponent\n    {\n        public Texture2D Texture { get; set; }\n        public Color Tint { get; set; }\n        public bool Visible { get; set; }\n        public Rectangle? SourceRectangle { get; set; }\n        public SpriteEffects SpriteEffects { get; set; }\n        public float LayerDepth { get; set; }\n\n        public RenderComponent(Texture2D texture)\n        {\n            Texture = texture;\n            Tint = Color.White;\n            Visible = true;\n            SourceRectangle = null;\n            SpriteEffects = SpriteEffects.None;\n            LayerDepth = 0f;\n        }\n\n        public void Update(GameTime gameTime)\n        {\n            // Basic render component doesn't need updates\n            // Could be extended for animations, effects, etc.\n        }\n    }\n}","baseTimestamp":1756228205088},"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/MovementComponent.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/MovementComponent.cs","baseContent":"namespace DungeonExplorer.Components;\n\npublic class MovementComponent\n{\n    \n}","baseTimestamp":1756228256557,"deltas":[{"timestamp":1756228260577,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":1,"content":"// MovementComponent.cs - Handles movement and physics"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class MovementComponent"},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Component that handles entity movement and basic physics"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public class MovementComponent : IComponent"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        public Vector2 Velocity { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        public Vector2 Acceleration { get; set; }"},{"type":"INSERT","lineNumber":15,"content":"        public float MaxSpeed { get; set; }"},{"type":"INSERT","lineNumber":16,"content":"        public float Friction { get; set; }"},{"type":"INSERT","lineNumber":17,"content":"        public bool CanMove { get; set; }"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"        public MovementComponent(float maxSpeed = 100f, float friction = 0.8f)"},{"type":"INSERT","lineNumber":20,"content":"        {"},{"type":"INSERT","lineNumber":21,"content":"            Velocity = Vector2.Zero;"},{"type":"INSERT","lineNumber":22,"content":"            Acceleration = Vector2.Zero;"},{"type":"INSERT","lineNumber":23,"content":"            MaxSpeed = maxSpeed;"},{"type":"INSERT","lineNumber":24,"content":"            Friction = friction;"},{"type":"INSERT","lineNumber":25,"content":"            CanMove = true;"},{"type":"INSERT","lineNumber":26,"content":"        }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":29,"content":"        {"},{"type":"INSERT","lineNumber":30,"content":"            if (!CanMove) return;"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"            // Apply acceleration to velocity"},{"type":"INSERT","lineNumber":35,"content":"            Velocity += Acceleration * deltaTime;"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"            // Apply friction"},{"type":"INSERT","lineNumber":38,"content":"            Velocity *= Friction;"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"INSERT","lineNumber":40,"content":"            // Clamp to max speed"},{"type":"INSERT","lineNumber":41,"content":"            if (Velocity.Length() > MaxSpeed)"},{"type":"INSERT","lineNumber":42,"content":"            {"},{"type":"INSERT","lineNumber":43,"content":"                Velocity.Normalize();"},{"type":"INSERT","lineNumber":44,"content":"                Velocity *= MaxSpeed;"},{"type":"INSERT","lineNumber":45,"content":"            }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"            // Reset acceleration for next frame"},{"type":"INSERT","lineNumber":48,"content":"            Acceleration = Vector2.Zero;"},{"type":"INSERT","lineNumber":49,"content":"        }"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":51,"content":"        public void AddForce(Vector2 force)"},{"type":"INSERT","lineNumber":52,"content":"        {"},{"type":"INSERT","lineNumber":53,"content":"            Acceleration += force;"},{"type":"INSERT","lineNumber":54,"content":"        }"},{"type":"INSERT","lineNumber":55,"content":""},{"type":"INSERT","lineNumber":56,"content":"        public void SetVelocity(Vector2 velocity)"},{"type":"INSERT","lineNumber":57,"content":"        {"},{"type":"INSERT","lineNumber":58,"content":"            Velocity = velocity;"},{"type":"INSERT","lineNumber":59,"content":"        }"},{"type":"INSERT","lineNumber":60,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/HealthComponent.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/HealthComponent.cs","baseContent":"namespace DungeonExplorer.Components;\n\npublic class HealthComponent\n{\n    \n}","baseTimestamp":1756228269948,"deltas":[{"timestamp":1756228274266,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":1,"content":"// HealthComponent.cs - Health and damage system"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":5,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class HealthComponent"},{"type":"INSERT","lineNumber":7,"content":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":9,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":10,"content":"    /// Component that handles entity health and damage"},{"type":"INSERT","lineNumber":11,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":12,"content":"    public class HealthComponent : IComponent"},{"type":"INSERT","lineNumber":13,"content":"    {"},{"type":"INSERT","lineNumber":14,"content":"        public int MaxHealth { get; private set; }"},{"type":"INSERT","lineNumber":15,"content":"        public int CurrentHealth { get; set; }"},{"type":"INSERT","lineNumber":16,"content":"        public bool IsAlive => CurrentHealth > 0;"},{"type":"INSERT","lineNumber":17,"content":"        public bool IsInvulnerable { get; set; }"},{"type":"INSERT","lineNumber":18,"content":"        public float InvulnerabilityDuration { get; set; }"},{"type":"INSERT","lineNumber":19,"content":"        private float _invulnerabilityTimer;"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"        public event Action<int> OnHealthChanged;"},{"type":"INSERT","lineNumber":22,"content":"        public event Action OnDeath;"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"        public HealthComponent(int maxHealth)"},{"type":"INSERT","lineNumber":25,"content":"        {"},{"type":"INSERT","lineNumber":26,"content":"            MaxHealth = maxHealth;"},{"type":"INSERT","lineNumber":27,"content":"            CurrentHealth = maxHealth;"},{"type":"INSERT","lineNumber":28,"content":"            IsInvulnerable = false;"},{"type":"INSERT","lineNumber":29,"content":"            InvulnerabilityDuration = 1f; // 1 second of invulnerability after taking damage"},{"type":"INSERT","lineNumber":30,"content":"        }"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":33,"content":"        {"},{"type":"INSERT","lineNumber":34,"content":"            if (IsInvulnerable)"},{"type":"INSERT","lineNumber":35,"content":"            {"},{"type":"INSERT","lineNumber":36,"content":"                _invulnerabilityTimer -= (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":37,"content":"                if (_invulnerabilityTimer <= 0)"},{"type":"INSERT","lineNumber":38,"content":"                {"},{"type":"INSERT","lineNumber":39,"content":"                    IsInvulnerable = false;"},{"type":"INSERT","lineNumber":40,"content":"                }"},{"type":"INSERT","lineNumber":41,"content":"            }"},{"type":"INSERT","lineNumber":42,"content":"        }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"        public bool TakeDamage(int damage)"},{"type":"INSERT","lineNumber":45,"content":"        {"},{"type":"INSERT","lineNumber":46,"content":"            if (IsInvulnerable || !IsAlive || damage <= 0)"},{"type":"INSERT","lineNumber":47,"content":"                return false;"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"            CurrentHealth = Math.Max(0, CurrentHealth - damage);"},{"type":"INSERT","lineNumber":50,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"            if (CurrentHealth <= 0)"},{"type":"INSERT","lineNumber":53,"content":"            {"},{"type":"INSERT","lineNumber":54,"content":"                OnDeath?.Invoke();"},{"type":"INSERT","lineNumber":55,"content":"                return true; // Entity died"},{"type":"INSERT","lineNumber":56,"content":"            }"},{"type":"INSERT","lineNumber":57,"content":"            else"},{"type":"INSERT","lineNumber":58,"content":"            {"},{"type":"INSERT","lineNumber":59,"content":"                // Start invulnerability period"},{"type":"INSERT","lineNumber":60,"content":"                IsInvulnerable = true;"},{"type":"INSERT","lineNumber":61,"content":"                _invulnerabilityTimer = InvulnerabilityDuration;"},{"type":"INSERT","lineNumber":62,"content":"            }"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"            return false; // Entity survived"},{"type":"INSERT","lineNumber":65,"content":"        }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"        public void Heal(int amount)"},{"type":"INSERT","lineNumber":68,"content":"        {"},{"type":"INSERT","lineNumber":69,"content":"            if (amount <= 0) return;"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"            CurrentHealth = Math.Min(MaxHealth, CurrentHealth + amount);"},{"type":"INSERT","lineNumber":72,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":73,"content":"        }"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"        public void SetMaxHealth(int newMaxHealth)"},{"type":"INSERT","lineNumber":76,"content":"        {"},{"type":"INSERT","lineNumber":77,"content":"            MaxHealth = newMaxHealth;"},{"type":"INSERT","lineNumber":78,"content":"            if (CurrentHealth > MaxHealth)"},{"type":"INSERT","lineNumber":79,"content":"                CurrentHealth = MaxHealth;"},{"type":"INSERT","lineNumber":80,"content":"            OnHealthChanged?.Invoke(CurrentHealth);"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/AIComponent.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Components/AIComponent.cs","baseContent":"namespace DungeonExplorer.Components;\n\npublic class AIComponent\n{\n    \n}","baseTimestamp":1756228286362,"deltas":[{"timestamp":1756228292915,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":1,"content":"// AIComponent.cs - AI behavior and pathfinding"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":5,"content":"using DungeonExplorer.AI;"},{"type":"INSERT","lineNumber":6,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":7,"content":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class AIComponent"},{"type":"INSERT","lineNumber":9,"content":"namespace DungeonExplorer.Components"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":11,"content":"    public enum AIState"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        Idle,"},{"type":"INSERT","lineNumber":14,"content":"        Patrolling,"},{"type":"INSERT","lineNumber":15,"content":"        Chasing,"},{"type":"INSERT","lineNumber":16,"content":"        Attacking,"},{"type":"INSERT","lineNumber":17,"content":"        Searching"},{"type":"INSERT","lineNumber":18,"content":"    }"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":21,"content":"    /// Component that handles AI behavior and decision making"},{"type":"INSERT","lineNumber":22,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":23,"content":"    public class AIComponent : IComponent"},{"type":"INSERT","lineNumber":24,"content":"    {"},{"type":"INSERT","lineNumber":25,"content":"        public AIState CurrentState { get; set; }"},{"type":"INSERT","lineNumber":26,"content":"        public float DetectionRange { get; set; }"},{"type":"INSERT","lineNumber":27,"content":"        public float AttackRange { get; set; }"},{"type":"INSERT","lineNumber":28,"content":"        public float MoveSpeed { get; set; }"},{"type":"INSERT","lineNumber":29,"content":"        public Vector2 Target { get; set; }"},{"type":"INSERT","lineNumber":30,"content":"        public List<Vector2> CurrentPath { get; private set; }"},{"type":"INSERT","lineNumber":31,"content":"        public int CurrentPathIndex { get; set; }"},{"type":"INSERT","lineNumber":32,"content":"        "},{"type":"INSERT","lineNumber":33,"content":"        // Patrol behavior"},{"type":"INSERT","lineNumber":34,"content":"        public List<Vector2> PatrolPoints { get; set; }"},{"type":"INSERT","lineNumber":35,"content":"        public int PatrolIndex { get; set; }"},{"type":"INSERT","lineNumber":36,"content":"        public float PatrolWaitTime { get; set; }"},{"type":"INSERT","lineNumber":37,"content":"        private float _patrolTimer;"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"        // State timers"},{"type":"INSERT","lineNumber":40,"content":"        public float StateTimer { get; set; }"},{"type":"INSERT","lineNumber":41,"content":"        public float LastPlayerSeenTime { get; set; }"},{"type":"INSERT","lineNumber":42,"content":"        public Vector2 LastPlayerPosition { get; set; }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"        private AStar _pathfinder;"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"        public AIComponent(float detectionRange = 128f, float attackRange = 40f, float moveSpeed = 50f)"},{"type":"INSERT","lineNumber":47,"content":"        {"},{"type":"INSERT","lineNumber":48,"content":"            CurrentState = AIState.Idle;"},{"type":"INSERT","lineNumber":49,"content":"            DetectionRange = detectionRange;"},{"type":"INSERT","lineNumber":50,"content":"            AttackRange = attackRange;"},{"type":"INSERT","lineNumber":51,"content":"            MoveSpeed = moveSpeed;"},{"type":"INSERT","lineNumber":52,"content":"            CurrentPath = new List<Vector2>();"},{"type":"INSERT","lineNumber":53,"content":"            PatrolPoints = new List<Vector2>();"},{"type":"INSERT","lineNumber":54,"content":"            PatrolWaitTime = 2f;"},{"type":"INSERT","lineNumber":55,"content":"            _pathfinder = new AStar();"},{"type":"INSERT","lineNumber":56,"content":"        }"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"        public void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":59,"content":"        {"},{"type":"INSERT","lineNumber":60,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":61,"content":"            StateTimer += deltaTime;"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"            if (CurrentState == AIState.Patrolling)"},{"type":"INSERT","lineNumber":64,"content":"            {"},{"type":"INSERT","lineNumber":65,"content":"                _patrolTimer += deltaTime;"},{"type":"INSERT","lineNumber":66,"content":"            }"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"        public bool FindPath(Vector2 start, Vector2 end, Dungeon dungeon)"},{"type":"INSERT","lineNumber":70,"content":"        {"},{"type":"INSERT","lineNumber":71,"content":"            var path = _pathfinder.FindPath(start, end, dungeon);"},{"type":"INSERT","lineNumber":72,"content":"            if (path != null && path.Count > 0)"},{"type":"INSERT","lineNumber":73,"content":"            {"},{"type":"INSERT","lineNumber":74,"content":"                CurrentPath = path;"},{"type":"INSERT","lineNumber":75,"content":"                CurrentPathIndex = 0;"},{"type":"INSERT","lineNumber":76,"content":"                return true;"},{"type":"INSERT","lineNumber":77,"content":"            }"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"            CurrentPath.Clear();"},{"type":"INSERT","lineNumber":80,"content":"            return false;"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"        public Vector2? GetNextPathPoint()"},{"type":"INSERT","lineNumber":84,"content":"        {"},{"type":"INSERT","lineNumber":85,"content":"            if (CurrentPath.Count == 0 || CurrentPathIndex >= CurrentPath.Count)"},{"type":"INSERT","lineNumber":86,"content":"                return null;"},{"type":"INSERT","lineNumber":87,"content":""},{"type":"INSERT","lineNumber":88,"content":"            return CurrentPath[CurrentPathIndex];"},{"type":"INSERT","lineNumber":89,"content":"        }"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"INSERT","lineNumber":91,"content":"        public void AdvanceToNextPathPoint()"},{"type":"INSERT","lineNumber":92,"content":"        {"},{"type":"INSERT","lineNumber":93,"content":"            CurrentPathIndex++;"},{"type":"INSERT","lineNumber":94,"content":"        }"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"        public bool HasReachedEndOfPath()"},{"type":"INSERT","lineNumber":97,"content":"        {"},{"type":"INSERT","lineNumber":98,"content":"            return CurrentPathIndex >= CurrentPath.Count;"},{"type":"INSERT","lineNumber":99,"content":"        }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"        public void SetState(AIState newState)"},{"type":"INSERT","lineNumber":102,"content":"        {"},{"type":"INSERT","lineNumber":103,"content":"            if (CurrentState != newState)"},{"type":"INSERT","lineNumber":104,"content":"            {"},{"type":"INSERT","lineNumber":105,"content":"                CurrentState = newState;"},{"type":"INSERT","lineNumber":106,"content":"                StateTimer = 0f;"},{"type":"INSERT","lineNumber":107,"content":"                "},{"type":"INSERT","lineNumber":108,"content":"                // State-specific initialization"},{"type":"INSERT","lineNumber":109,"content":"                switch (newState)"},{"type":"INSERT","lineNumber":110,"content":"                {"},{"type":"INSERT","lineNumber":111,"content":"                    case AIState.Patrolling:"},{"type":"INSERT","lineNumber":112,"content":"                        _patrolTimer = 0f;"},{"type":"INSERT","lineNumber":113,"content":"                        break;"},{"type":"INSERT","lineNumber":114,"content":"                }"},{"type":"INSERT","lineNumber":115,"content":"            }"},{"type":"INSERT","lineNumber":116,"content":"        }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"        public bool CanPatrol()"},{"type":"INSERT","lineNumber":119,"content":"        {"},{"type":"INSERT","lineNumber":120,"content":"            return _patrolTimer >= PatrolWaitTime;"},{"type":"INSERT","lineNumber":121,"content":"        }"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"        public void ResetPatrolTimer()"},{"type":"INSERT","lineNumber":124,"content":"        {"},{"type":"INSERT","lineNumber":125,"content":"            _patrolTimer = 0f;"},{"type":"INSERT","lineNumber":126,"content":"        }"},{"type":"INSERT","lineNumber":127,"content":""},{"type":"INSERT","lineNumber":128,"content":"        public void AddPatrolPoint(Vector2 point)"},{"type":"INSERT","lineNumber":129,"content":"        {"},{"type":"INSERT","lineNumber":130,"content":"            PatrolPoints.Add(point);"},{"type":"INSERT","lineNumber":131,"content":"        }"},{"type":"INSERT","lineNumber":132,"content":""},{"type":"INSERT","lineNumber":133,"content":"        public Vector2? GetNextPatrolPoint()"},{"type":"INSERT","lineNumber":134,"content":"        {"},{"type":"INSERT","lineNumber":135,"content":"            if (PatrolPoints.Count == 0) return null;"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"            PatrolIndex = (PatrolIndex + 1) % PatrolPoints.Count;"},{"type":"INSERT","lineNumber":138,"content":"            return PatrolPoints[PatrolIndex];"},{"type":"INSERT","lineNumber":139,"content":"        }"},{"type":"INSERT","lineNumber":140,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Entity.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Entity.cs","baseContent":"namespace DungeonExplorer.Entities;\n\npublic class Entity\n{\n    \n}","baseTimestamp":1756228316392,"deltas":[{"timestamp":1756228344685,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":1,"content":"// Entity.cs - Base entity class"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":5,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":6,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":7,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Entity"},{"type":"INSERT","lineNumber":9,"content":"namespace DungeonExplorer.Entities"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":11,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":12,"content":"    /// Base entity class using Entity-Component pattern"},{"type":"INSERT","lineNumber":13,"content":"    /// All game objects inherit from this class"},{"type":"INSERT","lineNumber":14,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":15,"content":"    public abstract class Entity"},{"type":"INSERT","lineNumber":16,"content":"    {"},{"type":"INSERT","lineNumber":17,"content":"        protected Dictionary<Type, IComponent> _components;"},{"type":"INSERT","lineNumber":18,"content":"        public bool IsActive { get; set; }"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"        // Quick access to commonly used components"},{"type":"INSERT","lineNumber":21,"content":"        public TransformComponent Transform => GetComponent<TransformComponent>();"},{"type":"INSERT","lineNumber":22,"content":"        public RenderComponent Render => GetComponent<RenderComponent>();"},{"type":"INSERT","lineNumber":23,"content":"        public MovementComponent Movement => GetComponent<MovementComponent>();"},{"type":"INSERT","lineNumber":24,"content":"        public HealthComponent Health => GetComponent<HealthComponent>();"},{"type":"INSERT","lineNumber":25,"content":"        public AIComponent AI => GetComponent<AIComponent>();"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"        protected Entity()"},{"type":"INSERT","lineNumber":28,"content":"        {"},{"type":"INSERT","lineNumber":29,"content":"            _components = new Dictionary<Type, IComponent>();"},{"type":"INSERT","lineNumber":30,"content":"            IsActive = true;"},{"type":"INSERT","lineNumber":31,"content":"        }"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"        public virtual void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":34,"content":"        {"},{"type":"INSERT","lineNumber":35,"content":"            if (!IsActive) return;"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"            foreach (var component in _components.Values)"},{"type":"INSERT","lineNumber":38,"content":"            {"},{"type":"INSERT","lineNumber":39,"content":"                component.Update(gameTime);"},{"type":"INSERT","lineNumber":40,"content":"            }"},{"type":"INSERT","lineNumber":41,"content":"        }"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"        public void AddComponent<T>(T component) where T : IComponent"},{"type":"INSERT","lineNumber":44,"content":"        {"},{"type":"INSERT","lineNumber":45,"content":"            _components[typeof(T)] = component;"},{"type":"INSERT","lineNumber":46,"content":"        }"},{"type":"INSERT","lineNumber":47,"content":""},{"type":"INSERT","lineNumber":48,"content":"        public T GetComponent<T>() where T : IComponent"},{"type":"INSERT","lineNumber":49,"content":"        {"},{"type":"INSERT","lineNumber":50,"content":"            _components.TryGetValue(typeof(T), out IComponent component);"},{"type":"INSERT","lineNumber":51,"content":"            return (T)component;"},{"type":"INSERT","lineNumber":52,"content":"        }"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"INSERT","lineNumber":54,"content":"        public bool HasComponent<T>() where T : IComponent"},{"type":"INSERT","lineNumber":55,"content":"        {"},{"type":"INSERT","lineNumber":56,"content":"            return _components.ContainsKey(typeof(T));"},{"type":"INSERT","lineNumber":57,"content":"        }"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"        public void RemoveComponent<T>() where T : IComponent"},{"type":"INSERT","lineNumber":60,"content":"        {"},{"type":"INSERT","lineNumber":61,"content":"            _components.Remove(typeof(T));"},{"type":"INSERT","lineNumber":62,"content":"        }"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"        public Rectangle GetBounds()"},{"type":"INSERT","lineNumber":65,"content":"        {"},{"type":"INSERT","lineNumber":66,"content":"            if (Transform == null || Render == null) return Rectangle.Empty;"},{"type":"INSERT","lineNumber":67,"content":"            "},{"type":"INSERT","lineNumber":68,"content":"            return Transform.GetBounds("},{"type":"INSERT","lineNumber":69,"content":"                Render.Texture?.Width ?? 32, "},{"type":"INSERT","lineNumber":70,"content":"                Render.Texture?.Height ?? 32"},{"type":"INSERT","lineNumber":71,"content":"            );"},{"type":"INSERT","lineNumber":72,"content":"        }"},{"type":"INSERT","lineNumber":73,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Player.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Player.cs","baseContent":"namespace DungeonExplorer.Entities;\n\npublic class Player\n{\n    \n}","baseTimestamp":1756228356802,"deltas":[{"timestamp":1756228363275,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":1,"content":"// Player.cs - Player entity with input handling"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":5,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":6,"content":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Player"},{"type":"INSERT","lineNumber":8,"content":"namespace DungeonExplorer.Entities"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":10,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":11,"content":"    /// Player entity - represents the player character"},{"type":"INSERT","lineNumber":12,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":13,"content":"    public class Player : Entity"},{"type":"INSERT","lineNumber":14,"content":"    {"},{"type":"INSERT","lineNumber":15,"content":"        public int Score { get; set; }"},{"type":"INSERT","lineNumber":16,"content":"        public int TreasuresFound { get; set; }"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"        public Player(Vector2 position, Texture2D texture)"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            // Add required components"},{"type":"INSERT","lineNumber":21,"content":"            AddComponent(new TransformComponent(position));"},{"type":"INSERT","lineNumber":22,"content":"            AddComponent(new RenderComponent(texture));"},{"type":"INSERT","lineNumber":23,"content":"            AddComponent(new MovementComponent(120f, 0.85f)); // Slightly faster than enemies"},{"type":"INSERT","lineNumber":24,"content":"            AddComponent(new HealthComponent(100));"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"            Score = 0;"},{"type":"INSERT","lineNumber":27,"content":"            TreasuresFound = 0;"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"            // Set up render component"},{"type":"INSERT","lineNumber":30,"content":"            var render = GetComponent<RenderComponent>();"},{"type":"INSERT","lineNumber":31,"content":"            render.LayerDepth = 0.5f; // Player renders on top of floors, below UI"},{"type":"INSERT","lineNumber":32,"content":"        }"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"        public override void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":35,"content":"        {"},{"type":"INSERT","lineNumber":36,"content":"            base.Update(gameTime);"},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":"            // Apply movement to transform"},{"type":"INSERT","lineNumber":39,"content":"            if (Movement != null && Transform != null)"},{"type":"INSERT","lineNumber":40,"content":"            {"},{"type":"INSERT","lineNumber":41,"content":"                float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":42,"content":"                Transform.Position += Movement.Velocity * deltaTime;"},{"type":"INSERT","lineNumber":43,"content":"            }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":45,"content":"            // Handle visual feedback for low health"},{"type":"INSERT","lineNumber":46,"content":"            if (Health != null && Render != null)"},{"type":"INSERT","lineNumber":47,"content":"            {"},{"type":"INSERT","lineNumber":48,"content":"                if (Health.IsInvulnerable)"},{"type":"INSERT","lineNumber":49,"content":"                {"},{"type":"INSERT","lineNumber":50,"content":"                    // Flash red when taking damage"},{"type":"INSERT","lineNumber":51,"content":"                    float flash = MathF.Sin((float)gameTime.TotalGameTime.TotalSeconds * 10f);"},{"type":"INSERT","lineNumber":52,"content":"                    Render.Tint = Color.Lerp(Color.White, Color.Red, (flash + 1f) * 0.3f);"},{"type":"INSERT","lineNumber":53,"content":"                }"},{"type":"INSERT","lineNumber":54,"content":"                else if (Health.CurrentHealth < Health.MaxHealth * 0.3f)"},{"type":"INSERT","lineNumber":55,"content":"                {"},{"type":"INSERT","lineNumber":56,"content":"                    // Slight red tint when health is low"},{"type":"INSERT","lineNumber":57,"content":"                    Render.Tint = Color.Lerp(Color.White, Color.Red, 0.2f);"},{"type":"INSERT","lineNumber":58,"content":"                }"},{"type":"INSERT","lineNumber":59,"content":"                else"},{"type":"INSERT","lineNumber":60,"content":"                {"},{"type":"INSERT","lineNumber":61,"content":"                    Render.Tint = Color.White;"},{"type":"INSERT","lineNumber":62,"content":"                }"},{"type":"INSERT","lineNumber":63,"content":"            }"},{"type":"INSERT","lineNumber":64,"content":"        }"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"        public void CollectTreasure(int value = 100)"},{"type":"INSERT","lineNumber":67,"content":"        {"},{"type":"INSERT","lineNumber":68,"content":"            Score += value;"},{"type":"INSERT","lineNumber":69,"content":"            TreasuresFound++;"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"        public Vector2 GetGridPosition()"},{"type":"INSERT","lineNumber":73,"content":"        {"},{"type":"INSERT","lineNumber":74,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":75,"content":"                MathF.Floor(Transform.Position.X / 32f),"},{"type":"INSERT","lineNumber":76,"content":"                MathF.Floor(Transform.Position.Y / 32f)"},{"type":"INSERT","lineNumber":77,"content":"            );"},{"type":"INSERT","lineNumber":78,"content":"        }"},{"type":"INSERT","lineNumber":79,"content":"    }"}]},{"timestamp":1756228398509,"changes":[{"type":"MODIFY","lineNumber":3,"content":"","oldContent":""},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":10,"oldContent":"    }"},{"type":"DELETE","lineNumber":11,"oldContent":"        }"},{"type":"INSERT","lineNumber":9,"content":""},{"type":"DELETE","lineNumber":13,"oldContent":"            );"},{"type":"DELETE","lineNumber":14,"oldContent":"                MathF.Floor(Transform.Position.Y / 32f)"},{"type":"INSERT","lineNumber":11,"content":"{"},{"type":"DELETE","lineNumber":16,"oldContent":"                MathF.Floor(Transform.Position.X / 32f),"},{"type":"DELETE","lineNumber":18,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":20,"oldContent":"        {"},{"type":"DELETE","lineNumber":22,"oldContent":"        public Vector2 GetGridPosition()"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"        }"},{"type":"DELETE","lineNumber":28,"oldContent":"            TreasuresFound++;"},{"type":"DELETE","lineNumber":30,"oldContent":"            Score += value;"},{"type":"DELETE","lineNumber":33,"oldContent":"        {"},{"type":"DELETE","lineNumber":34,"oldContent":"        public void CollectTreasure(int value = 100)"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":40,"oldContent":"            }"},{"type":"DELETE","lineNumber":42,"oldContent":"                }"},{"type":"DELETE","lineNumber":44,"oldContent":"                    Render.Tint = Color.White;"},{"type":"DELETE","lineNumber":46,"oldContent":"                {"},{"type":"DELETE","lineNumber":48,"oldContent":"                else"},{"type":"DELETE","lineNumber":50,"oldContent":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"                    Render.Tint = Color.Lerp(Color.White, Color.Red, 0.2f);"},{"type":"DELETE","lineNumber":54,"oldContent":"                    // Slight red tint when health is low"},{"type":"DELETE","lineNumber":56,"oldContent":"                {"},{"type":"DELETE","lineNumber":58,"oldContent":"                else if (Health.CurrentHealth < Health.MaxHealth * 0.3f)"},{"type":"DELETE","lineNumber":60,"oldContent":"                }"},{"type":"DELETE","lineNumber":62,"oldContent":"                    Render.Tint = Color.Lerp(Color.White, Color.Red, (flash + 1f) * 0.3f);"},{"type":"DELETE","lineNumber":64,"oldContent":"                    float flash = MathF.Sin((float)gameTime.TotalGameTime.TotalSeconds * 10f);"},{"type":"DELETE","lineNumber":66,"oldContent":"                    // Flash red when taking damage"},{"type":"DELETE","lineNumber":68,"oldContent":"                {"},{"type":"DELETE","lineNumber":70,"oldContent":"                if (Health.IsInvulnerable)"},{"type":"DELETE","lineNumber":72,"oldContent":"            {"},{"type":"DELETE","lineNumber":74,"oldContent":"            if (Health != null && Render != null)"},{"type":"DELETE","lineNumber":76,"oldContent":"            // Handle visual feedback for low health"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"            // Handle visual feedback for low health"},{"type":"INSERT","lineNumber":48,"content":"            if (Health != null && Render != null)"},{"type":"INSERT","lineNumber":49,"content":"            {"},{"type":"INSERT","lineNumber":50,"content":"                if (Health.IsInvulnerable)"},{"type":"INSERT","lineNumber":51,"content":"                {"},{"type":"INSERT","lineNumber":52,"content":"                    // Flash red when taking damage"},{"type":"INSERT","lineNumber":53,"content":"                    float flash = MathF.Sin((float)gameTime.TotalGameTime.TotalSeconds * 10f);"},{"type":"INSERT","lineNumber":54,"content":"                    Render.Tint = Color.Lerp(Color.White, Color.Red, (flash + 1f) * 0.3f);"},{"type":"INSERT","lineNumber":55,"content":"                }"},{"type":"INSERT","lineNumber":56,"content":"                else if (Health.CurrentHealth < Health.MaxHealth * 0.3f)"},{"type":"INSERT","lineNumber":57,"content":"                {"},{"type":"INSERT","lineNumber":58,"content":"                    // Slight red tint when health is low"},{"type":"INSERT","lineNumber":59,"content":"                    Render.Tint = Color.Lerp(Color.White, Color.Red, 0.2f);"},{"type":"INSERT","lineNumber":60,"content":"                }"},{"type":"INSERT","lineNumber":61,"content":"                else"},{"type":"INSERT","lineNumber":62,"content":"                {"},{"type":"INSERT","lineNumber":63,"content":"                    Render.Tint = Color.White;"},{"type":"INSERT","lineNumber":64,"content":"                }"},{"type":"INSERT","lineNumber":65,"content":"            }"},{"type":"INSERT","lineNumber":66,"content":"        }"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"        public void CollectTreasure(int value = 100)"},{"type":"INSERT","lineNumber":69,"content":"        {"},{"type":"INSERT","lineNumber":70,"content":"            Score += value;"},{"type":"INSERT","lineNumber":71,"content":"            TreasuresFound++;"},{"type":"INSERT","lineNumber":72,"content":"        }"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":74,"content":"        public Vector2 GetGridPosition()"},{"type":"INSERT","lineNumber":75,"content":"        {"},{"type":"INSERT","lineNumber":76,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":77,"content":"                MathF.Floor(Transform.Position.X / 32f),"},{"type":"INSERT","lineNumber":78,"content":"                MathF.Floor(Transform.Position.Y / 32f)"},{"type":"INSERT","lineNumber":79,"content":"            );"},{"type":"INSERT","lineNumber":80,"content":"        }"},{"type":"INSERT","lineNumber":81,"content":"    }"},{"type":"INSERT","lineNumber":82,"content":"}"}]},{"timestamp":1756228405632,"changes":[{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":""},{"type":"DELETE","lineNumber":10,"oldContent":"{"},{"type":"INSERT","lineNumber":9,"content":""},{"type":"INSERT","lineNumber":11,"content":"{"},{"type":"INSERT","lineNumber":28,"content":"            Score = 0;"},{"type":"INSERT","lineNumber":29,"content":"            TreasuresFound = 0;"},{"type":"INSERT","lineNumber":31,"content":"            // Set up render component"},{"type":"INSERT","lineNumber":32,"content":"            var render = GetComponent<RenderComponent>();"},{"type":"INSERT","lineNumber":33,"content":"            render.LayerDepth = 0.5f; // Player renders on top of floors, below UI"},{"type":"INSERT","lineNumber":34,"content":"        }"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"        public override void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":37,"content":"        {"},{"type":"INSERT","lineNumber":38,"content":"            base.Update(gameTime);"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"INSERT","lineNumber":40,"content":"            // Apply movement to transform"},{"type":"INSERT","lineNumber":41,"content":"            if (Movement != null && Transform != null)"},{"type":"INSERT","lineNumber":42,"content":"            {"},{"type":"INSERT","lineNumber":43,"content":"                float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":44,"content":"                Transform.Position += Movement.Velocity * deltaTime;"},{"type":"INSERT","lineNumber":45,"content":"            }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"DELETE","lineNumber":30,"oldContent":"            Score = 0;"},{"type":"DELETE","lineNumber":33,"oldContent":"            TreasuresFound = 0;"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"            // Set up render component"},{"type":"DELETE","lineNumber":42,"oldContent":"            var render = GetComponent<RenderComponent>();"},{"type":"DELETE","lineNumber":45,"oldContent":"            render.LayerDepth = 0.5f; // Player renders on top of floors, below UI"},{"type":"DELETE","lineNumber":48,"oldContent":"        }"},{"type":"DELETE","lineNumber":51,"oldContent":""},{"type":"DELETE","lineNumber":54,"oldContent":"        public override void Update(GameTime gameTime)"},{"type":"DELETE","lineNumber":57,"oldContent":"        {"},{"type":"DELETE","lineNumber":60,"oldContent":"            base.Update(gameTime);"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":"            // Apply movement to transform"},{"type":"DELETE","lineNumber":69,"oldContent":"            if (Movement != null && Transform != null)"},{"type":"DELETE","lineNumber":72,"oldContent":"            {"},{"type":"DELETE","lineNumber":75,"oldContent":"                float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":78,"oldContent":"                Transform.Position += Movement.Velocity * deltaTime;"},{"type":"DELETE","lineNumber":80,"oldContent":"            }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Enemy.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Enemy.cs","baseContent":"namespace DungeonExplorer.Entities;\n\npublic class Enemy\n{\n    \n}","baseTimestamp":1756228372827,"deltas":[{"timestamp":1756228379846,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":1,"content":"// Enemy.cs - Enemy entity with AI behavior"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":5,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":6,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":7,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Enemy"},{"type":"INSERT","lineNumber":9,"content":"namespace DungeonExplorer.Entities"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":11,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":12,"content":"    /// Enemy entity with AI behavior and pathfinding"},{"type":"INSERT","lineNumber":13,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":14,"content":"    public class Enemy : Entity"},{"type":"INSERT","lineNumber":15,"content":"    {"},{"type":"INSERT","lineNumber":16,"content":"        public int Damage { get; set; }"},{"type":"INSERT","lineNumber":17,"content":"        public float AttackCooldown { get; set; }"},{"type":"INSERT","lineNumber":18,"content":"        private float _attackTimer;"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"        public Enemy(Vector2 position, Texture2D texture)"},{"type":"INSERT","lineNumber":21,"content":"        {"},{"type":"INSERT","lineNumber":22,"content":"            // Add required components"},{"type":"INSERT","lineNumber":23,"content":"            AddComponent(new TransformComponent(position));"},{"type":"INSERT","lineNumber":24,"content":"            AddComponent(new RenderComponent(texture));"},{"type":"INSERT","lineNumber":25,"content":"            AddComponent(new MovementComponent(80f, 0.9f)); // Slightly slower than player"},{"type":"INSERT","lineNumber":26,"content":"            AddComponent(new HealthComponent(50));"},{"type":"INSERT","lineNumber":27,"content":"            AddComponent(new AIComponent(100f, 35f, 60f)); // Detection range, attack range, move speed"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"            Damage = 20;"},{"type":"INSERT","lineNumber":30,"content":"            AttackCooldown = 1.5f; // Attack every 1.5 seconds"},{"type":"INSERT","lineNumber":31,"content":"            _attackTimer = 0f;"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"            // Set up render component"},{"type":"INSERT","lineNumber":34,"content":"            var render = GetComponent<RenderComponent>();"},{"type":"INSERT","lineNumber":35,"content":"            render.LayerDepth = 0.4f;"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"            // Set up some patrol points around starting position"},{"type":"INSERT","lineNumber":38,"content":"            SetupPatrolBehavior(position);"},{"type":"INSERT","lineNumber":39,"content":"        }"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"        private void SetupPatrolBehavior(Vector2 startPos)"},{"type":"INSERT","lineNumber":42,"content":"        {"},{"type":"INSERT","lineNumber":43,"content":"            var ai = GetComponent<AIComponent>();"},{"type":"INSERT","lineNumber":44,"content":"            if (ai != null)"},{"type":"INSERT","lineNumber":45,"content":"            {"},{"type":"INSERT","lineNumber":46,"content":"                // Add some patrol points in a small area around spawn"},{"type":"INSERT","lineNumber":47,"content":"                ai.AddPatrolPoint(startPos + new Vector2(-64, 0));"},{"type":"INSERT","lineNumber":48,"content":"                ai.AddPatrolPoint(startPos + new Vector2(64, 0));"},{"type":"INSERT","lineNumber":49,"content":"                ai.AddPatrolPoint(startPos + new Vector2(0, -64));"},{"type":"INSERT","lineNumber":50,"content":"                ai.AddPatrolPoint(startPos + new Vector2(0, 64));"},{"type":"INSERT","lineNumber":51,"content":"                ai.SetState(AIState.Patrolling);"},{"type":"INSERT","lineNumber":52,"content":"            }"},{"type":"INSERT","lineNumber":53,"content":"        }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"        public override void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":56,"content":"        {"},{"type":"INSERT","lineNumber":57,"content":"            base.Update(gameTime);"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"            _attackTimer -= (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"            // Apply movement to transform"},{"type":"INSERT","lineNumber":62,"content":"            if (Movement != null && Transform != null)"},{"type":"INSERT","lineNumber":63,"content":"            {"},{"type":"INSERT","lineNumber":64,"content":"                float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":65,"content":"                Transform.Position += Movement.Velocity * deltaTime;"},{"type":"INSERT","lineNumber":66,"content":"            }"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"            // Visual feedback based on AI state"},{"type":"INSERT","lineNumber":69,"content":"            UpdateVisualFeedback();"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"        private void UpdateVisualFeedback()"},{"type":"INSERT","lineNumber":73,"content":"        {"},{"type":"INSERT","lineNumber":74,"content":"            if (AI == null || Render == null) return;"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"INSERT","lineNumber":76,"content":"            switch (AI.CurrentState)"},{"type":"INSERT","lineNumber":77,"content":"            {"},{"type":"INSERT","lineNumber":78,"content":"                case AIState.Idle:"},{"type":"INSERT","lineNumber":79,"content":"                case AIState.Patrolling:"},{"type":"INSERT","lineNumber":80,"content":"                    Render.Tint = Color.White;"},{"type":"INSERT","lineNumber":81,"content":"                    break;"},{"type":"INSERT","lineNumber":82,"content":"                case AIState.Chasing:"},{"type":"INSERT","lineNumber":83,"content":"                    Render.Tint = Color.Orange;"},{"type":"INSERT","lineNumber":84,"content":"                    break;"},{"type":"INSERT","lineNumber":85,"content":"                case AIState.Attacking:"},{"type":"INSERT","lineNumber":86,"content":"                    Render.Tint = Color.Red;"},{"type":"INSERT","lineNumber":87,"content":"                    break;"},{"type":"INSERT","lineNumber":88,"content":"                case AIState.Searching:"},{"type":"INSERT","lineNumber":89,"content":"                    Render.Tint = Color.Yellow;"},{"type":"INSERT","lineNumber":90,"content":"                    break;"},{"type":"INSERT","lineNumber":91,"content":"            }"},{"type":"INSERT","lineNumber":92,"content":"        }"},{"type":"INSERT","lineNumber":93,"content":""},{"type":"INSERT","lineNumber":94,"content":"        public bool CanAttack()"},{"type":"INSERT","lineNumber":95,"content":"        {"},{"type":"INSERT","lineNumber":96,"content":"            return _attackTimer <= 0f;"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"        public void Attack()"},{"type":"INSERT","lineNumber":100,"content":"        {"},{"type":"INSERT","lineNumber":101,"content":"            _attackTimer = AttackCooldown;"},{"type":"INSERT","lineNumber":102,"content":"            // Attack logic would be handled by combat system"},{"type":"INSERT","lineNumber":103,"content":"        }"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"        public Vector2 GetGridPosition()"},{"type":"INSERT","lineNumber":106,"content":"        {"},{"type":"INSERT","lineNumber":107,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":108,"content":"                MathF.Floor(Transform.Position.X / 32f),"},{"type":"INSERT","lineNumber":109,"content":"                MathF.Floor(Transform.Position.Y / 32f)"},{"type":"INSERT","lineNumber":110,"content":"            );"},{"type":"INSERT","lineNumber":111,"content":"        }"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"        public float GetDistanceToPlayer(Player player)"},{"type":"INSERT","lineNumber":114,"content":"        {"},{"type":"INSERT","lineNumber":115,"content":"            return Vector2.Distance(Transform.Position, player.Transform.Position);"},{"type":"INSERT","lineNumber":116,"content":"        }"},{"type":"INSERT","lineNumber":117,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Treasure.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Entities/Treasure.cs","baseContent":"namespace DungeonExplorer.Entities;\n\npublic class Treasure\n{\n    \n}","baseTimestamp":1756228425789,"deltas":[{"timestamp":1756228432273,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using Microsoft.Xna.Framework;","oldContent":"namespace DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":1,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":2,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":3,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Treasure"},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.Entities"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Treasure entity that can be collected by the player"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public class Treasure : Entity"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        public int Value { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        public bool IsCollected { get; private set; }"},{"type":"INSERT","lineNumber":15,"content":"        private float _bobTimer;"},{"type":"INSERT","lineNumber":16,"content":"        private Vector2 _originalPosition;"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"        public Treasure(Vector2 position, Texture2D texture)"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            // Add required components"},{"type":"INSERT","lineNumber":21,"content":"            AddComponent(new TransformComponent(position));"},{"type":"INSERT","lineNumber":22,"content":"            AddComponent(new RenderComponent(texture));"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"            Value = 100;"},{"type":"INSERT","lineNumber":25,"content":"            IsCollected = false;"},{"type":"INSERT","lineNumber":26,"content":"            _bobTimer = 0f;"},{"type":"INSERT","lineNumber":27,"content":"            _originalPosition = position;"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"            // Set up render component"},{"type":"INSERT","lineNumber":30,"content":"            var render = GetComponent<RenderComponent>();"},{"type":"INSERT","lineNumber":31,"content":"            render.LayerDepth = 0.3f;"},{"type":"INSERT","lineNumber":32,"content":"        }"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"        public override void Update(GameTime gameTime)"},{"type":"INSERT","lineNumber":35,"content":"        {"},{"type":"INSERT","lineNumber":36,"content":"            if (IsCollected) return;"},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":"            base.Update(gameTime);"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"INSERT","lineNumber":40,"content":"            // Bobbing animation effect"},{"type":"INSERT","lineNumber":41,"content":"            _bobTimer += (float)gameTime.ElapsedGameTime.TotalSeconds * 3f;"},{"type":"INSERT","lineNumber":42,"content":"            float bobOffset = MathF.Sin(_bobTimer) * 2f;"},{"type":"INSERT","lineNumber":43,"content":"            "},{"type":"INSERT","lineNumber":44,"content":"            if (Transform != null)"},{"type":"INSERT","lineNumber":45,"content":"            {"},{"type":"INSERT","lineNumber":46,"content":"                Transform.Position = _originalPosition + new Vector2(0, bobOffset);"},{"type":"INSERT","lineNumber":47,"content":"            }"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"            // Gentle glow effect by varying transparency"},{"type":"INSERT","lineNumber":50,"content":"            if (Render != null)"},{"type":"INSERT","lineNumber":51,"content":"            {"},{"type":"INSERT","lineNumber":52,"content":"                float alpha = 0.8f + MathF.Sin(_bobTimer * 2f) * 0.2f;"},{"type":"INSERT","lineNumber":53,"content":"                Render.Tint = Color.White * alpha;"},{"type":"INSERT","lineNumber":54,"content":"            }"},{"type":"INSERT","lineNumber":55,"content":"        }"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"        public void Collect()"},{"type":"INSERT","lineNumber":58,"content":"        {"},{"type":"INSERT","lineNumber":59,"content":"            if (IsCollected) return;"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"            IsCollected = true;"},{"type":"INSERT","lineNumber":62,"content":"            IsActive = false;"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"            // Could add collection effect here (particles, sound, etc.)"},{"type":"INSERT","lineNumber":65,"content":"        }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"        public Vector2 GetGridPosition()"},{"type":"INSERT","lineNumber":68,"content":"        {"},{"type":"INSERT","lineNumber":69,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":70,"content":"                MathF.Floor(Transform.Position.X / 32f),"},{"type":"INSERT","lineNumber":71,"content":"                MathF.Floor(Transform.Position.Y / 32f)"},{"type":"INSERT","lineNumber":72,"content":"            );"},{"type":"INSERT","lineNumber":73,"content":"        }"},{"type":"INSERT","lineNumber":74,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/AI/Node.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/AI/Node.cs","baseContent":"namespace DungeonExplorer.AI;\n\npublic class Node\n{\n    \n}","baseTimestamp":1756228452038,"deltas":[{"timestamp":1756228456947,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.AI;"},{"type":"INSERT","lineNumber":1,"content":"// Node.cs - Nodo per l'algoritmo A*"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Node"},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.AI"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Rappresenta un nodo nella griglia per l'algoritmo A*"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public class Node : IComparable<Node>"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        public Vector2 Position { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        public float GCost { get; set; }  // Distanza dal nodo di partenza"},{"type":"INSERT","lineNumber":15,"content":"        public float HCost { get; set; }  // Distanza euristica dal target"},{"type":"INSERT","lineNumber":16,"content":"        public float FCost => GCost + HCost; // Costo totale"},{"type":"INSERT","lineNumber":17,"content":"        public Node Parent { get; set; }"},{"type":"INSERT","lineNumber":18,"content":"        public bool IsWalkable { get; set; }"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"        public Node(Vector2 position, bool isWalkable = true)"},{"type":"INSERT","lineNumber":21,"content":"        {"},{"type":"INSERT","lineNumber":22,"content":"            Position = position;"},{"type":"INSERT","lineNumber":23,"content":"            IsWalkable = isWalkable;"},{"type":"INSERT","lineNumber":24,"content":"            GCost = float.MaxValue;"},{"type":"INSERT","lineNumber":25,"content":"            HCost = 0f;"},{"type":"INSERT","lineNumber":26,"content":"            Parent = null;"},{"type":"INSERT","lineNumber":27,"content":"        }"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"        public int CompareTo(Node other)"},{"type":"INSERT","lineNumber":30,"content":"        {"},{"type":"INSERT","lineNumber":31,"content":"            int result = FCost.CompareTo(other.FCost);"},{"type":"INSERT","lineNumber":32,"content":"            if (result == 0)"},{"type":"INSERT","lineNumber":33,"content":"                result = HCost.CompareTo(other.HCost);"},{"type":"INSERT","lineNumber":34,"content":"            return result;"},{"type":"INSERT","lineNumber":35,"content":"        }"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"        public override bool Equals(object obj)"},{"type":"INSERT","lineNumber":38,"content":"        {"},{"type":"INSERT","lineNumber":39,"content":"            if (obj is Node other)"},{"type":"INSERT","lineNumber":40,"content":"                return Position == other.Position;"},{"type":"INSERT","lineNumber":41,"content":"            return false;"},{"type":"INSERT","lineNumber":42,"content":"        }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"        public override int GetHashCode()"},{"type":"INSERT","lineNumber":45,"content":"        {"},{"type":"INSERT","lineNumber":46,"content":"            return Position.GetHashCode();"},{"type":"INSERT","lineNumber":47,"content":"        }"},{"type":"INSERT","lineNumber":48,"content":"    }"}]},{"timestamp":1756230052106,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"// Node.cs - Nodo per l'algoritmo A*"},{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":1,"content":"// Node.cs - Pathfinding node for A* algorithm"},{"type":"DELETE","lineNumber":4,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":7,"oldContent":"}"},{"type":"INSERT","lineNumber":4,"content":""},{"type":"DELETE","lineNumber":9,"oldContent":"    }"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"INSERT","lineNumber":6,"content":"{"},{"type":"DELETE","lineNumber":12,"oldContent":"            return Position.GetHashCode();"},{"type":"DELETE","lineNumber":13,"oldContent":"    /// Rappresenta un nodo nella griglia per l'algoritmo A*"},{"type":"DELETE","lineNumber":14,"oldContent":"        {"},{"type":"INSERT","lineNumber":8,"content":"    /// Represents a node in the pathfinding grid"},{"type":"DELETE","lineNumber":16,"oldContent":"        public override int GetHashCode()"},{"type":"DELETE","lineNumber":17,"oldContent":"    public class Node : IComparable<Node>"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"INSERT","lineNumber":10,"content":"    public class Node : IEquatable<Node>"},{"type":"INSERT","lineNumber":12,"content":"        public int X { get; set; }"},{"type":"INSERT","lineNumber":13,"content":"        public int Y { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        public float GCost { get; set; } // Distance from start"},{"type":"INSERT","lineNumber":15,"content":"        public float HCost { get; set; } // Distance to end (heuristic)"},{"type":"INSERT","lineNumber":16,"content":"        public float FCost => GCost + HCost; // Total cost"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"        public Node(int x, int y)"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            X = x;"},{"type":"INSERT","lineNumber":21,"content":"            Y = y;"},{"type":"INSERT","lineNumber":22,"content":"            GCost = float.MaxValue;"},{"type":"INSERT","lineNumber":23,"content":"            HCost = 0;"},{"type":"DELETE","lineNumber":21,"oldContent":"        public Vector2 Position { get; set; }"},{"type":"DELETE","lineNumber":22,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":23,"oldContent":"        public float GCost { get; set; }  // Distanza dal nodo di partenza"},{"type":"DELETE","lineNumber":24,"oldContent":"                return Position == other.Position;"},{"type":"DELETE","lineNumber":25,"oldContent":"        public float HCost { get; set; }  // Distanza euristica dal target"},{"type":"DELETE","lineNumber":26,"oldContent":"            if (obj is Node other)"},{"type":"DELETE","lineNumber":27,"oldContent":"        public float FCost => GCost + HCost; // Costo totale"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"        public bool Equals(Node other)"},{"type":"DELETE","lineNumber":29,"oldContent":"        public Node Parent { get; set; }"},{"type":"DELETE","lineNumber":30,"oldContent":"        public override bool Equals(object obj)"},{"type":"DELETE","lineNumber":31,"oldContent":"        public bool IsWalkable { get; set; }"},{"type":"INSERT","lineNumber":28,"content":"            if (other == null) return false;"},{"type":"INSERT","lineNumber":29,"content":"            return X == other.X && Y == other.Y;"},{"type":"INSERT","lineNumber":30,"content":"        }"},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"INSERT","lineNumber":32,"content":"        public override bool Equals(object obj)"},{"type":"INSERT","lineNumber":33,"content":"        {"},{"type":"INSERT","lineNumber":34,"content":"            return Equals(obj as Node);"},{"type":"DELETE","lineNumber":35,"oldContent":"        public Node(Vector2 position, bool isWalkable = true)"},{"type":"MODIFY","lineNumber":36,"content":"","oldContent":"            return result;"},{"type":"INSERT","lineNumber":37,"content":"        public override int GetHashCode()"},{"type":"DELETE","lineNumber":38,"oldContent":"                result = HCost.CompareTo(other.HCost);"},{"type":"DELETE","lineNumber":39,"oldContent":"            Position = position;"},{"type":"DELETE","lineNumber":40,"oldContent":"            if (result == 0)"},{"type":"DELETE","lineNumber":41,"oldContent":"            IsWalkable = isWalkable;"},{"type":"DELETE","lineNumber":42,"oldContent":"            int result = FCost.CompareTo(other.FCost);"},{"type":"DELETE","lineNumber":43,"oldContent":"            GCost = float.MaxValue;"},{"type":"DELETE","lineNumber":44,"oldContent":"        {"},{"type":"DELETE","lineNumber":45,"oldContent":"            HCost = 0f;"},{"type":"DELETE","lineNumber":46,"oldContent":"        public int CompareTo(Node other)"},{"type":"DELETE","lineNumber":47,"oldContent":"            Parent = null;"},{"type":"INSERT","lineNumber":39,"content":"            return HashCode.Combine(X, Y);"},{"type":"INSERT","lineNumber":40,"content":"        }"},{"type":"INSERT","lineNumber":42,"content":"        public override string ToString()"},{"type":"INSERT","lineNumber":43,"content":"        {"},{"type":"INSERT","lineNumber":44,"content":"            return $\"Node({X}, {Y}) - F:{FCost:F1} G:{GCost:F1} H:{HCost:F1}\";"},{"type":"INSERT","lineNumber":46,"content":"    }"},{"type":"INSERT","lineNumber":47,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/AI/AStar.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/AI/AStar.cs","baseContent":"namespace DungeonExplorer.AI;\n\npublic class AStar\n{\n    \n}","baseTimestamp":1756228467584,"deltas":[{"timestamp":1756228478664,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.AI;"},{"type":"INSERT","lineNumber":1,"content":"// AStar.cs - Implementazione algoritmo A*"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":5,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":6,"content":"using System.Linq;"},{"type":"INSERT","lineNumber":7,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class AStar"},{"type":"INSERT","lineNumber":9,"content":"namespace DungeonExplorer.AI"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":11,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":12,"content":"    /// Implementazione completa dell'algoritmo A* per pathfinding"},{"type":"INSERT","lineNumber":13,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":14,"content":"    public class AStar"},{"type":"INSERT","lineNumber":15,"content":"    {"},{"type":"INSERT","lineNumber":16,"content":"        private const int TILE_SIZE = 32;"},{"type":"INSERT","lineNumber":17,"content":"        "},{"type":"INSERT","lineNumber":18,"content":"        // Direzioni di movimento (4-directional)"},{"type":"INSERT","lineNumber":19,"content":"        private readonly Vector2[] _directions = new Vector2[]"},{"type":"INSERT","lineNumber":20,"content":"        {"},{"type":"INSERT","lineNumber":21,"content":"            new Vector2(0, -1), // Su"},{"type":"INSERT","lineNumber":22,"content":"            new Vector2(1, 0),  // Destra"},{"type":"INSERT","lineNumber":23,"content":"            new Vector2(0, 1),  // Giù"},{"type":"INSERT","lineNumber":24,"content":"            new Vector2(-1, 0)  // Sinistra"},{"type":"INSERT","lineNumber":25,"content":"        };"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"        // Opzionale: movimento diagonale (8-directional)"},{"type":"INSERT","lineNumber":28,"content":"        private readonly Vector2[] _diagonalDirections = new Vector2[]"},{"type":"INSERT","lineNumber":29,"content":"        {"},{"type":"INSERT","lineNumber":30,"content":"            new Vector2(-1, -1), new Vector2(0, -1), new Vector2(1, -1),"},{"type":"INSERT","lineNumber":31,"content":"            new Vector2(-1, 0),                       new Vector2(1, 0),"},{"type":"INSERT","lineNumber":32,"content":"            new Vector2(-1, 1),  new Vector2(0, 1),  new Vector2(1, 1)"},{"type":"INSERT","lineNumber":33,"content":"        };"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"        private Dictionary<Vector2, Node> _nodes;"},{"type":"INSERT","lineNumber":36,"content":"        private bool _allowDiagonal;"},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":"        public AStar(bool allowDiagonal = false)"},{"type":"INSERT","lineNumber":39,"content":"        {"},{"type":"INSERT","lineNumber":40,"content":"            _allowDiagonal = allowDiagonal;"},{"type":"INSERT","lineNumber":41,"content":"            _nodes = new Dictionary<Vector2, Node>();"},{"type":"INSERT","lineNumber":42,"content":"        }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":45,"content":"        /// Trova il percorso ottimale tra due punti nel mondo"},{"type":"INSERT","lineNumber":46,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":47,"content":"        /// <param name=\"start\">Posizione di partenza in pixel</param>"},{"type":"INSERT","lineNumber":48,"content":"        /// <param name=\"goal\">Posizione obiettivo in pixel</param>"},{"type":"INSERT","lineNumber":49,"content":"        /// <param name=\"dungeon\">Il dungeon per controllare le collisioni</param>"},{"type":"INSERT","lineNumber":50,"content":"        /// <returns>Lista di posizioni Vector2 che rappresentano il percorso</returns>"},{"type":"INSERT","lineNumber":51,"content":"        public List<Vector2> FindPath(Vector2 start, Vector2 goal, Dungeon dungeon)"},{"type":"INSERT","lineNumber":52,"content":"        {"},{"type":"INSERT","lineNumber":53,"content":"            // Converte le posizioni da pixel a coordinate griglia"},{"type":"INSERT","lineNumber":54,"content":"            Vector2 startGrid = WorldToGrid(start);"},{"type":"INSERT","lineNumber":55,"content":"            Vector2 goalGrid = WorldToGrid(goal);"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"            // Verifica che start e goal siano validi"},{"type":"INSERT","lineNumber":58,"content":"            if (!IsValidPosition(startGrid, dungeon) || !IsValidPosition(goalGrid, dungeon))"},{"type":"INSERT","lineNumber":59,"content":"                return null;"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"            // Inizializza le strutture dati"},{"type":"INSERT","lineNumber":62,"content":"            _nodes.Clear();"},{"type":"INSERT","lineNumber":63,"content":"            var openSet = new SortedSet<Node>();"},{"type":"INSERT","lineNumber":64,"content":"            var closedSet = new HashSet<Vector2>();"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"            // Crea il nodo di partenza"},{"type":"INSERT","lineNumber":67,"content":"            Node startNode = GetOrCreateNode(startGrid, dungeon);"},{"type":"INSERT","lineNumber":68,"content":"            startNode.GCost = 0f;"},{"type":"INSERT","lineNumber":69,"content":"            startNode.HCost = CalculateHeuristic(startGrid, goalGrid);"},{"type":"INSERT","lineNumber":70,"content":"            "},{"type":"INSERT","lineNumber":71,"content":"            openSet.Add(startNode);"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"            while (openSet.Count > 0)"},{"type":"INSERT","lineNumber":74,"content":"            {"},{"type":"INSERT","lineNumber":75,"content":"                // Prende il nodo con FCost più basso"},{"type":"INSERT","lineNumber":76,"content":"                Node currentNode = openSet.First();"},{"type":"INSERT","lineNumber":77,"content":"                openSet.Remove(currentNode);"},{"type":"INSERT","lineNumber":78,"content":"                closedSet.Add(currentNode.Position);"},{"type":"INSERT","lineNumber":79,"content":""},{"type":"INSERT","lineNumber":80,"content":"                // Verifica se abbiamo raggiunto l'obiettivo"},{"type":"INSERT","lineNumber":81,"content":"                if (currentNode.Position == goalGrid)"},{"type":"INSERT","lineNumber":82,"content":"                {"},{"type":"INSERT","lineNumber":83,"content":"                    return ReconstructPath(currentNode);"},{"type":"INSERT","lineNumber":84,"content":"                }"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"INSERT","lineNumber":86,"content":"                // Esplora i nodi vicini"},{"type":"INSERT","lineNumber":87,"content":"                var directions = _allowDiagonal ? _diagonalDirections : _directions;"},{"type":"INSERT","lineNumber":88,"content":"                "},{"type":"INSERT","lineNumber":89,"content":"                foreach (Vector2 direction in directions)"},{"type":"INSERT","lineNumber":90,"content":"                {"},{"type":"INSERT","lineNumber":91,"content":"                    Vector2 neighborPos = currentNode.Position + direction;"},{"type":"INSERT","lineNumber":92,"content":"                    "},{"type":"INSERT","lineNumber":93,"content":"                    // Salta se già visitato"},{"type":"INSERT","lineNumber":94,"content":"                    if (closedSet.Contains(neighborPos))"},{"type":"INSERT","lineNumber":95,"content":"                        continue;"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":97,"content":"                    // Salta se non è una posizione valida"},{"type":"INSERT","lineNumber":98,"content":"                    if (!IsValidPosition(neighborPos, dungeon))"},{"type":"INSERT","lineNumber":99,"content":"                        continue;"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"                    Node neighbor = GetOrCreateNode(neighborPos, dungeon);"},{"type":"INSERT","lineNumber":102,"content":"                    "},{"type":"INSERT","lineNumber":103,"content":"                    // Calcola il nuovo G cost"},{"type":"INSERT","lineNumber":104,"content":"                    float movementCost = _allowDiagonal && IsDiagonal(direction) ? 1.414f : 1f; // √2 per diagonali"},{"type":"INSERT","lineNumber":105,"content":"                    float tentativeGCost = currentNode.GCost + movementCost;"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"                    // Se questo percorso verso il neighbor è migliore"},{"type":"INSERT","lineNumber":108,"content":"                    if (tentativeGCost < neighbor.GCost)"},{"type":"INSERT","lineNumber":109,"content":"                    {"},{"type":"INSERT","lineNumber":110,"content":"                        // Rimuove dalla open set se già presente (per aggiornare la posizione)"},{"type":"INSERT","lineNumber":111,"content":"                        openSet.Remove(neighbor);"},{"type":"INSERT","lineNumber":112,"content":"                        "},{"type":"INSERT","lineNumber":113,"content":"                        neighbor.Parent = currentNode;"},{"type":"INSERT","lineNumber":114,"content":"                        neighbor.GCost = tentativeGCost;"},{"type":"INSERT","lineNumber":115,"content":"                        neighbor.HCost = CalculateHeuristic(neighborPos, goalGrid);"},{"type":"INSERT","lineNumber":116,"content":"                        "},{"type":"INSERT","lineNumber":117,"content":"                        openSet.Add(neighbor);"},{"type":"INSERT","lineNumber":118,"content":"                    }"},{"type":"INSERT","lineNumber":119,"content":"                }"},{"type":"INSERT","lineNumber":120,"content":"            }"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"            // Nessun percorso trovato"},{"type":"INSERT","lineNumber":123,"content":"            return null;"},{"type":"INSERT","lineNumber":124,"content":"        }"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":126,"content":"        private Node GetOrCreateNode(Vector2 position, Dungeon dungeon)"},{"type":"INSERT","lineNumber":127,"content":"        {"},{"type":"INSERT","lineNumber":128,"content":"            if (!_nodes.TryGetValue(position, out Node node))"},{"type":"INSERT","lineNumber":129,"content":"            {"},{"type":"INSERT","lineNumber":130,"content":"                bool isWalkable = IsWalkable(position, dungeon);"},{"type":"INSERT","lineNumber":131,"content":"                node = new Node(position, isWalkable);"},{"type":"INSERT","lineNumber":132,"content":"                _nodes[position] = node;"},{"type":"INSERT","lineNumber":133,"content":"            }"},{"type":"INSERT","lineNumber":134,"content":"            return node;"},{"type":"INSERT","lineNumber":135,"content":"        }"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"        private bool IsValidPosition(Vector2 gridPos, Dungeon dungeon)"},{"type":"INSERT","lineNumber":138,"content":"        {"},{"type":"INSERT","lineNumber":139,"content":"            // Verifica i bounds"},{"type":"INSERT","lineNumber":140,"content":"            if (gridPos.X < 0 || gridPos.Y < 0 || "},{"type":"INSERT","lineNumber":141,"content":"                gridPos.X >= dungeon.Width || gridPos.Y >= dungeon.Height)"},{"type":"INSERT","lineNumber":142,"content":"                return false;"},{"type":"INSERT","lineNumber":143,"content":""},{"type":"INSERT","lineNumber":144,"content":"            return IsWalkable(gridPos, dungeon);"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"        private bool IsWalkable(Vector2 gridPos, Dungeon dungeon)"},{"type":"INSERT","lineNumber":148,"content":"        {"},{"type":"INSERT","lineNumber":149,"content":"            var tile = dungeon.GetTile((int)gridPos.X, (int)gridPos.Y);"},{"type":"INSERT","lineNumber":150,"content":"            return tile != null && tile.IsWalkable;"},{"type":"INSERT","lineNumber":151,"content":"        }"},{"type":"INSERT","lineNumber":152,"content":""},{"type":"INSERT","lineNumber":153,"content":"        private float CalculateHeuristic(Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":154,"content":"        {"},{"type":"INSERT","lineNumber":155,"content":"            // Distanza Manhattan (più veloce per griglia 4-directional)"},{"type":"INSERT","lineNumber":156,"content":"            if (!_allowDiagonal)"},{"type":"INSERT","lineNumber":157,"content":"                return Math.Abs(from.X - to.X) + Math.Abs(from.Y - to.Y);"},{"type":"INSERT","lineNumber":158,"content":"            "},{"type":"INSERT","lineNumber":159,"content":"            // Distanza Euclidea (migliore per movimento diagonale)"},{"type":"INSERT","lineNumber":160,"content":"            return Vector2.Distance(from, to);"},{"type":"INSERT","lineNumber":161,"content":"        }"},{"type":"INSERT","lineNumber":162,"content":""},{"type":"INSERT","lineNumber":163,"content":"        private bool IsDiagonal(Vector2 direction)"},{"type":"INSERT","lineNumber":164,"content":"        {"},{"type":"INSERT","lineNumber":165,"content":"            return direction.X != 0 && direction.Y != 0;"},{"type":"INSERT","lineNumber":166,"content":"        }"},{"type":"INSERT","lineNumber":167,"content":""},{"type":"INSERT","lineNumber":168,"content":"        private List<Vector2> ReconstructPath(Node goalNode)"},{"type":"INSERT","lineNumber":169,"content":"        {"},{"type":"INSERT","lineNumber":170,"content":"            var path = new List<Vector2>();"},{"type":"INSERT","lineNumber":171,"content":"            Node current = goalNode;"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"            // Ricostruisce il percorso andando all'indietro dai parent"},{"type":"INSERT","lineNumber":174,"content":"            while (current != null)"},{"type":"INSERT","lineNumber":175,"content":"            {"},{"type":"INSERT","lineNumber":176,"content":"                // Converte da coordinate griglia a coordinate mondo (centro tile)"},{"type":"INSERT","lineNumber":177,"content":"                Vector2 worldPos = GridToWorld(current.Position);"},{"type":"INSERT","lineNumber":178,"content":"                path.Add(worldPos);"},{"type":"INSERT","lineNumber":179,"content":"                current = current.Parent;"},{"type":"INSERT","lineNumber":180,"content":"            }"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"            // Inverti il percorso per averlo da start a goal"},{"type":"INSERT","lineNumber":183,"content":"            path.Reverse();"},{"type":"INSERT","lineNumber":184,"content":""},{"type":"INSERT","lineNumber":185,"content":"            // Opzionale: ottimizza il percorso rimuovendo nodi ridondanti"},{"type":"INSERT","lineNumber":186,"content":"            return OptimizePath(path);"},{"type":"INSERT","lineNumber":187,"content":"        }"},{"type":"INSERT","lineNumber":188,"content":""},{"type":"INSERT","lineNumber":189,"content":"        private List<Vector2> OptimizePath(List<Vector2> path)"},{"type":"INSERT","lineNumber":190,"content":"        {"},{"type":"INSERT","lineNumber":191,"content":"            if (path.Count <= 2) return path;"},{"type":"INSERT","lineNumber":192,"content":""},{"type":"INSERT","lineNumber":193,"content":"            var optimizedPath = new List<Vector2> { path[0] };"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"INSERT","lineNumber":195,"content":"            for (int i = 1; i < path.Count - 1; i++)"},{"type":"INSERT","lineNumber":196,"content":"            {"},{"type":"INSERT","lineNumber":197,"content":"                Vector2 prev = path[i - 1];"},{"type":"INSERT","lineNumber":198,"content":"                Vector2 current = path[i];"},{"type":"INSERT","lineNumber":199,"content":"                Vector2 next = path[i + 1];"},{"type":"INSERT","lineNumber":200,"content":""},{"type":"INSERT","lineNumber":201,"content":"                // Se la direzione cambia, mantieni il punto"},{"type":"INSERT","lineNumber":202,"content":"                Vector2 dir1 = Vector2.Normalize(current - prev);"},{"type":"INSERT","lineNumber":203,"content":"                Vector2 dir2 = Vector2.Normalize(next - current);"},{"type":"INSERT","lineNumber":204,"content":""},{"type":"INSERT","lineNumber":205,"content":"                float dot = Vector2.Dot(dir1, dir2);"},{"type":"INSERT","lineNumber":206,"content":"                if (dot < 0.99f) // Non perfettamente allineati"},{"type":"INSERT","lineNumber":207,"content":"                {"},{"type":"INSERT","lineNumber":208,"content":"                    optimizedPath.Add(current);"},{"type":"INSERT","lineNumber":209,"content":"                }"},{"type":"INSERT","lineNumber":210,"content":"            }"},{"type":"INSERT","lineNumber":211,"content":""},{"type":"INSERT","lineNumber":212,"content":"            optimizedPath.Add(path[path.Count - 1]);"},{"type":"INSERT","lineNumber":213,"content":"            return optimizedPath;"},{"type":"INSERT","lineNumber":214,"content":"        }"},{"type":"INSERT","lineNumber":215,"content":""},{"type":"INSERT","lineNumber":216,"content":"        private Vector2 WorldToGrid(Vector2 worldPos)"},{"type":"INSERT","lineNumber":217,"content":"        {"},{"type":"INSERT","lineNumber":218,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":219,"content":"                (float)Math.Floor(worldPos.X / TILE_SIZE),"},{"type":"INSERT","lineNumber":220,"content":"                (float)Math.Floor(worldPos.Y / TILE_SIZE)"},{"type":"INSERT","lineNumber":221,"content":"            );"},{"type":"INSERT","lineNumber":222,"content":"        }"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"        private Vector2 GridToWorld(Vector2 gridPos)"},{"type":"INSERT","lineNumber":225,"content":"        {"},{"type":"INSERT","lineNumber":226,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":227,"content":"                gridPos.X * TILE_SIZE + TILE_SIZE / 2f,"},{"type":"INSERT","lineNumber":228,"content":"                gridPos.Y * TILE_SIZE + TILE_SIZE / 2f"},{"type":"INSERT","lineNumber":229,"content":"            );"},{"type":"INSERT","lineNumber":230,"content":"        }"},{"type":"INSERT","lineNumber":231,"content":"    }"}]},{"timestamp":1756230167716,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"// AStar.cs - Implementazione algoritmo A*"},{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":1,"content":"// AStar.cs - A* Pathfinding implementation"},{"type":"MODIFY","lineNumber":5,"content":"using System;","oldContent":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":10,"oldContent":"    }"},{"type":"DELETE","lineNumber":11,"oldContent":"using System;"},{"type":"DELETE","lineNumber":12,"oldContent":"        }"},{"type":"DELETE","lineNumber":13,"oldContent":"            );"},{"type":"INSERT","lineNumber":8,"content":""},{"type":"DELETE","lineNumber":15,"oldContent":"                gridPos.Y * TILE_SIZE + TILE_SIZE / 2f"},{"type":"DELETE","lineNumber":16,"oldContent":"                gridPos.X * TILE_SIZE + TILE_SIZE / 2f,"},{"type":"INSERT","lineNumber":10,"content":"{"},{"type":"DELETE","lineNumber":18,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":19,"oldContent":"    /// Implementazione completa dell'algoritmo A* per pathfinding"},{"type":"DELETE","lineNumber":20,"oldContent":"        {"},{"type":"INSERT","lineNumber":12,"content":"    /// A* pathfinding algorithm implementation"},{"type":"DELETE","lineNumber":22,"oldContent":"        private Vector2 GridToWorld(Vector2 gridPos)"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"        }"},{"type":"DELETE","lineNumber":27,"oldContent":"        private const int TILE_SIZE = 32;"},{"type":"DELETE","lineNumber":28,"oldContent":"            );"},{"type":"DELETE","lineNumber":29,"oldContent":"        "},{"type":"DELETE","lineNumber":30,"oldContent":"                (float)Math.Floor(worldPos.Y / TILE_SIZE)"},{"type":"DELETE","lineNumber":31,"oldContent":"        // Direzioni di movimento (4-directional)"},{"type":"DELETE","lineNumber":32,"oldContent":"                (float)Math.Floor(worldPos.X / TILE_SIZE),"},{"type":"DELETE","lineNumber":33,"oldContent":"        private readonly Vector2[] _directions = new Vector2[]"},{"type":"DELETE","lineNumber":34,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":35,"oldContent":"        {"},{"type":"DELETE","lineNumber":36,"oldContent":"        {"},{"type":"DELETE","lineNumber":37,"oldContent":"            new Vector2(0, -1), // Su"},{"type":"DELETE","lineNumber":38,"oldContent":"        private Vector2 WorldToGrid(Vector2 worldPos)"},{"type":"DELETE","lineNumber":39,"oldContent":"            new Vector2(1, 0),  // Destra"},{"type":"INSERT","lineNumber":16,"content":"        private readonly int TILE_SIZE = 32;"},{"type":"DELETE","lineNumber":41,"oldContent":"            new Vector2(0, 1),  // Giù"},{"type":"INSERT","lineNumber":18,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":19,"content":"        /// Finds the shortest path between two world positions"},{"type":"INSERT","lineNumber":20,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":21,"content":"        public List<Vector2> FindPath(Vector2 startWorld, Vector2 endWorld, Dungeon dungeon)"},{"type":"INSERT","lineNumber":22,"content":"        {"},{"type":"INSERT","lineNumber":23,"content":"            // Convert world coordinates to grid coordinates"},{"type":"INSERT","lineNumber":24,"content":"            var start = WorldToGrid(startWorld);"},{"type":"INSERT","lineNumber":25,"content":"            var end = WorldToGrid(endWorld);"},{"type":"INSERT","lineNumber":26,"content":"            "},{"type":"INSERT","lineNumber":27,"content":"            return FindPathGrid(start, end, dungeon);"},{"type":"DELETE","lineNumber":43,"oldContent":"            new Vector2(-1, 0)  // Sinistra"},{"type":"DELETE","lineNumber":44,"oldContent":"            return optimizedPath;"},{"type":"DELETE","lineNumber":45,"oldContent":"        };"},{"type":"DELETE","lineNumber":46,"oldContent":"            optimizedPath.Add(path[path.Count - 1]);"},{"type":"INSERT","lineNumber":30,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":31,"content":"        /// Finds the shortest path between two grid positions"},{"type":"INSERT","lineNumber":32,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":33,"content":"        public List<Vector2> FindPathGrid(Vector2 start, Vector2 end, Dungeon dungeon)"},{"type":"INSERT","lineNumber":34,"content":"        {"},{"type":"INSERT","lineNumber":35,"content":"            var startNode = new Node((int)start.X, (int)start.Y);"},{"type":"INSERT","lineNumber":36,"content":"            var endNode = new Node((int)end.X, (int)end.Y);"},{"type":"DELETE","lineNumber":49,"oldContent":"        // Opzionale: movimento diagonale (8-directional)"},{"type":"INSERT","lineNumber":38,"content":"            // Check if start and end positions are valid"},{"type":"INSERT","lineNumber":39,"content":"            if (!dungeon.IsWalkable(startNode.X, startNode.Y) || !dungeon.IsWalkable(endNode.X, endNode.Y))"},{"type":"INSERT","lineNumber":40,"content":"            {"},{"type":"INSERT","lineNumber":41,"content":"                return new List<Vector2>();"},{"type":"DELETE","lineNumber":51,"oldContent":"        private readonly Vector2[] _diagonalDirections = new Vector2[]"},{"type":"DELETE","lineNumber":52,"oldContent":"                }"},{"type":"DELETE","lineNumber":53,"oldContent":"        {"},{"type":"DELETE","lineNumber":54,"oldContent":"                    optimizedPath.Add(current);"},{"type":"DELETE","lineNumber":55,"oldContent":"            new Vector2(-1, -1), new Vector2(0, -1), new Vector2(1, -1),"},{"type":"DELETE","lineNumber":56,"oldContent":"                {"},{"type":"DELETE","lineNumber":57,"oldContent":"            new Vector2(-1, 0),                       new Vector2(1, 0),"},{"type":"DELETE","lineNumber":58,"oldContent":"                if (dot < 0.99f) // Non perfettamente allineati"},{"type":"DELETE","lineNumber":59,"oldContent":"            new Vector2(-1, 1),  new Vector2(0, 1),  new Vector2(1, 1)"},{"type":"DELETE","lineNumber":60,"oldContent":"                float dot = Vector2.Dot(dir1, dir2);"},{"type":"DELETE","lineNumber":61,"oldContent":"        };"},{"type":"INSERT","lineNumber":44,"content":"            var openSet = new List<Node> { startNode };"},{"type":"INSERT","lineNumber":45,"content":"            var closedSet = new HashSet<Node>();"},{"type":"INSERT","lineNumber":46,"content":"            var cameFrom = new Dictionary<Node, Node>();"},{"type":"DELETE","lineNumber":64,"oldContent":"                Vector2 dir2 = Vector2.Normalize(next - current);"},{"type":"DELETE","lineNumber":65,"oldContent":"        private Dictionary<Vector2, Node> _nodes;"},{"type":"DELETE","lineNumber":66,"oldContent":"                Vector2 dir1 = Vector2.Normalize(current - prev);"},{"type":"DELETE","lineNumber":67,"oldContent":"        private bool _allowDiagonal;"},{"type":"DELETE","lineNumber":68,"oldContent":"                // Se la direzione cambia, mantieni il punto"},{"type":"INSERT","lineNumber":48,"content":"            startNode.GCost = 0;"},{"type":"INSERT","lineNumber":49,"content":"            startNode.HCost = GetDistance(startNode, endNode);"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"        public AStar(bool allowDiagonal = false)"},{"type":"DELETE","lineNumber":72,"oldContent":"                Vector2 next = path[i + 1];"},{"type":"DELETE","lineNumber":73,"oldContent":"        {"},{"type":"DELETE","lineNumber":74,"oldContent":"                Vector2 current = path[i];"},{"type":"DELETE","lineNumber":75,"oldContent":"            _allowDiagonal = allowDiagonal;"},{"type":"DELETE","lineNumber":76,"oldContent":"                Vector2 prev = path[i - 1];"},{"type":"DELETE","lineNumber":77,"oldContent":"            _nodes = new Dictionary<Vector2, Node>();"},{"type":"INSERT","lineNumber":51,"content":"            while (openSet.Count > 0)"},{"type":"DELETE","lineNumber":79,"oldContent":"        }"},{"type":"DELETE","lineNumber":80,"oldContent":"            for (int i = 1; i < path.Count - 1; i++)"},{"type":"INSERT","lineNumber":53,"content":"                // Get node with lowest F cost"},{"type":"INSERT","lineNumber":54,"content":"                var currentNode = openSet.OrderBy(n => n.FCost).ThenBy(n => n.HCost).First();"},{"type":"INSERT","lineNumber":56,"content":"                openSet.Remove(currentNode);"},{"type":"INSERT","lineNumber":57,"content":"                closedSet.Add(currentNode);"},{"type":"DELETE","lineNumber":83,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":84,"oldContent":"            var optimizedPath = new List<Vector2> { path[0] };"},{"type":"DELETE","lineNumber":85,"oldContent":"        /// Trova il percorso ottimale tra due punti nel mondo"},{"type":"INSERT","lineNumber":59,"content":"                // Check if we reached the destination"},{"type":"INSERT","lineNumber":60,"content":"                if (currentNode.Equals(endNode))"},{"type":"INSERT","lineNumber":61,"content":"                {"},{"type":"INSERT","lineNumber":62,"content":"                    return ReconstructPath(cameFrom, currentNode, dungeon);"},{"type":"INSERT","lineNumber":63,"content":"                }"},{"type":"DELETE","lineNumber":87,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":88,"oldContent":"            if (path.Count <= 2) return path;"},{"type":"DELETE","lineNumber":89,"oldContent":"        /// <param name=\"start\">Posizione di partenza in pixel</param>"},{"type":"DELETE","lineNumber":90,"oldContent":"        {"},{"type":"DELETE","lineNumber":91,"oldContent":"        /// <param name=\"goal\">Posizione obiettivo in pixel</param>"},{"type":"DELETE","lineNumber":92,"oldContent":"        private List<Vector2> OptimizePath(List<Vector2> path)"},{"type":"DELETE","lineNumber":93,"oldContent":"        /// <param name=\"dungeon\">Il dungeon per controllare le collisioni</param>"},{"type":"INSERT","lineNumber":65,"content":"                // Check all neighbors"},{"type":"INSERT","lineNumber":66,"content":"                foreach (var neighbor in GetNeighbors(currentNode, dungeon))"},{"type":"INSERT","lineNumber":67,"content":"                {"},{"type":"INSERT","lineNumber":68,"content":"                    if (closedSet.Contains(neighbor))"},{"type":"INSERT","lineNumber":69,"content":"                        continue;"},{"type":"DELETE","lineNumber":95,"oldContent":"        /// <returns>Lista di posizioni Vector2 che rappresentano il percorso</returns>"},{"type":"DELETE","lineNumber":96,"oldContent":"        }"},{"type":"DELETE","lineNumber":97,"oldContent":"        public List<Vector2> FindPath(Vector2 start, Vector2 goal, Dungeon dungeon)"},{"type":"DELETE","lineNumber":98,"oldContent":"            return OptimizePath(path);"},{"type":"DELETE","lineNumber":99,"oldContent":"        {"},{"type":"DELETE","lineNumber":100,"oldContent":"            // Opzionale: ottimizza il percorso rimuovendo nodi ridondanti"},{"type":"DELETE","lineNumber":101,"oldContent":"            // Converte le posizioni da pixel a coordinate griglia"},{"type":"INSERT","lineNumber":71,"content":"                    var tentativeGCost = currentNode.GCost + GetDistance(currentNode, neighbor);"},{"type":"DELETE","lineNumber":103,"oldContent":"            Vector2 startGrid = WorldToGrid(start);"},{"type":"DELETE","lineNumber":104,"oldContent":"            path.Reverse();"},{"type":"DELETE","lineNumber":105,"oldContent":"            Vector2 goalGrid = WorldToGrid(goal);"},{"type":"DELETE","lineNumber":106,"oldContent":"            // Inverti il percorso per averlo da start a goal"},{"type":"INSERT","lineNumber":73,"content":"                    if (!openSet.Contains(neighbor))"},{"type":"INSERT","lineNumber":74,"content":"                    {"},{"type":"INSERT","lineNumber":75,"content":"                        openSet.Add(neighbor);"},{"type":"INSERT","lineNumber":76,"content":"                    }"},{"type":"INSERT","lineNumber":77,"content":"                    else if (tentativeGCost >= neighbor.GCost)"},{"type":"INSERT","lineNumber":78,"content":"                    {"},{"type":"INSERT","lineNumber":79,"content":"                        continue;"},{"type":"INSERT","lineNumber":80,"content":"                    }"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"            // Verifica che start e goal siano validi"},{"type":"INSERT","lineNumber":82,"content":"                    cameFrom[neighbor] = currentNode;"},{"type":"INSERT","lineNumber":83,"content":"                    neighbor.GCost = tentativeGCost;"},{"type":"INSERT","lineNumber":84,"content":"                    neighbor.HCost = GetDistance(neighbor, endNode);"},{"type":"INSERT","lineNumber":85,"content":"                }"},{"type":"DELETE","lineNumber":111,"oldContent":"            if (!IsValidPosition(startGrid, dungeon) || !IsValidPosition(goalGrid, dungeon))"},{"type":"DELETE","lineNumber":112,"oldContent":"                current = current.Parent;"},{"type":"DELETE","lineNumber":113,"oldContent":"                return null;"},{"type":"DELETE","lineNumber":114,"oldContent":"                path.Add(worldPos);"},{"type":"DELETE","lineNumber":116,"oldContent":"                Vector2 worldPos = GridToWorld(current.Position);"},{"type":"DELETE","lineNumber":117,"oldContent":"            // Inizializza le strutture dati"},{"type":"DELETE","lineNumber":118,"oldContent":"                // Converte da coordinate griglia a coordinate mondo (centro tile)"},{"type":"DELETE","lineNumber":119,"oldContent":"            _nodes.Clear();"},{"type":"DELETE","lineNumber":120,"oldContent":"            {"},{"type":"DELETE","lineNumber":121,"oldContent":"            var openSet = new SortedSet<Node>();"},{"type":"DELETE","lineNumber":122,"oldContent":"            while (current != null)"},{"type":"DELETE","lineNumber":123,"oldContent":"            var closedSet = new HashSet<Vector2>();"},{"type":"DELETE","lineNumber":124,"oldContent":"            // Ricostruisce il percorso andando all'indietro dai parent"},{"type":"DELETE","lineNumber":125,"oldContent":""},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"            // Crea il nodo di partenza"},{"type":"DELETE","lineNumber":128,"oldContent":"            Node current = goalNode;"},{"type":"DELETE","lineNumber":129,"oldContent":"            Node startNode = GetOrCreateNode(startGrid, dungeon);"},{"type":"DELETE","lineNumber":130,"oldContent":"            var path = new List<Vector2>();"},{"type":"DELETE","lineNumber":131,"oldContent":"            startNode.GCost = 0f;"},{"type":"DELETE","lineNumber":132,"oldContent":"        {"},{"type":"DELETE","lineNumber":133,"oldContent":"            startNode.HCost = CalculateHeuristic(startGrid, goalGrid);"},{"type":"DELETE","lineNumber":134,"oldContent":"        private List<Vector2> ReconstructPath(Node goalNode)"},{"type":"DELETE","lineNumber":135,"oldContent":"            "},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"            openSet.Add(startNode);"},{"type":"INSERT","lineNumber":88,"content":"            // No path found"},{"type":"INSERT","lineNumber":89,"content":"            return new List<Vector2>();"},{"type":"DELETE","lineNumber":140,"oldContent":"            return direction.X != 0 && direction.Y != 0;"},{"type":"DELETE","lineNumber":141,"oldContent":"            while (openSet.Count > 0)"},{"type":"INSERT","lineNumber":92,"content":"        private List<Node> GetNeighbors(Node node, Dungeon dungeon)"},{"type":"INSERT","lineNumber":94,"content":"            var neighbors = new List<Node>();"},{"type":"INSERT","lineNumber":95,"content":"            var directions = new[]"},{"type":"DELETE","lineNumber":144,"oldContent":"        private bool IsDiagonal(Vector2 direction)"},{"type":"DELETE","lineNumber":145,"oldContent":"                // Prende il nodo con FCost più basso"},{"type":"INSERT","lineNumber":97,"content":"                new Vector2(0, -1), // Up"},{"type":"INSERT","lineNumber":98,"content":"                new Vector2(1, 0),  // Right"},{"type":"INSERT","lineNumber":99,"content":"                new Vector2(0, 1),  // Down"},{"type":"INSERT","lineNumber":100,"content":"                new Vector2(-1, 0)  // Left"},{"type":"INSERT","lineNumber":101,"content":"            };"},{"type":"DELETE","lineNumber":147,"oldContent":"                Node currentNode = openSet.First();"},{"type":"DELETE","lineNumber":148,"oldContent":"        }"},{"type":"DELETE","lineNumber":149,"oldContent":"                openSet.Remove(currentNode);"},{"type":"DELETE","lineNumber":150,"oldContent":"            return Vector2.Distance(from, to);"},{"type":"DELETE","lineNumber":151,"oldContent":"                closedSet.Add(currentNode.Position);"},{"type":"DELETE","lineNumber":152,"oldContent":"            // Distanza Euclidea (migliore per movimento diagonale)"},{"type":"INSERT","lineNumber":103,"content":"            foreach (var direction in directions)"},{"type":"INSERT","lineNumber":104,"content":"            {"},{"type":"INSERT","lineNumber":105,"content":"                int x = node.X + (int)direction.X;"},{"type":"INSERT","lineNumber":106,"content":"                int y = node.Y + (int)direction.Y;"},{"type":"DELETE","lineNumber":154,"oldContent":"            "},{"type":"DELETE","lineNumber":155,"oldContent":"                // Verifica se abbiamo raggiunto l'obiettivo"},{"type":"DELETE","lineNumber":156,"oldContent":"                return Math.Abs(from.X - to.X) + Math.Abs(from.Y - to.Y);"},{"type":"DELETE","lineNumber":157,"oldContent":"                if (currentNode.Position == goalGrid)"},{"type":"DELETE","lineNumber":158,"oldContent":"            if (!_allowDiagonal)"},{"type":"INSERT","lineNumber":108,"content":"                if (dungeon.IsWalkable(x, y))"},{"type":"DELETE","lineNumber":160,"oldContent":"            // Distanza Manhattan (più veloce per griglia 4-directional)"},{"type":"DELETE","lineNumber":161,"oldContent":"                    return ReconstructPath(currentNode);"},{"type":"DELETE","lineNumber":162,"oldContent":"        {"},{"type":"INSERT","lineNumber":110,"content":"                    neighbors.Add(new Node(x, y));"},{"type":"DELETE","lineNumber":164,"oldContent":"        private float CalculateHeuristic(Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":112,"content":"            }"},{"type":"DELETE","lineNumber":166,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"                // Esplora i nodi vicini"},{"type":"INSERT","lineNumber":114,"content":"            return neighbors;"},{"type":"DELETE","lineNumber":169,"oldContent":"                var directions = _allowDiagonal ? _diagonalDirections : _directions;"},{"type":"DELETE","lineNumber":170,"oldContent":"            return tile != null && tile.IsWalkable;"},{"type":"DELETE","lineNumber":171,"oldContent":"                "},{"type":"DELETE","lineNumber":172,"oldContent":"            var tile = dungeon.GetTile((int)gridPos.X, (int)gridPos.Y);"},{"type":"DELETE","lineNumber":173,"oldContent":"                foreach (Vector2 direction in directions)"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"        private float GetDistance(Node nodeA, Node nodeB)"},{"type":"DELETE","lineNumber":175,"oldContent":"                {"},{"type":"DELETE","lineNumber":176,"oldContent":"        private bool IsWalkable(Vector2 gridPos, Dungeon dungeon)"},{"type":"DELETE","lineNumber":177,"oldContent":"                    Vector2 neighborPos = currentNode.Position + direction;"},{"type":"INSERT","lineNumber":119,"content":"            int distX = Math.Abs(nodeA.X - nodeB.X);"},{"type":"INSERT","lineNumber":120,"content":"            int distY = Math.Abs(nodeA.Y - nodeB.Y);"},{"type":"DELETE","lineNumber":179,"oldContent":"                    "},{"type":"INSERT","lineNumber":122,"content":"            // Manhattan distance (since we only allow 4-directional movement)"},{"type":"INSERT","lineNumber":123,"content":"            return distX + distY;"},{"type":"DELETE","lineNumber":181,"oldContent":"                    // Salta se già visitato"},{"type":"DELETE","lineNumber":182,"oldContent":"            return IsWalkable(gridPos, dungeon);"},{"type":"DELETE","lineNumber":183,"oldContent":"                    if (closedSet.Contains(neighborPos))"},{"type":"DELETE","lineNumber":185,"oldContent":"                        continue;"},{"type":"DELETE","lineNumber":186,"oldContent":"                return false;"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"                gridPos.X >= dungeon.Width || gridPos.Y >= dungeon.Height)"},{"type":"DELETE","lineNumber":189,"oldContent":"                    // Salta se non è una posizione valida"},{"type":"DELETE","lineNumber":190,"oldContent":"            if (gridPos.X < 0 || gridPos.Y < 0 || "},{"type":"DELETE","lineNumber":191,"oldContent":"                    if (!IsValidPosition(neighborPos, dungeon))"},{"type":"DELETE","lineNumber":192,"oldContent":"            // Verifica i bounds"},{"type":"DELETE","lineNumber":193,"oldContent":"                        continue;"},{"type":"INSERT","lineNumber":126,"content":"        private List<Vector2> ReconstructPath(Dictionary<Node, Node> cameFrom, Node endNode, Dungeon dungeon)"},{"type":"INSERT","lineNumber":128,"content":"            var path = new List<Vector2>();"},{"type":"INSERT","lineNumber":129,"content":"            var currentNode = endNode;"},{"type":"DELETE","lineNumber":196,"oldContent":"        private bool IsValidPosition(Vector2 gridPos, Dungeon dungeon)"},{"type":"DELETE","lineNumber":197,"oldContent":"                    Node neighbor = GetOrCreateNode(neighborPos, dungeon);"},{"type":"INSERT","lineNumber":131,"content":"            while (cameFrom.ContainsKey(currentNode))"},{"type":"INSERT","lineNumber":132,"content":"            {"},{"type":"INSERT","lineNumber":133,"content":"                // Convert back to world coordinates"},{"type":"INSERT","lineNumber":134,"content":"                path.Add(GridToWorld(currentNode.X, currentNode.Y));"},{"type":"INSERT","lineNumber":135,"content":"                currentNode = cameFrom[currentNode];"},{"type":"INSERT","lineNumber":136,"content":"            }"},{"type":"DELETE","lineNumber":199,"oldContent":"                    "},{"type":"INSERT","lineNumber":138,"content":"            // Add the start position"},{"type":"INSERT","lineNumber":139,"content":"            path.Add(GridToWorld(currentNode.X, currentNode.Y));"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"            // Reverse to get path from start to end"},{"type":"INSERT","lineNumber":142,"content":"            path.Reverse();"},{"type":"INSERT","lineNumber":143,"content":"            return path;"},{"type":"DELETE","lineNumber":201,"oldContent":"                    // Calcola il nuovo G cost"},{"type":"DELETE","lineNumber":202,"oldContent":"            return node;"},{"type":"DELETE","lineNumber":203,"oldContent":"                    float movementCost = _allowDiagonal && IsDiagonal(direction) ? 1.414f : 1f; // √2 per diagonali"},{"type":"DELETE","lineNumber":204,"oldContent":"            }"},{"type":"DELETE","lineNumber":205,"oldContent":"                    float tentativeGCost = currentNode.GCost + movementCost;"},{"type":"DELETE","lineNumber":206,"oldContent":"                _nodes[position] = node;"},{"type":"DELETE","lineNumber":208,"oldContent":"                node = new Node(position, isWalkable);"},{"type":"DELETE","lineNumber":209,"oldContent":"                    // Se questo percorso verso il neighbor è migliore"},{"type":"DELETE","lineNumber":210,"oldContent":"                bool isWalkable = IsWalkable(position, dungeon);"},{"type":"DELETE","lineNumber":211,"oldContent":"                    if (tentativeGCost < neighbor.GCost)"},{"type":"DELETE","lineNumber":212,"oldContent":"            {"},{"type":"DELETE","lineNumber":213,"oldContent":"                    {"},{"type":"DELETE","lineNumber":214,"oldContent":"            if (!_nodes.TryGetValue(position, out Node node))"},{"type":"DELETE","lineNumber":215,"oldContent":"                        // Rimuove dalla open set se già presente (per aggiornare la posizione)"},{"type":"INSERT","lineNumber":146,"content":"        private Vector2 WorldToGrid(Vector2 worldPosition)"},{"type":"DELETE","lineNumber":217,"oldContent":"                        openSet.Remove(neighbor);"},{"type":"DELETE","lineNumber":218,"oldContent":"        private Node GetOrCreateNode(Vector2 position, Dungeon dungeon)"},{"type":"DELETE","lineNumber":219,"oldContent":"                        "},{"type":"DELETE","lineNumber":220,"oldContent":""},{"type":"DELETE","lineNumber":221,"oldContent":"                        neighbor.Parent = currentNode;"},{"type":"INSERT","lineNumber":148,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":149,"content":"                (int)Math.Floor(worldPosition.X / TILE_SIZE),"},{"type":"INSERT","lineNumber":150,"content":"                (int)Math.Floor(worldPosition.Y / TILE_SIZE)"},{"type":"INSERT","lineNumber":151,"content":"            );"},{"type":"DELETE","lineNumber":223,"oldContent":"                        neighbor.GCost = tentativeGCost;"},{"type":"DELETE","lineNumber":224,"oldContent":"            return null;"},{"type":"DELETE","lineNumber":225,"oldContent":"                        neighbor.HCost = CalculateHeuristic(neighborPos, goalGrid);"},{"type":"DELETE","lineNumber":226,"oldContent":"            // Nessun percorso trovato"},{"type":"DELETE","lineNumber":227,"oldContent":"                        "},{"type":"DELETE","lineNumber":229,"oldContent":"                        openSet.Add(neighbor);"},{"type":"DELETE","lineNumber":230,"oldContent":"            }"},{"type":"DELETE","lineNumber":231,"oldContent":"                    }"},{"type":"DELETE","lineNumber":232,"oldContent":"                }"},{"type":"INSERT","lineNumber":154,"content":"        private Vector2 GridToWorld(int gridX, int gridY)"},{"type":"INSERT","lineNumber":155,"content":"        {"},{"type":"INSERT","lineNumber":156,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":157,"content":"                gridX * TILE_SIZE + TILE_SIZE / 2f,"},{"type":"INSERT","lineNumber":158,"content":"                gridY * TILE_SIZE + TILE_SIZE / 2f"},{"type":"INSERT","lineNumber":159,"content":"            );"},{"type":"INSERT","lineNumber":160,"content":"        }"}]},{"timestamp":1756230173293,"changes":[{"type":"MODIFY","lineNumber":5,"content":"using System;","oldContent":"using System;"},{"type":"MODIFY","lineNumber":8,"content":"","oldContent":""},{"type":"INSERT","lineNumber":9,"content":"namespace DungeonExplorer.AI"},{"type":"INSERT","lineNumber":11,"content":"    /// <summary>"},{"type":"DELETE","lineNumber":11,"oldContent":"namespace DungeonExplorer.AI"},{"type":"INSERT","lineNumber":13,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":14,"content":"    public class AStar"},{"type":"INSERT","lineNumber":15,"content":"    {"},{"type":"DELETE","lineNumber":13,"oldContent":"    /// <summary>"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"DELETE","lineNumber":18,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":21,"oldContent":"    public class AStar"},{"type":"DELETE","lineNumber":24,"oldContent":"    {"},{"type":"MODIFY","lineNumber":26,"content":"","oldContent":"            "},{"type":"INSERT","lineNumber":28,"content":"        }"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":37,"content":""},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"        }"},{"type":"INSERT","lineNumber":42,"content":"            }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":47,"oldContent":"            }"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":52,"content":"            {"},{"type":"INSERT","lineNumber":55,"content":""},{"type":"INSERT","lineNumber":58,"content":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"INSERT","lineNumber":72,"content":""},{"type":"DELETE","lineNumber":73,"oldContent":"            {"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"INSERT","lineNumber":90,"content":"        }"},{"type":"INSERT","lineNumber":91,"content":""},{"type":"INSERT","lineNumber":93,"content":"        {"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"INSERT","lineNumber":96,"content":"            {"},{"type":"DELETE","lineNumber":90,"oldContent":"                new Vector2(1, 0),  // Right"},{"type":"DELETE","lineNumber":91,"oldContent":"                new Vector2(0, 1),  // Down"},{"type":"DELETE","lineNumber":92,"oldContent":"                new Vector2(-1, 0)  // Left"},{"type":"INSERT","lineNumber":98,"content":"                new Vector2(1, 0), // Right"},{"type":"INSERT","lineNumber":99,"content":"                new Vector2(0, 1), // Down"},{"type":"INSERT","lineNumber":100,"content":"                new Vector2(-1, 0) // Left"},{"type":"INSERT","lineNumber":109,"content":"                {"},{"type":"INSERT","lineNumber":111,"content":"                }"},{"type":"DELETE","lineNumber":103,"oldContent":"            }"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"INSERT","lineNumber":115,"content":"        }"},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"INSERT","lineNumber":118,"content":"        {"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":124,"content":"        }"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":127,"content":"        {"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"INSERT","lineNumber":137,"content":""},{"type":"DELETE","lineNumber":122,"oldContent":"        }"},{"type":"DELETE","lineNumber":125,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"        {"},{"type":"DELETE","lineNumber":130,"oldContent":"            {"},{"type":"DELETE","lineNumber":131,"oldContent":"        private Vector2 WorldToGrid(Vector2 worldPosition)"},{"type":"INSERT","lineNumber":144,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":"        private Vector2 WorldToGrid(Vector2 worldPosition)"},{"type":"INSERT","lineNumber":147,"content":"        {"},{"type":"INSERT","lineNumber":152,"content":"        }"},{"type":"DELETE","lineNumber":144,"oldContent":"                {"},{"type":"DELETE","lineNumber":146,"oldContent":"                }"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":"        }"},{"type":"DELETE","lineNumber":149,"oldContent":"        {"},{"type":"DELETE","lineNumber":150,"oldContent":""},{"type":"DELETE","lineNumber":151,"oldContent":"        }"},{"type":"DELETE","lineNumber":152,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":"        {"},{"type":"DELETE","lineNumber":154,"oldContent":""},{"type":"DELETE","lineNumber":155,"oldContent":""},{"type":"DELETE","lineNumber":156,"oldContent":"        }"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":158,"oldContent":"        {"},{"type":"DELETE","lineNumber":159,"oldContent":"        }"},{"type":"DELETE","lineNumber":160,"oldContent":""},{"type":"INSERT","lineNumber":161,"content":"    }"},{"type":"INSERT","lineNumber":162,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/AI/PathfindingHelper.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/AI/PathfindingHelper.cs","baseContent":"namespace DungeonExplorer.AI;\n\npublic class PathfindingHelper\n{\n    \n}","baseTimestamp":1756228500377,"deltas":[{"timestamp":1756228513368,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.AI;"},{"type":"INSERT","lineNumber":1,"content":"// PathfindingHelper.cs - Utility per pathfinding"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":5,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":6,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":7,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class PathfindingHelper"},{"type":"INSERT","lineNumber":9,"content":"namespace DungeonExplorer.AI"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":11,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":12,"content":"    /// Classe di utilità per operazioni di pathfinding comuni"},{"type":"INSERT","lineNumber":13,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":14,"content":"    public static class PathfindingHelper"},{"type":"INSERT","lineNumber":15,"content":"    {"},{"type":"INSERT","lineNumber":16,"content":"        private const int TILE_SIZE = 32;"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":19,"content":"        /// Verifica se c'è una linea di vista diretta tra due punti"},{"type":"INSERT","lineNumber":20,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":21,"content":"        public static bool HasLineOfSight(Vector2 from, Vector2 to, Dungeon dungeon)"},{"type":"INSERT","lineNumber":22,"content":"        {"},{"type":"INSERT","lineNumber":23,"content":"            Vector2 direction = Vector2.Normalize(to - from);"},{"type":"INSERT","lineNumber":24,"content":"            float distance = Vector2.Distance(from, to);"},{"type":"INSERT","lineNumber":25,"content":"            int steps = (int)(distance / (TILE_SIZE / 4f)); // Check ogni 8 pixel"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"            for (int i = 0; i <= steps; i++)"},{"type":"INSERT","lineNumber":28,"content":"            {"},{"type":"INSERT","lineNumber":29,"content":"                float t = i / (float)steps;"},{"type":"INSERT","lineNumber":30,"content":"                Vector2 checkPos = Vector2.Lerp(from, to, t);"},{"type":"INSERT","lineNumber":31,"content":"                Vector2 gridPos = new Vector2("},{"type":"INSERT","lineNumber":32,"content":"                    (float)Math.Floor(checkPos.X / TILE_SIZE),"},{"type":"INSERT","lineNumber":33,"content":"                    (float)Math.Floor(checkPos.Y / TILE_SIZE)"},{"type":"INSERT","lineNumber":34,"content":"                );"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"                var tile = dungeon.GetTile((int)gridPos.X, (int)gridPos.Y);"},{"type":"INSERT","lineNumber":37,"content":"                if (tile == null || !tile.IsWalkable)"},{"type":"INSERT","lineNumber":38,"content":"                    return false;"},{"type":"INSERT","lineNumber":39,"content":"            }"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"            return true;"},{"type":"INSERT","lineNumber":42,"content":"        }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":45,"content":"        /// Trova la posizione più vicina raggiungibile dal target"},{"type":"INSERT","lineNumber":46,"content":"        /// Utile quando il target esatto non è raggiungibile"},{"type":"INSERT","lineNumber":47,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":48,"content":"        public static Vector2 FindNearestWalkablePosition(Vector2 target, Dungeon dungeon, int maxRadius = 5)"},{"type":"INSERT","lineNumber":49,"content":"        {"},{"type":"INSERT","lineNumber":50,"content":"            Vector2 gridTarget = new Vector2("},{"type":"INSERT","lineNumber":51,"content":"                (float)Math.Floor(target.X / TILE_SIZE),"},{"type":"INSERT","lineNumber":52,"content":"                (float)Math.Floor(target.Y / TILE_SIZE)"},{"type":"INSERT","lineNumber":53,"content":"            );"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"            // Se la posizione target è già walkable, ritornala"},{"type":"INSERT","lineNumber":56,"content":"            var targetTile = dungeon.GetTile((int)gridTarget.X, (int)gridTarget.Y);"},{"type":"INSERT","lineNumber":57,"content":"            if (targetTile != null && targetTile.IsWalkable)"},{"type":"INSERT","lineNumber":58,"content":"                return target;"},{"type":"INSERT","lineNumber":59,"content":""},{"type":"INSERT","lineNumber":60,"content":"            // Cerca in cerchi concentrici"},{"type":"INSERT","lineNumber":61,"content":"            for (int radius = 1; radius <= maxRadius; radius++)"},{"type":"INSERT","lineNumber":62,"content":"            {"},{"type":"INSERT","lineNumber":63,"content":"                for (int dx = -radius; dx <= radius; dx++)"},{"type":"INSERT","lineNumber":64,"content":"                {"},{"type":"INSERT","lineNumber":65,"content":"                    for (int dy = -radius; dy <= radius; dy++)"},{"type":"INSERT","lineNumber":66,"content":"                    {"},{"type":"INSERT","lineNumber":67,"content":"                        if (Math.Abs(dx) == radius || Math.Abs(dy) == radius)"},{"type":"INSERT","lineNumber":68,"content":"                        {"},{"type":"INSERT","lineNumber":69,"content":"                            Vector2 checkPos = gridTarget + new Vector2(dx, dy);"},{"type":"INSERT","lineNumber":70,"content":"                            var tile = dungeon.GetTile((int)checkPos.X, (int)checkPos.Y);"},{"type":"INSERT","lineNumber":71,"content":"                            "},{"type":"INSERT","lineNumber":72,"content":"                            if (tile != null && tile.IsWalkable)"},{"type":"INSERT","lineNumber":73,"content":"                            {"},{"type":"INSERT","lineNumber":74,"content":"                                return new Vector2("},{"type":"INSERT","lineNumber":75,"content":"                                    checkPos.X * TILE_SIZE + TILE_SIZE / 2f,"},{"type":"INSERT","lineNumber":76,"content":"                                    checkPos.Y * TILE_SIZE + TILE_SIZE / 2f"},{"type":"INSERT","lineNumber":77,"content":"                                );"},{"type":"INSERT","lineNumber":78,"content":"                            }"},{"type":"INSERT","lineNumber":79,"content":"                        }"},{"type":"INSERT","lineNumber":80,"content":"                    }"},{"type":"INSERT","lineNumber":81,"content":"                }"},{"type":"INSERT","lineNumber":82,"content":"            }"},{"type":"INSERT","lineNumber":83,"content":""},{"type":"INSERT","lineNumber":84,"content":"            // Se non trova nulla, ritorna la posizione originale"},{"type":"INSERT","lineNumber":85,"content":"            return target;"},{"type":"INSERT","lineNumber":86,"content":"        }"},{"type":"INSERT","lineNumber":87,"content":""},{"type":"INSERT","lineNumber":88,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":89,"content":"        /// Calcola una posizione di fuga dal player"},{"type":"INSERT","lineNumber":90,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":91,"content":"        public static Vector2 FindFleePosition(Vector2 from, Vector2 fleeFrom, Dungeon dungeon, float fleeDistance = 128f)"},{"type":"INSERT","lineNumber":92,"content":"        {"},{"type":"INSERT","lineNumber":93,"content":"            Vector2 fleeDirection = Vector2.Normalize(from - fleeFrom);"},{"type":"INSERT","lineNumber":94,"content":"            Vector2 fleeTarget = from + fleeDirection * fleeDistance;"},{"type":"INSERT","lineNumber":95,"content":"            "},{"type":"INSERT","lineNumber":96,"content":"            return FindNearestWalkablePosition(fleeTarget, dungeon);"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":100,"content":"        /// Trova una posizione di intercettazione basata sulla velocità del target"},{"type":"INSERT","lineNumber":101,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":102,"content":"        public static Vector2 CalculateInterceptPosition(Vector2 from, Vector2 targetPos, Vector2 targetVelocity, float interceptorSpeed)"},{"type":"INSERT","lineNumber":103,"content":"        {"},{"type":"INSERT","lineNumber":104,"content":"            Vector2 toTarget = targetPos - from;"},{"type":"INSERT","lineNumber":105,"content":"            float distance = toTarget.Length();"},{"type":"INSERT","lineNumber":106,"content":"            "},{"type":"INSERT","lineNumber":107,"content":"            if (targetVelocity.Length() == 0 || interceptorSpeed <= 0)"},{"type":"INSERT","lineNumber":108,"content":"                return targetPos;"},{"type":"INSERT","lineNumber":109,"content":""},{"type":"INSERT","lineNumber":110,"content":"            // Calcola il tempo di intercettazione usando la formula quadratica"},{"type":"INSERT","lineNumber":111,"content":"            float a = targetVelocity.LengthSquared() - interceptorSpeed * interceptorSpeed;"},{"type":"INSERT","lineNumber":112,"content":"            float b = 2 * Vector2.Dot(toTarget, targetVelocity);"},{"type":"INSERT","lineNumber":113,"content":"            float c = toTarget.LengthSquared();"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"INSERT","lineNumber":115,"content":"            float discriminant = b * b - 4 * a * c;"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"            if (discriminant < 0)"},{"type":"INSERT","lineNumber":118,"content":"                return targetPos; // Nessuna intercettazione possibile"},{"type":"INSERT","lineNumber":119,"content":""},{"type":"INSERT","lineNumber":120,"content":"            float t1 = (-b - MathF.Sqrt(discriminant)) / (2 * a);"},{"type":"INSERT","lineNumber":121,"content":"            float t2 = (-b + MathF.Sqrt(discriminant)) / (2 * a);"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"            float t = t1 > 0 ? t1 : t2;"},{"type":"INSERT","lineNumber":124,"content":"            if (t < 0) return targetPos;"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":126,"content":"            return targetPos + targetVelocity * t;"},{"type":"INSERT","lineNumber":127,"content":"        }"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":130,"content":"        /// Genera punti di pattuglia casuali in una zona"},{"type":"INSERT","lineNumber":131,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":132,"content":"        public static List<Vector2> GeneratePatrolPoints(Vector2 center, Dungeon dungeon, int count = 4, float radius = 96f)"},{"type":"INSERT","lineNumber":133,"content":"        {"},{"type":"INSERT","lineNumber":134,"content":"            var points = new List<Vector2>();"},{"type":"INSERT","lineNumber":135,"content":"            var random = new Random();"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"            for (int i = 0; i < count * 3; i++) // Tenta più volte per trovare punti validi"},{"type":"INSERT","lineNumber":138,"content":"            {"},{"type":"INSERT","lineNumber":139,"content":"                float angle = random.NextSingle() * MathF.PI * 2f;"},{"type":"INSERT","lineNumber":140,"content":"                float distance = random.NextSingle() * radius;"},{"type":"INSERT","lineNumber":141,"content":"                "},{"type":"INSERT","lineNumber":142,"content":"                Vector2 point = center + new Vector2("},{"type":"INSERT","lineNumber":143,"content":"                    MathF.Cos(angle) * distance,"},{"type":"INSERT","lineNumber":144,"content":"                    MathF.Sin(angle) * distance"},{"type":"INSERT","lineNumber":145,"content":"                );"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"                Vector2 walkablePoint = FindNearestWalkablePosition(point, dungeon, 3);"},{"type":"INSERT","lineNumber":148,"content":"                if (Vector2.Distance(walkablePoint, point) < TILE_SIZE * 2) // Abbastanza vicino al punto desiderato"},{"type":"INSERT","lineNumber":149,"content":"                {"},{"type":"INSERT","lineNumber":150,"content":"                    points.Add(walkablePoint);"},{"type":"INSERT","lineNumber":151,"content":"                    if (points.Count >= count) break;"},{"type":"INSERT","lineNumber":152,"content":"                }"},{"type":"INSERT","lineNumber":153,"content":"            }"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"            return points;"},{"type":"INSERT","lineNumber":156,"content":"        }"},{"type":"INSERT","lineNumber":157,"content":"    }"}]},{"timestamp":1756230086163,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"// PathfindingHelper.cs - Utility per pathfinding"},{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":1,"content":"// PathfindingHelper.cs - Utilities for pathfinding"},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":6,"oldContent":"using DungeonExplorer.Entities;"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":9,"oldContent":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":10,"oldContent":"    }"},{"type":"DELETE","lineNumber":12,"oldContent":"        }"},{"type":"DELETE","lineNumber":13,"oldContent":"            return points;"},{"type":"DELETE","lineNumber":14,"oldContent":"namespace DungeonExplorer.AI"},{"type":"INSERT","lineNumber":6,"content":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":16,"oldContent":"            }"},{"type":"INSERT","lineNumber":8,"content":"namespace DungeonExplorer.AI"},{"type":"INSERT","lineNumber":9,"content":"{"},{"type":"DELETE","lineNumber":18,"oldContent":"                }"},{"type":"DELETE","lineNumber":19,"oldContent":"    /// Classe di utilità per operazioni di pathfinding comuni"},{"type":"DELETE","lineNumber":20,"oldContent":"                    if (points.Count >= count) break;"},{"type":"INSERT","lineNumber":11,"content":"    /// Static helper methods for pathfinding operations"},{"type":"DELETE","lineNumber":22,"oldContent":"                    points.Add(walkablePoint);"},{"type":"DELETE","lineNumber":24,"oldContent":"                {"},{"type":"DELETE","lineNumber":26,"oldContent":"                if (Vector2.Distance(walkablePoint, point) < TILE_SIZE * 2) // Abbastanza vicino al punto desiderato"},{"type":"DELETE","lineNumber":27,"oldContent":"        private const int TILE_SIZE = 32;"},{"type":"DELETE","lineNumber":28,"oldContent":"                Vector2 walkablePoint = FindNearestWalkablePosition(point, dungeon, 3);"},{"type":"INSERT","lineNumber":15,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":16,"content":"        /// Calculates Manhattan distance between two points"},{"type":"INSERT","lineNumber":17,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":18,"content":"        public static float ManhattanDistance(Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            return Math.Abs(a.X - b.X) + Math.Abs(a.Y - b.Y);"},{"type":"INSERT","lineNumber":21,"content":"        }"},{"type":"DELETE","lineNumber":30,"oldContent":""},{"type":"DELETE","lineNumber":32,"oldContent":"                );"},{"type":"DELETE","lineNumber":33,"oldContent":"        /// Verifica se c'è una linea di vista diretta tra due punti"},{"type":"DELETE","lineNumber":34,"oldContent":"                    MathF.Sin(angle) * distance"},{"type":"INSERT","lineNumber":24,"content":"        /// Calculates Euclidean distance between two points"},{"type":"DELETE","lineNumber":36,"oldContent":"                    MathF.Cos(angle) * distance,"},{"type":"DELETE","lineNumber":37,"oldContent":"        public static bool HasLineOfSight(Vector2 from, Vector2 to, Dungeon dungeon)"},{"type":"DELETE","lineNumber":38,"oldContent":"                Vector2 point = center + new Vector2("},{"type":"INSERT","lineNumber":26,"content":"        public static float EuclideanDistance(Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":40,"oldContent":"                "},{"type":"DELETE","lineNumber":41,"oldContent":"            Vector2 direction = Vector2.Normalize(to - from);"},{"type":"DELETE","lineNumber":42,"oldContent":"                float distance = random.NextSingle() * radius;"},{"type":"DELETE","lineNumber":43,"oldContent":"            float distance = Vector2.Distance(from, to);"},{"type":"DELETE","lineNumber":44,"oldContent":"                float angle = random.NextSingle() * MathF.PI * 2f;"},{"type":"DELETE","lineNumber":45,"oldContent":"            int steps = (int)(distance / (TILE_SIZE / 4f)); // Check ogni 8 pixel"},{"type":"DELETE","lineNumber":46,"oldContent":"            {"},{"type":"INSERT","lineNumber":28,"content":"            return Vector2.Distance(a, b);"},{"type":"INSERT","lineNumber":29,"content":"        }"},{"type":"DELETE","lineNumber":48,"oldContent":"            for (int i = 0; i < count * 3; i++) // Tenta più volte per trovare punti validi"},{"type":"DELETE","lineNumber":49,"oldContent":"            for (int i = 0; i <= steps; i++)"},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"DELETE","lineNumber":51,"oldContent":"            {"},{"type":"DELETE","lineNumber":52,"oldContent":"            var random = new Random();"},{"type":"DELETE","lineNumber":53,"oldContent":"                float t = i / (float)steps;"},{"type":"DELETE","lineNumber":54,"oldContent":"            var points = new List<Vector2>();"},{"type":"DELETE","lineNumber":55,"oldContent":"                Vector2 checkPos = Vector2.Lerp(from, to, t);"},{"type":"INSERT","lineNumber":31,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":32,"content":"        /// Calculates diagonal distance (allows diagonal movement)"},{"type":"INSERT","lineNumber":33,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":34,"content":"        public static float DiagonalDistance(Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":57,"oldContent":"                Vector2 gridPos = new Vector2("},{"type":"DELETE","lineNumber":58,"oldContent":"        public static List<Vector2> GeneratePatrolPoints(Vector2 center, Dungeon dungeon, int count = 4, float radius = 96f)"},{"type":"DELETE","lineNumber":59,"oldContent":"                    (float)Math.Floor(checkPos.X / TILE_SIZE),"},{"type":"INSERT","lineNumber":36,"content":"            float dx = Math.Abs(a.X - b.X);"},{"type":"INSERT","lineNumber":37,"content":"            float dy = Math.Abs(a.Y - b.Y);"},{"type":"INSERT","lineNumber":38,"content":"            return Math.Max(dx, dy);"},{"type":"INSERT","lineNumber":39,"content":"        }"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":42,"content":"        /// Gets the cardinal direction from one point to another"},{"type":"DELETE","lineNumber":61,"oldContent":"                    (float)Math.Floor(checkPos.Y / TILE_SIZE)"},{"type":"DELETE","lineNumber":62,"oldContent":"        /// Genera punti di pattuglia casuali in una zona"},{"type":"DELETE","lineNumber":63,"oldContent":"                );"},{"type":"INSERT","lineNumber":44,"content":"        public static Vector2 GetDirection(Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":45,"content":"        {"},{"type":"INSERT","lineNumber":46,"content":"            var direction = to - from;"},{"type":"INSERT","lineNumber":47,"content":"            if (direction == Vector2.Zero) return Vector2.Zero;"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"            direction.Normalize();"},{"type":"INSERT","lineNumber":50,"content":"            return direction;"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":54,"content":"        /// Snaps a direction vector to the nearest cardinal direction"},{"type":"INSERT","lineNumber":55,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":56,"content":"        public static Vector2 SnapToCardinalDirection(Vector2 direction)"},{"type":"INSERT","lineNumber":57,"content":"        {"},{"type":"INSERT","lineNumber":58,"content":"            if (direction == Vector2.Zero) return Vector2.Zero;"},{"type":"INSERT","lineNumber":60,"content":"            float absX = Math.Abs(direction.X);"},{"type":"INSERT","lineNumber":61,"content":"            float absY = Math.Abs(direction.Y);"},{"type":"DELETE","lineNumber":67,"oldContent":"                var tile = dungeon.GetTile((int)gridPos.X, (int)gridPos.Y);"},{"type":"INSERT","lineNumber":63,"content":"            if (absX > absY)"},{"type":"INSERT","lineNumber":64,"content":"            {"},{"type":"INSERT","lineNumber":65,"content":"                return new Vector2(Math.Sign(direction.X), 0);"},{"type":"INSERT","lineNumber":66,"content":"            }"},{"type":"INSERT","lineNumber":67,"content":"            else"},{"type":"INSERT","lineNumber":68,"content":"            {"},{"type":"INSERT","lineNumber":69,"content":"                return new Vector2(0, Math.Sign(direction.Y));"},{"type":"INSERT","lineNumber":70,"content":"            }"},{"type":"DELETE","lineNumber":69,"oldContent":"                if (tile == null || !tile.IsWalkable)"},{"type":"DELETE","lineNumber":70,"oldContent":"            return targetPos + targetVelocity * t;"},{"type":"DELETE","lineNumber":71,"oldContent":"                    return false;"},{"type":"INSERT","lineNumber":73,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":74,"content":"        /// Checks if a path is clear between two points using simple line-of-sight"},{"type":"INSERT","lineNumber":75,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":76,"content":"        public static bool IsPathClear(Vector2 start, Vector2 end, Dungeon dungeon, int tileSize = 32)"},{"type":"INSERT","lineNumber":77,"content":"        {"},{"type":"INSERT","lineNumber":78,"content":"            var startGrid = new Vector2((int)(start.X / tileSize), (int)(start.Y / tileSize));"},{"type":"INSERT","lineNumber":79,"content":"            var endGrid = new Vector2((int)(end.X / tileSize), (int)(end.Y / tileSize));"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"            var current = startGrid;"},{"type":"INSERT","lineNumber":82,"content":"            var direction = GetDirection(startGrid, endGrid);"},{"type":"INSERT","lineNumber":83,"content":"            var distance = Vector2.Distance(startGrid, endGrid);"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"INSERT","lineNumber":85,"content":"            for (float t = 0; t <= distance; t += 0.5f)"},{"type":"INSERT","lineNumber":86,"content":"            {"},{"type":"INSERT","lineNumber":87,"content":"                var checkPos = startGrid + direction * t;"},{"type":"INSERT","lineNumber":88,"content":"                int x = (int)Math.Round(checkPos.X);"},{"type":"INSERT","lineNumber":89,"content":"                int y = (int)Math.Round(checkPos.Y);"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"INSERT","lineNumber":91,"content":"                if (!dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":92,"content":"                    return false;"},{"type":"DELETE","lineNumber":74,"oldContent":"            if (t < 0) return targetPos;"},{"type":"DELETE","lineNumber":76,"oldContent":"            float t = t1 > 0 ? t1 : t2;"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":"            float t2 = (-b + MathF.Sqrt(discriminant)) / (2 * a);"},{"type":"DELETE","lineNumber":82,"oldContent":"            float t1 = (-b - MathF.Sqrt(discriminant)) / (2 * a);"},{"type":"DELETE","lineNumber":84,"oldContent":""},{"type":"DELETE","lineNumber":85,"oldContent":"        /// Trova la posizione più vicina raggiungibile dal target"},{"type":"DELETE","lineNumber":86,"oldContent":"                return targetPos; // Nessuna intercettazione possibile"},{"type":"DELETE","lineNumber":87,"oldContent":"        /// Utile quando il target esatto non è raggiungibile"},{"type":"DELETE","lineNumber":88,"oldContent":"            if (discriminant < 0)"},{"type":"INSERT","lineNumber":99,"content":"        /// Finds the nearest walkable position to a target position"},{"type":"DELETE","lineNumber":90,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"        public static Vector2 FindNearestWalkablePosition(Vector2 target, Dungeon dungeon, int maxRadius = 5)"},{"type":"DELETE","lineNumber":92,"oldContent":"            float discriminant = b * b - 4 * a * c;"},{"type":"INSERT","lineNumber":101,"content":"        public static Vector2? FindNearestWalkablePosition(Vector2 target, Dungeon dungeon, int maxRadius = 5, int tileSize = 32)"},{"type":"INSERT","lineNumber":103,"content":"            var gridPos = new Vector2((int)(target.X / tileSize), (int)(target.Y / tileSize));"},{"type":"DELETE","lineNumber":95,"oldContent":"            Vector2 gridTarget = new Vector2("},{"type":"DELETE","lineNumber":96,"oldContent":"            float c = toTarget.LengthSquared();"},{"type":"DELETE","lineNumber":97,"oldContent":"                (float)Math.Floor(target.X / TILE_SIZE),"},{"type":"DELETE","lineNumber":98,"oldContent":"            float b = 2 * Vector2.Dot(toTarget, targetVelocity);"},{"type":"DELETE","lineNumber":99,"oldContent":"                (float)Math.Floor(target.Y / TILE_SIZE)"},{"type":"DELETE","lineNumber":100,"oldContent":"            float a = targetVelocity.LengthSquared() - interceptorSpeed * interceptorSpeed;"},{"type":"DELETE","lineNumber":101,"oldContent":"            );"},{"type":"DELETE","lineNumber":102,"oldContent":"            // Calcola il tempo di intercettazione usando la formula quadratica"},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"            // Se la posizione target è già walkable, ritornala"},{"type":"DELETE","lineNumber":106,"oldContent":"                return targetPos;"},{"type":"DELETE","lineNumber":107,"oldContent":"            var targetTile = dungeon.GetTile((int)gridTarget.X, (int)gridTarget.Y);"},{"type":"DELETE","lineNumber":108,"oldContent":"            if (targetVelocity.Length() == 0 || interceptorSpeed <= 0)"},{"type":"DELETE","lineNumber":109,"oldContent":"            if (targetTile != null && targetTile.IsWalkable)"},{"type":"DELETE","lineNumber":110,"oldContent":"            "},{"type":"INSERT","lineNumber":105,"content":"            // Check if the target position is already walkable"},{"type":"INSERT","lineNumber":106,"content":"            if (dungeon.IsWalkable((int)gridPos.X, (int)gridPos.Y))"},{"type":"DELETE","lineNumber":112,"oldContent":"            float distance = toTarget.Length();"},{"type":"DELETE","lineNumber":114,"oldContent":"            Vector2 toTarget = targetPos - from;"},{"type":"DELETE","lineNumber":115,"oldContent":"            // Cerca in cerchi concentrici"},{"type":"DELETE","lineNumber":116,"oldContent":"        {"},{"type":"INSERT","lineNumber":109,"content":"            // Spiral outward from the target position"},{"type":"DELETE","lineNumber":118,"oldContent":"        public static Vector2 CalculateInterceptPosition(Vector2 from, Vector2 targetPos, Vector2 targetVelocity, float interceptorSpeed)"},{"type":"DELETE","lineNumber":120,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":122,"oldContent":"        /// Trova una posizione di intercettazione basata sulla velocità del target"},{"type":"DELETE","lineNumber":124,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"                        if (Math.Abs(dx) == radius || Math.Abs(dy) == radius)"},{"type":"DELETE","lineNumber":130,"oldContent":"            return FindNearestWalkablePosition(fleeTarget, dungeon);"},{"type":"INSERT","lineNumber":116,"content":"                        // Only check positions on the edge of the current radius"},{"type":"INSERT","lineNumber":117,"content":"                        if (Math.Abs(dx) != radius && Math.Abs(dy) != radius)"},{"type":"INSERT","lineNumber":118,"content":"                            continue;"},{"type":"INSERT","lineNumber":119,"content":""},{"type":"INSERT","lineNumber":120,"content":"                        int x = (int)gridPos.X + dx;"},{"type":"INSERT","lineNumber":121,"content":"                        int y = (int)gridPos.Y + dy;"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"                        if (dungeon.IsWalkable(x, y))"},{"type":"DELETE","lineNumber":132,"oldContent":"            "},{"type":"DELETE","lineNumber":133,"oldContent":"                            Vector2 checkPos = gridTarget + new Vector2(dx, dy);"},{"type":"DELETE","lineNumber":134,"oldContent":"            Vector2 fleeTarget = from + fleeDirection * fleeDistance;"},{"type":"DELETE","lineNumber":135,"oldContent":"                            var tile = dungeon.GetTile((int)checkPos.X, (int)checkPos.Y);"},{"type":"DELETE","lineNumber":136,"oldContent":"            Vector2 fleeDirection = Vector2.Normalize(from - fleeFrom);"},{"type":"DELETE","lineNumber":137,"oldContent":"                            "},{"type":"INSERT","lineNumber":125,"content":"                            return new Vector2(x * tileSize + tileSize / 2f, y * tileSize + tileSize / 2f);"},{"type":"INSERT","lineNumber":126,"content":"                        }"},{"type":"INSERT","lineNumber":127,"content":"                    }"},{"type":"INSERT","lineNumber":128,"content":"                }"},{"type":"INSERT","lineNumber":129,"content":"            }"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"INSERT","lineNumber":131,"content":"            return null; // No walkable position found within radius"},{"type":"INSERT","lineNumber":132,"content":"        }"},{"type":"INSERT","lineNumber":133,"content":""},{"type":"INSERT","lineNumber":134,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":135,"content":"        /// Simplifies a path by removing redundant waypoints"},{"type":"INSERT","lineNumber":136,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":137,"content":"        public static List<Vector2> SimplifyPath(List<Vector2> path, Dungeon dungeon, float tolerance = 2f)"},{"type":"DELETE","lineNumber":139,"oldContent":"                            if (tile != null && tile.IsWalkable)"},{"type":"DELETE","lineNumber":140,"oldContent":"        public static Vector2 FindFleePosition(Vector2 from, Vector2 fleeFrom, Dungeon dungeon, float fleeDistance = 128f)"},{"type":"DELETE","lineNumber":141,"oldContent":"                            {"},{"type":"INSERT","lineNumber":139,"content":"            if (path.Count <= 2) return new List<Vector2>(path);"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"            var simplified = new List<Vector2> { path[0] };"},{"type":"INSERT","lineNumber":142,"content":""},{"type":"INSERT","lineNumber":143,"content":"            for (int i = 1; i < path.Count - 1; i++)"},{"type":"INSERT","lineNumber":144,"content":"            {"},{"type":"INSERT","lineNumber":145,"content":"                var prev = simplified[simplified.Count - 1];"},{"type":"INSERT","lineNumber":146,"content":"                var current = path[i];"},{"type":"INSERT","lineNumber":147,"content":"                var next = path[i + 1];"},{"type":"INSERT","lineNumber":148,"content":""},{"type":"INSERT","lineNumber":149,"content":"                // Check if we can skip this waypoint"},{"type":"INSERT","lineNumber":150,"content":"                if (Vector2.Distance(prev, next) <= tolerance * 2 && IsPathClear(prev, next, dungeon))"},{"type":"INSERT","lineNumber":151,"content":"                {"},{"type":"INSERT","lineNumber":152,"content":"                    continue; // Skip this waypoint"},{"type":"INSERT","lineNumber":153,"content":"                }"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"                simplified.Add(current);"},{"type":"INSERT","lineNumber":156,"content":"            }"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"INSERT","lineNumber":158,"content":"            simplified.Add(path[path.Count - 1]);"},{"type":"INSERT","lineNumber":159,"content":"            return simplified;"},{"type":"INSERT","lineNumber":160,"content":"        }"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"INSERT","lineNumber":162,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":163,"content":"        /// Calculates the total length of a path"},{"type":"DELETE","lineNumber":143,"oldContent":"                                return new Vector2("},{"type":"DELETE","lineNumber":144,"oldContent":"        /// Calcola una posizione di fuga dal player"},{"type":"DELETE","lineNumber":145,"oldContent":"                                    checkPos.X * TILE_SIZE + TILE_SIZE / 2f,"},{"type":"INSERT","lineNumber":165,"content":"        public static float CalculatePathLength(List<Vector2> path)"},{"type":"INSERT","lineNumber":166,"content":"        {"},{"type":"INSERT","lineNumber":167,"content":"            if (path.Count < 2) return 0f;"},{"type":"INSERT","lineNumber":168,"content":""},{"type":"INSERT","lineNumber":169,"content":"            float totalLength = 0f;"},{"type":"INSERT","lineNumber":170,"content":"            for (int i = 1; i < path.Count; i++)"},{"type":"INSERT","lineNumber":171,"content":"            {"},{"type":"INSERT","lineNumber":172,"content":"                totalLength += Vector2.Distance(path[i - 1], path[i]);"},{"type":"INSERT","lineNumber":173,"content":"            }"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"            return totalLength;"},{"type":"INSERT","lineNumber":176,"content":"        }"},{"type":"INSERT","lineNumber":177,"content":""},{"type":"DELETE","lineNumber":147,"oldContent":"                                    checkPos.Y * TILE_SIZE + TILE_SIZE / 2f"},{"type":"INSERT","lineNumber":179,"content":"        /// Gets a position along a path at a specific distance from the start"},{"type":"INSERT","lineNumber":180,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":181,"content":"        public static Vector2 GetPositionAlongPath(List<Vector2> path, float distance)"},{"type":"INSERT","lineNumber":182,"content":"        {"},{"type":"INSERT","lineNumber":183,"content":"            if (path.Count == 0) return Vector2.Zero;"},{"type":"INSERT","lineNumber":184,"content":"            if (path.Count == 1 || distance <= 0) return path[0];"},{"type":"DELETE","lineNumber":149,"oldContent":"                                );"},{"type":"INSERT","lineNumber":186,"content":"            float currentDistance = 0f;"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"            for (int i = 1; i < path.Count; i++)"},{"type":"INSERT","lineNumber":189,"content":"            {"},{"type":"INSERT","lineNumber":190,"content":"                var segmentLength = Vector2.Distance(path[i - 1], path[i]);"},{"type":"INSERT","lineNumber":191,"content":""},{"type":"INSERT","lineNumber":192,"content":"                if (currentDistance + segmentLength >= distance)"},{"type":"INSERT","lineNumber":193,"content":"                {"},{"type":"INSERT","lineNumber":194,"content":"                    // The target distance is within this segment"},{"type":"INSERT","lineNumber":195,"content":"                    float remainingDistance = distance - currentDistance;"},{"type":"INSERT","lineNumber":196,"content":"                    float t = remainingDistance / segmentLength;"},{"type":"INSERT","lineNumber":197,"content":"                    return Vector2.Lerp(path[i - 1], path[i], t);"},{"type":"INSERT","lineNumber":198,"content":"                }"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"                currentDistance += segmentLength;"},{"type":"INSERT","lineNumber":201,"content":"            }"},{"type":"INSERT","lineNumber":202,"content":""},{"type":"INSERT","lineNumber":203,"content":"            // Distance is beyond the end of the path"},{"type":"INSERT","lineNumber":204,"content":"            return path[path.Count - 1];"},{"type":"DELETE","lineNumber":151,"oldContent":"                            }"},{"type":"DELETE","lineNumber":152,"oldContent":"            return target;"},{"type":"DELETE","lineNumber":153,"oldContent":"                        }"},{"type":"DELETE","lineNumber":154,"oldContent":"            // Se non trova nulla, ritorna la posizione originale"},{"type":"INSERT","lineNumber":206,"content":""},{"type":"INSERT","lineNumber":207,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":208,"content":"        /// Checks if two paths intersect"},{"type":"INSERT","lineNumber":209,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":210,"content":"        public static bool DoPathsIntersect(List<Vector2> pathA, List<Vector2> pathB, float tolerance = 16f)"},{"type":"INSERT","lineNumber":211,"content":"        {"},{"type":"INSERT","lineNumber":212,"content":"            for (int i = 0; i < pathA.Count - 1; i++)"},{"type":"INSERT","lineNumber":213,"content":"            {"},{"type":"INSERT","lineNumber":214,"content":"                for (int j = 0; j < pathB.Count - 1; j++)"},{"type":"INSERT","lineNumber":215,"content":"                {"},{"type":"INSERT","lineNumber":216,"content":"                    if (DoLineSegmentsIntersect(pathA[i], pathA[i + 1], pathB[j], pathB[j + 1], tolerance))"},{"type":"INSERT","lineNumber":217,"content":"                    {"},{"type":"INSERT","lineNumber":218,"content":"                        return true;"},{"type":"INSERT","lineNumber":220,"content":"                }"},{"type":"INSERT","lineNumber":221,"content":"            }"},{"type":"INSERT","lineNumber":223,"content":"            return false;"},{"type":"INSERT","lineNumber":224,"content":"        }"},{"type":"INSERT","lineNumber":225,"content":""},{"type":"INSERT","lineNumber":226,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":227,"content":"        /// Checks if two line segments intersect within a tolerance"},{"type":"INSERT","lineNumber":228,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":229,"content":"        private static bool DoLineSegmentsIntersect(Vector2 a1, Vector2 a2, Vector2 b1, Vector2 b2, float tolerance)"},{"type":"INSERT","lineNumber":230,"content":"        {"},{"type":"INSERT","lineNumber":231,"content":"            // Simple distance-based check for intersection"},{"type":"INSERT","lineNumber":232,"content":"            var midA = (a1 + a2) * 0.5f;"},{"type":"INSERT","lineNumber":233,"content":"            var midB = (b1 + b2) * 0.5f;"},{"type":"INSERT","lineNumber":234,"content":"            "},{"type":"INSERT","lineNumber":235,"content":"            return Vector2.Distance(midA, midB) <= tolerance;"},{"type":"INSERT","lineNumber":236,"content":"        }"},{"type":"INSERT","lineNumber":237,"content":""},{"type":"INSERT","lineNumber":238,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":239,"content":"        /// Generates random waypoints around a central position"},{"type":"INSERT","lineNumber":240,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":241,"content":"        public static List<Vector2> GenerateRandomWaypoints(Vector2 center, int count, float radius, Dungeon dungeon, Random random, int tileSize = 32)"},{"type":"INSERT","lineNumber":242,"content":"        {"},{"type":"INSERT","lineNumber":243,"content":"            var waypoints = new List<Vector2>();"},{"type":"INSERT","lineNumber":244,"content":""},{"type":"INSERT","lineNumber":245,"content":"            for (int i = 0; i < count * 3; i++) // Try more times than needed"},{"type":"INSERT","lineNumber":246,"content":"            {"},{"type":"INSERT","lineNumber":247,"content":"                if (waypoints.Count >= count) break;"},{"type":"INSERT","lineNumber":248,"content":""},{"type":"INSERT","lineNumber":249,"content":"                var angle = (float)(random.NextDouble() * Math.PI * 2);"},{"type":"INSERT","lineNumber":250,"content":"                var distance = (float)(random.NextDouble() * radius);"},{"type":"INSERT","lineNumber":251,"content":"                var position = center + new Vector2("},{"type":"INSERT","lineNumber":252,"content":"                    (float)Math.Cos(angle) * distance,"},{"type":"INSERT","lineNumber":253,"content":"                    (float)Math.Sin(angle) * distance"},{"type":"INSERT","lineNumber":254,"content":"                );"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"                var gridPos = new Vector2((int)(position.X / tileSize), (int)(position.Y / tileSize));"},{"type":"INSERT","lineNumber":257,"content":"                "},{"type":"INSERT","lineNumber":258,"content":"                if (dungeon.IsWalkable((int)gridPos.X, (int)gridPos.Y))"},{"type":"INSERT","lineNumber":259,"content":"                {"},{"type":"INSERT","lineNumber":260,"content":"                    waypoints.Add(position);"},{"type":"INSERT","lineNumber":263,"content":""},{"type":"INSERT","lineNumber":264,"content":"            return waypoints;"},{"type":"INSERT","lineNumber":265,"content":"        }"},{"type":"INSERT","lineNumber":266,"content":"    }"},{"type":"INSERT","lineNumber":267,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/World/Tile.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/World/Tile.cs","baseContent":"namespace DungeonExplorer.World;\n\npublic class Tile\n{\n    \n}","baseTimestamp":1756228529082,"deltas":[{"timestamp":1756228533677,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.World;"},{"type":"INSERT","lineNumber":1,"content":"// Tile.cs - Rappresenta una singola tile del mondo"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Tile"},{"type":"INSERT","lineNumber":5,"content":"namespace DungeonExplorer.World"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":7,"content":"    public enum TileType"},{"type":"INSERT","lineNumber":8,"content":"    {"},{"type":"INSERT","lineNumber":9,"content":"        Wall,"},{"type":"INSERT","lineNumber":10,"content":"        Floor,"},{"type":"INSERT","lineNumber":11,"content":"        Door,"},{"type":"INSERT","lineNumber":12,"content":"        Corridor"},{"type":"INSERT","lineNumber":13,"content":"    }"},{"type":"INSERT","lineNumber":14,"content":""},{"type":"INSERT","lineNumber":15,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":16,"content":"    /// Rappresenta una singola tile nel dungeon"},{"type":"INSERT","lineNumber":17,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":18,"content":"    public class Tile"},{"type":"INSERT","lineNumber":19,"content":"    {"},{"type":"INSERT","lineNumber":20,"content":"        public TileType Type { get; set; }"},{"type":"INSERT","lineNumber":21,"content":"        public bool IsWalkable { get; set; }"},{"type":"INSERT","lineNumber":22,"content":"        public bool IsTransparent { get; set; }"},{"type":"INSERT","lineNumber":23,"content":"        public Vector2 Position { get; set; }"},{"type":"INSERT","lineNumber":24,"content":"        public Color Tint { get; set; }"},{"type":"INSERT","lineNumber":25,"content":"        public bool IsExplored { get; set; }"},{"type":"INSERT","lineNumber":26,"content":"        public bool IsVisible { get; set; }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"        public Tile(TileType type, Vector2 position)"},{"type":"INSERT","lineNumber":29,"content":"        {"},{"type":"INSERT","lineNumber":30,"content":"            Type = type;"},{"type":"INSERT","lineNumber":31,"content":"            Position = position;"},{"type":"INSERT","lineNumber":32,"content":"            Tint = Color.White;"},{"type":"INSERT","lineNumber":33,"content":"            IsExplored = false;"},{"type":"INSERT","lineNumber":34,"content":"            IsVisible = false;"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"            // Imposta le proprietà base in base al tipo"},{"type":"INSERT","lineNumber":37,"content":"            switch (type)"},{"type":"INSERT","lineNumber":38,"content":"            {"},{"type":"INSERT","lineNumber":39,"content":"                case TileType.Wall:"},{"type":"INSERT","lineNumber":40,"content":"                    IsWalkable = false;"},{"type":"INSERT","lineNumber":41,"content":"                    IsTransparent = false;"},{"type":"INSERT","lineNumber":42,"content":"                    break;"},{"type":"INSERT","lineNumber":43,"content":"                case TileType.Floor:"},{"type":"INSERT","lineNumber":44,"content":"                case TileType.Corridor:"},{"type":"INSERT","lineNumber":45,"content":"                case TileType.Door:"},{"type":"INSERT","lineNumber":46,"content":"                    IsWalkable = true;"},{"type":"INSERT","lineNumber":47,"content":"                    IsTransparent = true;"},{"type":"INSERT","lineNumber":48,"content":"                    break;"},{"type":"INSERT","lineNumber":49,"content":"            }"},{"type":"INSERT","lineNumber":50,"content":"        }"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"        public void SetExplored()"},{"type":"INSERT","lineNumber":53,"content":"        {"},{"type":"INSERT","lineNumber":54,"content":"            IsExplored = true;"},{"type":"INSERT","lineNumber":55,"content":"        }"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"        public void SetVisible(bool visible)"},{"type":"INSERT","lineNumber":58,"content":"        {"},{"type":"INSERT","lineNumber":59,"content":"            IsVisible = visible;"},{"type":"INSERT","lineNumber":60,"content":"            if (visible) IsExplored = true;"},{"type":"INSERT","lineNumber":61,"content":"        }"},{"type":"INSERT","lineNumber":62,"content":"    }"}]},{"timestamp":1756229985725,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"// Tile.cs - Rappresenta una singola tile del mondo"},{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":1,"content":"// Tile.cs - Represents a single tile in the world"},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"INSERT","lineNumber":4,"content":""},{"type":"DELETE","lineNumber":7,"oldContent":"}"},{"type":"DELETE","lineNumber":8,"oldContent":"    }"},{"type":"INSERT","lineNumber":6,"content":"{"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":12,"oldContent":"            if (visible) IsExplored = true;"},{"type":"DELETE","lineNumber":14,"oldContent":"            IsVisible = visible;"},{"type":"DELETE","lineNumber":16,"oldContent":"        {"},{"type":"DELETE","lineNumber":18,"oldContent":"        public void SetVisible(bool visible)"},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":22,"oldContent":"        }"},{"type":"DELETE","lineNumber":24,"oldContent":"            IsExplored = true;"},{"type":"DELETE","lineNumber":26,"oldContent":"        {"},{"type":"DELETE","lineNumber":27,"oldContent":"    /// Rappresenta una singola tile nel dungeon"},{"type":"DELETE","lineNumber":28,"oldContent":"        public void SetExplored()"},{"type":"INSERT","lineNumber":16,"content":"    /// Represents a single tile in the dungeon"},{"type":"DELETE","lineNumber":30,"oldContent":""},{"type":"DELETE","lineNumber":32,"oldContent":"        }"},{"type":"DELETE","lineNumber":34,"oldContent":"            }"},{"type":"DELETE","lineNumber":36,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":38,"oldContent":"                    IsTransparent = true;"},{"type":"DELETE","lineNumber":40,"oldContent":"                    IsWalkable = true;"},{"type":"DELETE","lineNumber":42,"oldContent":"                case TileType.Door:"},{"type":"DELETE","lineNumber":44,"oldContent":"                case TileType.Corridor:"},{"type":"DELETE","lineNumber":46,"oldContent":"                case TileType.Floor:"},{"type":"DELETE","lineNumber":48,"oldContent":"                    break;"},{"type":"INSERT","lineNumber":27,"content":"        public bool IsStartPosition { get; set; }"},{"type":"INSERT","lineNumber":28,"content":"        public bool IsEndPosition { get; set; }"},{"type":"INSERT","lineNumber":29,"content":"        public int RoomId { get; set; } = -1;"},{"type":"DELETE","lineNumber":50,"oldContent":"                    IsTransparent = false;"},{"type":"INSERT","lineNumber":31,"content":"        public Tile(TileType type, int x, int y) : this(type, new Vector2(x, y))"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"        }"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"DELETE","lineNumber":52,"oldContent":"                    IsWalkable = false;"},{"type":"DELETE","lineNumber":54,"oldContent":"                case TileType.Wall:"},{"type":"DELETE","lineNumber":56,"oldContent":"            {"},{"type":"DELETE","lineNumber":58,"oldContent":"            switch (type)"},{"type":"DELETE","lineNumber":60,"oldContent":"            // Imposta le proprietà base in base al tipo"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"INSERT","lineNumber":42,"content":"            IsStartPosition = false;"},{"type":"INSERT","lineNumber":43,"content":"            IsEndPosition = false;"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":45,"content":"            // Set base properties based on type"},{"type":"INSERT","lineNumber":46,"content":"            switch (type)"},{"type":"INSERT","lineNumber":47,"content":"            {"},{"type":"INSERT","lineNumber":48,"content":"                case TileType.Wall:"},{"type":"INSERT","lineNumber":49,"content":"                    IsWalkable = false;"},{"type":"INSERT","lineNumber":50,"content":"                    IsTransparent = false;"},{"type":"INSERT","lineNumber":51,"content":"                    break;"},{"type":"INSERT","lineNumber":52,"content":"                case TileType.Floor:"},{"type":"INSERT","lineNumber":53,"content":"                case TileType.Corridor:"},{"type":"INSERT","lineNumber":54,"content":"                case TileType.Door:"},{"type":"INSERT","lineNumber":55,"content":"                    IsWalkable = true;"},{"type":"INSERT","lineNumber":56,"content":"                    IsTransparent = true;"},{"type":"INSERT","lineNumber":57,"content":"                    break;"},{"type":"INSERT","lineNumber":58,"content":"            }"},{"type":"INSERT","lineNumber":59,"content":"        }"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"        public void SetExplored()"},{"type":"INSERT","lineNumber":62,"content":"        {"},{"type":"INSERT","lineNumber":63,"content":"            IsExplored = true;"},{"type":"INSERT","lineNumber":64,"content":"        }"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"        public void SetVisible(bool visible)"},{"type":"INSERT","lineNumber":67,"content":"        {"},{"type":"INSERT","lineNumber":68,"content":"            IsVisible = visible;"},{"type":"INSERT","lineNumber":69,"content":"            if (visible) IsExplored = true;"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"        public override string ToString()"},{"type":"INSERT","lineNumber":73,"content":"        {"},{"type":"INSERT","lineNumber":74,"content":"            return $\"Tile at ({Position.X}, {Position.Y}) - Type: {Type}, Walkable: {IsWalkable}\";"},{"type":"INSERT","lineNumber":75,"content":"        }"},{"type":"INSERT","lineNumber":76,"content":"    }"},{"type":"INSERT","lineNumber":77,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/World/Room.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/World/Room.cs","baseContent":"namespace DungeonExplorer.World;\n\npublic class Room\n{\n    \n}","baseTimestamp":1756228553069,"deltas":[{"timestamp":1756229919264,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.World;"},{"type":"INSERT","lineNumber":1,"content":"// Room.cs - Represents a room in the dungeon"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"INSERT","lineNumber":5,"content":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Room"},{"type":"INSERT","lineNumber":7,"content":"namespace DungeonExplorer.World"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":9,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":10,"content":"    /// Represents a rectangular room in the dungeon"},{"type":"INSERT","lineNumber":11,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":12,"content":"    public class Room"},{"type":"INSERT","lineNumber":13,"content":"    {"},{"type":"INSERT","lineNumber":14,"content":"        public int Id { get; set; }"},{"type":"INSERT","lineNumber":15,"content":"        public int X { get; set; }"},{"type":"INSERT","lineNumber":16,"content":"        public int Y { get; set; }"},{"type":"INSERT","lineNumber":17,"content":"        public int Width { get; set; }"},{"type":"INSERT","lineNumber":18,"content":"        public int Height { get; set; }"},{"type":"INSERT","lineNumber":19,"content":"        public RoomType Type { get; set; }"},{"type":"INSERT","lineNumber":20,"content":"        public List<Vector2> Connections { get; private set; }"},{"type":"INSERT","lineNumber":21,"content":"        public bool IsExplored { get; set; }"},{"type":"INSERT","lineNumber":22,"content":"        "},{"type":"INSERT","lineNumber":23,"content":"        public Rectangle Bounds => new Rectangle(X, Y, Width, Height);"},{"type":"INSERT","lineNumber":24,"content":"        public Vector2 Center => new Vector2(X + Width / 2f, Y + Height / 2f);"},{"type":"INSERT","lineNumber":25,"content":"        public Vector2 TopLeft => new Vector2(X, Y);"},{"type":"INSERT","lineNumber":26,"content":"        public Vector2 TopRight => new Vector2(X + Width - 1, Y);"},{"type":"INSERT","lineNumber":27,"content":"        public Vector2 BottomLeft => new Vector2(X, Y + Height - 1);"},{"type":"INSERT","lineNumber":28,"content":"        public Vector2 BottomRight => new Vector2(X + Width - 1, Y + Height - 1);"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"        public Room(int x, int y, int width, int height, int id = 0, RoomType type = RoomType.Normal)"},{"type":"INSERT","lineNumber":31,"content":"        {"},{"type":"INSERT","lineNumber":32,"content":"            X = x;"},{"type":"INSERT","lineNumber":33,"content":"            Y = y;"},{"type":"INSERT","lineNumber":34,"content":"            Width = width;"},{"type":"INSERT","lineNumber":35,"content":"            Height = height;"},{"type":"INSERT","lineNumber":36,"content":"            Id = id;"},{"type":"INSERT","lineNumber":37,"content":"            Type = type;"},{"type":"INSERT","lineNumber":38,"content":"            Connections = new List<Vector2>();"},{"type":"INSERT","lineNumber":39,"content":"            IsExplored = false;"},{"type":"INSERT","lineNumber":40,"content":"        }"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":43,"content":"        /// Checks if this room overlaps with another room"},{"type":"INSERT","lineNumber":44,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":45,"content":"        public bool Overlaps(Room other)"},{"type":"INSERT","lineNumber":46,"content":"        {"},{"type":"INSERT","lineNumber":47,"content":"            if (other == null) return false;"},{"type":"INSERT","lineNumber":48,"content":"            "},{"type":"INSERT","lineNumber":49,"content":"            return X < other.X + other.Width && "},{"type":"INSERT","lineNumber":50,"content":"                   X + Width > other.X && "},{"type":"INSERT","lineNumber":51,"content":"                   Y < other.Y + other.Height && "},{"type":"INSERT","lineNumber":52,"content":"                   Y + Height > other.Y;"},{"type":"INSERT","lineNumber":53,"content":"        }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":56,"content":"        /// Checks if this room overlaps with another room with a buffer"},{"type":"INSERT","lineNumber":57,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":58,"content":"        public bool OverlapsWithBuffer(Room other, int buffer = 1)"},{"type":"INSERT","lineNumber":59,"content":"        {"},{"type":"INSERT","lineNumber":60,"content":"            if (other == null) return false;"},{"type":"INSERT","lineNumber":61,"content":"            "},{"type":"INSERT","lineNumber":62,"content":"            return X - buffer < other.X + other.Width && "},{"type":"INSERT","lineNumber":63,"content":"                   X + Width + buffer > other.X && "},{"type":"INSERT","lineNumber":64,"content":"                   Y - buffer < other.Y + other.Height && "},{"type":"INSERT","lineNumber":65,"content":"                   Y + Height + buffer > other.Y;"},{"type":"INSERT","lineNumber":66,"content":"        }"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":69,"content":"        /// Checks if a point is inside this room"},{"type":"INSERT","lineNumber":70,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":71,"content":"        public bool Contains(int x, int y)"},{"type":"INSERT","lineNumber":72,"content":"        {"},{"type":"INSERT","lineNumber":73,"content":"            return x >= X && x < X + Width && y >= Y && y < Y + Height;"},{"type":"INSERT","lineNumber":74,"content":"        }"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"INSERT","lineNumber":76,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":77,"content":"        /// Checks if a point is inside this room"},{"type":"INSERT","lineNumber":78,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":79,"content":"        public bool Contains(Vector2 point)"},{"type":"INSERT","lineNumber":80,"content":"        {"},{"type":"INSERT","lineNumber":81,"content":"            return Contains((int)point.X, (int)point.Y);"},{"type":"INSERT","lineNumber":82,"content":"        }"},{"type":"INSERT","lineNumber":83,"content":""},{"type":"INSERT","lineNumber":84,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":85,"content":"        /// Gets a random position inside the room"},{"type":"INSERT","lineNumber":86,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":87,"content":"        public Vector2 GetRandomPosition()"},{"type":"INSERT","lineNumber":88,"content":"        {"},{"type":"INSERT","lineNumber":89,"content":"            var random = new Random();"},{"type":"INSERT","lineNumber":90,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":91,"content":"                random.Next(X + 1, X + Width - 1),"},{"type":"INSERT","lineNumber":92,"content":"                random.Next(Y + 1, Y + Height - 1)"},{"type":"INSERT","lineNumber":93,"content":"            );"},{"type":"INSERT","lineNumber":94,"content":"        }"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":97,"content":"        /// Gets a random position on the edge of the room"},{"type":"INSERT","lineNumber":98,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":99,"content":"        public Vector2 GetRandomEdgePosition()"},{"type":"INSERT","lineNumber":100,"content":"        {"},{"type":"INSERT","lineNumber":101,"content":"            var random = new Random();"},{"type":"INSERT","lineNumber":102,"content":"            var side = random.Next(4); // 0=top, 1=right, 2=bottom, 3=left"},{"type":"INSERT","lineNumber":103,"content":"            "},{"type":"INSERT","lineNumber":104,"content":"            switch (side)"},{"type":"INSERT","lineNumber":105,"content":"            {"},{"type":"INSERT","lineNumber":106,"content":"                case 0: // Top"},{"type":"INSERT","lineNumber":107,"content":"                    return new Vector2(random.Next(X, X + Width), Y);"},{"type":"INSERT","lineNumber":108,"content":"                case 1: // Right"},{"type":"INSERT","lineNumber":109,"content":"                    return new Vector2(X + Width - 1, random.Next(Y, Y + Height));"},{"type":"INSERT","lineNumber":110,"content":"                case 2: // Bottom"},{"type":"INSERT","lineNumber":111,"content":"                    return new Vector2(random.Next(X, X + Width), Y + Height - 1);"},{"type":"INSERT","lineNumber":112,"content":"                case 3: // Left"},{"type":"INSERT","lineNumber":113,"content":"                    return new Vector2(X, random.Next(Y, Y + Height));"},{"type":"INSERT","lineNumber":114,"content":"                default:"},{"type":"INSERT","lineNumber":115,"content":"                    return Center;"},{"type":"INSERT","lineNumber":116,"content":"            }"},{"type":"INSERT","lineNumber":117,"content":"        }"},{"type":"INSERT","lineNumber":118,"content":""},{"type":"INSERT","lineNumber":119,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":120,"content":"        /// Calculates the distance to another room (center to center)"},{"type":"INSERT","lineNumber":121,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":122,"content":"        public float DistanceTo(Room other)"},{"type":"INSERT","lineNumber":123,"content":"        {"},{"type":"INSERT","lineNumber":124,"content":"            if (other == null) return float.MaxValue;"},{"type":"INSERT","lineNumber":125,"content":"            return Vector2.Distance(Center, other.Center);"},{"type":"INSERT","lineNumber":126,"content":"        }"},{"type":"INSERT","lineNumber":127,"content":""},{"type":"INSERT","lineNumber":128,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":129,"content":"        /// Gets the closest point on this room to another room"},{"type":"INSERT","lineNumber":130,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":131,"content":"        public Vector2 GetClosestPointTo(Room other)"},{"type":"INSERT","lineNumber":132,"content":"        {"},{"type":"INSERT","lineNumber":133,"content":"            if (other == null) return Center;"},{"type":"INSERT","lineNumber":134,"content":"            "},{"type":"INSERT","lineNumber":135,"content":"            var otherCenter = other.Center;"},{"type":"INSERT","lineNumber":136,"content":"            var thisCenter = Center;"},{"type":"INSERT","lineNumber":137,"content":"            "},{"type":"INSERT","lineNumber":138,"content":"            // Find closest point on edge"},{"type":"INSERT","lineNumber":139,"content":"            float x = Math.Max(X, Math.Min(otherCenter.X, X + Width - 1));"},{"type":"INSERT","lineNumber":140,"content":"            float y = Math.Max(Y, Math.Min(otherCenter.Y, Y + Height - 1));"},{"type":"INSERT","lineNumber":141,"content":"            "},{"type":"INSERT","lineNumber":142,"content":"            return new Vector2(x, y);"},{"type":"INSERT","lineNumber":143,"content":"        }"},{"type":"INSERT","lineNumber":144,"content":""},{"type":"INSERT","lineNumber":145,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":146,"content":"        /// Adds a connection point to another room"},{"type":"INSERT","lineNumber":147,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":148,"content":"        public void AddConnection(Vector2 connectionPoint)"},{"type":"INSERT","lineNumber":149,"content":"        {"},{"type":"INSERT","lineNumber":150,"content":"            if (!Connections.Contains(connectionPoint))"},{"type":"INSERT","lineNumber":151,"content":"            {"},{"type":"INSERT","lineNumber":152,"content":"                Connections.Add(connectionPoint);"},{"type":"INSERT","lineNumber":153,"content":"            }"},{"type":"INSERT","lineNumber":154,"content":"        }"},{"type":"INSERT","lineNumber":155,"content":""},{"type":"INSERT","lineNumber":156,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":157,"content":"        /// Gets all floor positions in this room"},{"type":"INSERT","lineNumber":158,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":159,"content":"        public List<Vector2> GetAllFloorPositions()"},{"type":"INSERT","lineNumber":160,"content":"        {"},{"type":"INSERT","lineNumber":161,"content":"            var positions = new List<Vector2>();"},{"type":"INSERT","lineNumber":162,"content":"            "},{"type":"INSERT","lineNumber":163,"content":"            for (int x = X; x < X + Width; x++)"},{"type":"INSERT","lineNumber":164,"content":"            {"},{"type":"INSERT","lineNumber":165,"content":"                for (int y = Y; y < Y + Height; y++)"},{"type":"INSERT","lineNumber":166,"content":"                {"},{"type":"INSERT","lineNumber":167,"content":"                    positions.Add(new Vector2(x, y));"},{"type":"INSERT","lineNumber":168,"content":"                }"},{"type":"INSERT","lineNumber":169,"content":"            }"},{"type":"INSERT","lineNumber":170,"content":"            "},{"type":"INSERT","lineNumber":171,"content":"            return positions;"},{"type":"INSERT","lineNumber":172,"content":"        }"},{"type":"INSERT","lineNumber":173,"content":""},{"type":"INSERT","lineNumber":174,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":175,"content":"        /// Gets the perimeter positions of the room"},{"type":"INSERT","lineNumber":176,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":177,"content":"        public List<Vector2> GetPerimeterPositions()"},{"type":"INSERT","lineNumber":178,"content":"        {"},{"type":"INSERT","lineNumber":179,"content":"            var positions = new List<Vector2>();"},{"type":"INSERT","lineNumber":180,"content":"            "},{"type":"INSERT","lineNumber":181,"content":"            // Top and bottom edges"},{"type":"INSERT","lineNumber":182,"content":"            for (int x = X; x < X + Width; x++)"},{"type":"INSERT","lineNumber":183,"content":"            {"},{"type":"INSERT","lineNumber":184,"content":"                positions.Add(new Vector2(x, Y)); // Top"},{"type":"INSERT","lineNumber":185,"content":"                positions.Add(new Vector2(x, Y + Height - 1)); // Bottom"},{"type":"INSERT","lineNumber":186,"content":"            }"},{"type":"INSERT","lineNumber":187,"content":"            "},{"type":"INSERT","lineNumber":188,"content":"            // Left and right edges (excluding corners already added)"},{"type":"INSERT","lineNumber":189,"content":"            for (int y = Y + 1; y < Y + Height - 1; y++)"},{"type":"INSERT","lineNumber":190,"content":"            {"},{"type":"INSERT","lineNumber":191,"content":"                positions.Add(new Vector2(X, y)); // Left"},{"type":"INSERT","lineNumber":192,"content":"                positions.Add(new Vector2(X + Width - 1, y)); // Right"},{"type":"INSERT","lineNumber":193,"content":"            }"},{"type":"INSERT","lineNumber":194,"content":"            "},{"type":"INSERT","lineNumber":195,"content":"            return positions;"},{"type":"INSERT","lineNumber":196,"content":"        }"},{"type":"INSERT","lineNumber":197,"content":""},{"type":"INSERT","lineNumber":198,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":199,"content":"        /// Checks if this room is adjacent to another room"},{"type":"INSERT","lineNumber":200,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":201,"content":"        public bool IsAdjacentTo(Room other)"},{"type":"INSERT","lineNumber":202,"content":"        {"},{"type":"INSERT","lineNumber":203,"content":"            if (other == null) return false;"},{"type":"INSERT","lineNumber":204,"content":"            "},{"type":"INSERT","lineNumber":205,"content":"            // Check if rooms are touching but not overlapping"},{"type":"INSERT","lineNumber":206,"content":"            bool horizontallyAdjacent = (X + Width == other.X || other.X + other.Width == X) &&"},{"type":"INSERT","lineNumber":207,"content":"                                       (Y < other.Y + other.Height && Y + Height > other.Y);"},{"type":"INSERT","lineNumber":208,"content":"            "},{"type":"INSERT","lineNumber":209,"content":"            bool verticallyAdjacent = (Y + Height == other.Y || other.Y + other.Height == Y) &&"},{"type":"INSERT","lineNumber":210,"content":"                                     (X < other.X + other.Width && X + Width > other.X);"},{"type":"INSERT","lineNumber":211,"content":"            "},{"type":"INSERT","lineNumber":212,"content":"            return horizontallyAdjacent || verticallyAdjacent;"},{"type":"INSERT","lineNumber":213,"content":"        }"},{"type":"INSERT","lineNumber":214,"content":""},{"type":"INSERT","lineNumber":215,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":216,"content":"        /// Gets the area of the room"},{"type":"INSERT","lineNumber":217,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":218,"content":"        public int GetArea()"},{"type":"INSERT","lineNumber":219,"content":"        {"},{"type":"INSERT","lineNumber":220,"content":"            return Width * Height;"},{"type":"INSERT","lineNumber":221,"content":"        }"},{"type":"INSERT","lineNumber":222,"content":""},{"type":"INSERT","lineNumber":223,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":224,"content":"        /// Checks if the room is valid (positive dimensions)"},{"type":"INSERT","lineNumber":225,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":226,"content":"        public bool IsValid()"},{"type":"INSERT","lineNumber":227,"content":"        {"},{"type":"INSERT","lineNumber":228,"content":"            return Width > 0 && Height > 0;"},{"type":"INSERT","lineNumber":229,"content":"        }"},{"type":"INSERT","lineNumber":230,"content":""},{"type":"INSERT","lineNumber":231,"content":"        public override string ToString()"},{"type":"INSERT","lineNumber":232,"content":"        {"},{"type":"INSERT","lineNumber":233,"content":"            return $\"Room {Id}: ({X}, {Y}) [{Width}x{Height}] - {Type}\";"},{"type":"INSERT","lineNumber":234,"content":"        }"},{"type":"INSERT","lineNumber":235,"content":""},{"type":"INSERT","lineNumber":236,"content":"        public override bool Equals(object obj)"},{"type":"INSERT","lineNumber":237,"content":"        {"},{"type":"INSERT","lineNumber":238,"content":"            if (obj is Room other)"},{"type":"INSERT","lineNumber":239,"content":"            {"},{"type":"INSERT","lineNumber":240,"content":"                return X == other.X && Y == other.Y && Width == other.Width && Height == other.Height;"},{"type":"INSERT","lineNumber":241,"content":"            }"},{"type":"INSERT","lineNumber":242,"content":"            return false;"},{"type":"INSERT","lineNumber":243,"content":"        }"},{"type":"INSERT","lineNumber":244,"content":""},{"type":"INSERT","lineNumber":245,"content":"        public override int GetHashCode()"},{"type":"INSERT","lineNumber":246,"content":"        {"},{"type":"INSERT","lineNumber":247,"content":"            return HashCode.Combine(X, Y, Width, Height);"},{"type":"INSERT","lineNumber":248,"content":"        }"},{"type":"INSERT","lineNumber":249,"content":"    }"},{"type":"INSERT","lineNumber":250,"content":""},{"type":"INSERT","lineNumber":251,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":252,"content":"    /// Types of rooms that can exist in the dungeon"},{"type":"INSERT","lineNumber":253,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":254,"content":"    public enum RoomType"},{"type":"INSERT","lineNumber":255,"content":"    {"},{"type":"INSERT","lineNumber":256,"content":"        Normal,"},{"type":"INSERT","lineNumber":257,"content":"        StartRoom,"},{"type":"INSERT","lineNumber":258,"content":"        EndRoom,"},{"type":"INSERT","lineNumber":259,"content":"        TreasureRoom,"},{"type":"INSERT","lineNumber":260,"content":"        BossRoom,"},{"type":"INSERT","lineNumber":261,"content":"        SecretRoom"},{"type":"INSERT","lineNumber":262,"content":"    }"}]},{"timestamp":1756230217851,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":9,"oldContent":"    }"},{"type":"INSERT","lineNumber":6,"content":""},{"type":"DELETE","lineNumber":11,"oldContent":"        SecretRoom"},{"type":"DELETE","lineNumber":12,"oldContent":"        BossRoom,"},{"type":"INSERT","lineNumber":8,"content":"{"},{"type":"DELETE","lineNumber":14,"oldContent":"        TreasureRoom,"},{"type":"DELETE","lineNumber":16,"oldContent":"        EndRoom,"},{"type":"DELETE","lineNumber":18,"oldContent":"        StartRoom,"},{"type":"DELETE","lineNumber":20,"oldContent":"        Normal,"},{"type":"DELETE","lineNumber":22,"oldContent":"    {"},{"type":"DELETE","lineNumber":24,"oldContent":"    public enum RoomType"},{"type":"DELETE","lineNumber":26,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":28,"oldContent":"    /// Types of rooms that can exist in the dungeon"},{"type":"DELETE","lineNumber":30,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":"    }"},{"type":"DELETE","lineNumber":36,"oldContent":"        }"},{"type":"DELETE","lineNumber":38,"oldContent":"            return HashCode.Combine(X, Y, Width, Height);"},{"type":"DELETE","lineNumber":40,"oldContent":"        {"},{"type":"DELETE","lineNumber":42,"oldContent":"        public override int GetHashCode()"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"        }"},{"type":"DELETE","lineNumber":48,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":50,"oldContent":"            }"},{"type":"DELETE","lineNumber":52,"oldContent":"                return X == other.X && Y == other.Y && Width == other.Width && Height == other.Height;"},{"type":"DELETE","lineNumber":54,"oldContent":"            {"},{"type":"DELETE","lineNumber":56,"oldContent":"            if (obj is Room other)"},{"type":"DELETE","lineNumber":58,"oldContent":"        {"},{"type":"DELETE","lineNumber":60,"oldContent":"        public override bool Equals(object obj)"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":"        }"},{"type":"DELETE","lineNumber":66,"oldContent":"            return $\"Room {Id}: ({X}, {Y}) [{Width}x{Height}] - {Type}\";"},{"type":"DELETE","lineNumber":68,"oldContent":"        {"},{"type":"DELETE","lineNumber":70,"oldContent":"        public override string ToString()"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":"        }"},{"type":"DELETE","lineNumber":76,"oldContent":"            return Width > 0 && Height > 0;"},{"type":"DELETE","lineNumber":78,"oldContent":"        {"},{"type":"DELETE","lineNumber":80,"oldContent":"        public bool IsValid()"},{"type":"DELETE","lineNumber":83,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":84,"oldContent":"        /// Checks if the room is valid (positive dimensions)"},{"type":"DELETE","lineNumber":86,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":90,"oldContent":"        }"},{"type":"DELETE","lineNumber":92,"oldContent":"            return Width * Height;"},{"type":"DELETE","lineNumber":94,"oldContent":"        {"},{"type":"DELETE","lineNumber":96,"oldContent":"        public int GetArea()"},{"type":"DELETE","lineNumber":98,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":100,"oldContent":"        /// Gets the area of the room"},{"type":"DELETE","lineNumber":102,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":106,"oldContent":"        }"},{"type":"DELETE","lineNumber":108,"oldContent":"            return horizontallyAdjacent || verticallyAdjacent;"},{"type":"DELETE","lineNumber":110,"oldContent":"            "},{"type":"DELETE","lineNumber":112,"oldContent":"                                     (X < other.X + other.Width && X + Width > other.X);"},{"type":"DELETE","lineNumber":114,"oldContent":"            bool verticallyAdjacent = (Y + Height == other.Y || other.Y + other.Height == Y) &&"},{"type":"DELETE","lineNumber":117,"oldContent":"            "},{"type":"DELETE","lineNumber":118,"oldContent":"                                       (Y < other.Y + other.Height && Y + Height > other.Y);"},{"type":"DELETE","lineNumber":120,"oldContent":"            bool horizontallyAdjacent = (X + Width == other.X || other.X + other.Width == X) &&"},{"type":"DELETE","lineNumber":122,"oldContent":"            // Check if rooms are touching but not overlapping"},{"type":"DELETE","lineNumber":124,"oldContent":"            "},{"type":"DELETE","lineNumber":126,"oldContent":"            if (other == null) return false;"},{"type":"DELETE","lineNumber":128,"oldContent":"        {"},{"type":"DELETE","lineNumber":130,"oldContent":"        public bool IsAdjacentTo(Room other)"},{"type":"DELETE","lineNumber":132,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":134,"oldContent":"        /// Checks if this room is adjacent to another room"},{"type":"DELETE","lineNumber":136,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":138,"oldContent":""},{"type":"DELETE","lineNumber":140,"oldContent":"        }"},{"type":"DELETE","lineNumber":142,"oldContent":"            return positions;"},{"type":"DELETE","lineNumber":144,"oldContent":"            "},{"type":"DELETE","lineNumber":146,"oldContent":"            }"},{"type":"DELETE","lineNumber":148,"oldContent":"                positions.Add(new Vector2(X + Width - 1, y)); // Right"},{"type":"DELETE","lineNumber":150,"oldContent":"                positions.Add(new Vector2(X, y)); // Left"},{"type":"DELETE","lineNumber":152,"oldContent":"            {"},{"type":"DELETE","lineNumber":154,"oldContent":"            for (int y = Y + 1; y < Y + Height - 1; y++)"},{"type":"DELETE","lineNumber":156,"oldContent":"            // Left and right edges (excluding corners already added)"},{"type":"DELETE","lineNumber":158,"oldContent":"            "},{"type":"DELETE","lineNumber":160,"oldContent":"            }"},{"type":"DELETE","lineNumber":162,"oldContent":"                positions.Add(new Vector2(x, Y + Height - 1)); // Bottom"},{"type":"DELETE","lineNumber":164,"oldContent":"                positions.Add(new Vector2(x, Y)); // Top"},{"type":"DELETE","lineNumber":166,"oldContent":"            {"},{"type":"DELETE","lineNumber":168,"oldContent":"            for (int x = X; x < X + Width; x++)"},{"type":"DELETE","lineNumber":170,"oldContent":"            // Top and bottom edges"},{"type":"DELETE","lineNumber":172,"oldContent":"            "},{"type":"DELETE","lineNumber":174,"oldContent":"            var positions = new List<Vector2>();"},{"type":"DELETE","lineNumber":176,"oldContent":"        {"},{"type":"DELETE","lineNumber":178,"oldContent":"        public List<Vector2> GetPerimeterPositions()"},{"type":"DELETE","lineNumber":180,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":182,"oldContent":"        /// Gets the perimeter positions of the room"},{"type":"DELETE","lineNumber":184,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":95,"content":"        "},{"type":"INSERT","lineNumber":96,"content":"        "},{"type":"DELETE","lineNumber":186,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"        }"},{"type":"DELETE","lineNumber":190,"oldContent":"            return positions;"},{"type":"DELETE","lineNumber":192,"oldContent":"            "},{"type":"DELETE","lineNumber":194,"oldContent":"            }"},{"type":"DELETE","lineNumber":196,"oldContent":"                }"},{"type":"DELETE","lineNumber":198,"oldContent":"                    positions.Add(new Vector2(x, y));"},{"type":"DELETE","lineNumber":200,"oldContent":"                {"},{"type":"DELETE","lineNumber":202,"oldContent":"                for (int y = Y; y < Y + Height; y++)"},{"type":"DELETE","lineNumber":205,"oldContent":"            {"},{"type":"DELETE","lineNumber":206,"oldContent":"            for (int x = X; x < X + Width; x++)"},{"type":"DELETE","lineNumber":208,"oldContent":"            "},{"type":"DELETE","lineNumber":210,"oldContent":"            var positions = new List<Vector2>();"},{"type":"DELETE","lineNumber":212,"oldContent":"        {"},{"type":"DELETE","lineNumber":214,"oldContent":"        public List<Vector2> GetAllFloorPositions()"},{"type":"DELETE","lineNumber":216,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":218,"oldContent":"        /// Gets all floor positions in this room"},{"type":"DELETE","lineNumber":220,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":222,"oldContent":""},{"type":"DELETE","lineNumber":224,"oldContent":"        }"},{"type":"DELETE","lineNumber":227,"oldContent":"            }"},{"type":"DELETE","lineNumber":228,"oldContent":"                Connections.Add(connectionPoint);"},{"type":"DELETE","lineNumber":230,"oldContent":"            {"},{"type":"DELETE","lineNumber":232,"oldContent":"            if (!Connections.Contains(connectionPoint))"},{"type":"DELETE","lineNumber":234,"oldContent":"        {"},{"type":"DELETE","lineNumber":236,"oldContent":"        public void AddConnection(Vector2 connectionPoint)"},{"type":"DELETE","lineNumber":238,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":240,"oldContent":"        /// Adds a connection point to another room"},{"type":"DELETE","lineNumber":242,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":244,"oldContent":""},{"type":"DELETE","lineNumber":247,"oldContent":"        }"},{"type":"DELETE","lineNumber":248,"oldContent":"            return new Vector2(x, y);"},{"type":"DELETE","lineNumber":250,"oldContent":"            "},{"type":"DELETE","lineNumber":252,"oldContent":"            float y = Math.Max(Y, Math.Min(otherCenter.Y, Y + Height - 1));"},{"type":"DELETE","lineNumber":254,"oldContent":"            float x = Math.Max(X, Math.Min(otherCenter.X, X + Width - 1));"},{"type":"DELETE","lineNumber":256,"oldContent":"            // Find closest point on edge"},{"type":"DELETE","lineNumber":258,"oldContent":"            "},{"type":"DELETE","lineNumber":260,"oldContent":"            var thisCenter = Center;"},{"type":"INSERT","lineNumber":136,"content":"            "},{"type":"INSERT","lineNumber":138,"content":"            var thisCenter = Center;"},{"type":"INSERT","lineNumber":140,"content":"            // Find closest point on edge"},{"type":"INSERT","lineNumber":141,"content":"            float x = Math.Max(X, Math.Min(otherCenter.X, X + Width - 1));"},{"type":"INSERT","lineNumber":142,"content":"            float y = Math.Max(Y, Math.Min(otherCenter.Y, Y + Height - 1));"},{"type":"INSERT","lineNumber":143,"content":"            "},{"type":"INSERT","lineNumber":144,"content":"            return new Vector2(x, y);"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":148,"content":"        /// Adds a connection point to another room"},{"type":"INSERT","lineNumber":149,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":150,"content":"        public void AddConnection(Vector2 connectionPoint)"},{"type":"INSERT","lineNumber":151,"content":"        {"},{"type":"INSERT","lineNumber":152,"content":"            if (!Connections.Contains(connectionPoint))"},{"type":"INSERT","lineNumber":153,"content":"            {"},{"type":"INSERT","lineNumber":154,"content":"                Connections.Add(connectionPoint);"},{"type":"INSERT","lineNumber":155,"content":"            }"},{"type":"INSERT","lineNumber":156,"content":"        }"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"INSERT","lineNumber":158,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":159,"content":"        /// Gets all floor positions in this room"},{"type":"INSERT","lineNumber":160,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":161,"content":"        public List<Vector2> GetAllFloorPositions()"},{"type":"INSERT","lineNumber":162,"content":"        {"},{"type":"INSERT","lineNumber":163,"content":"            var positions = new List<Vector2>();"},{"type":"INSERT","lineNumber":164,"content":"            "},{"type":"INSERT","lineNumber":165,"content":"            for (int x = X; x < X + Width; x++)"},{"type":"INSERT","lineNumber":166,"content":"            {"},{"type":"INSERT","lineNumber":167,"content":"                for (int y = Y; y < Y + Height; y++)"},{"type":"INSERT","lineNumber":168,"content":"                {"},{"type":"INSERT","lineNumber":169,"content":"                    positions.Add(new Vector2(x, y));"},{"type":"INSERT","lineNumber":170,"content":"                }"},{"type":"INSERT","lineNumber":171,"content":"            }"},{"type":"INSERT","lineNumber":172,"content":"            "},{"type":"INSERT","lineNumber":173,"content":"            return positions;"},{"type":"INSERT","lineNumber":174,"content":"        }"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":177,"content":"        /// Gets the perimeter positions of the room"},{"type":"INSERT","lineNumber":178,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":179,"content":"        public List<Vector2> GetPerimeterPositions()"},{"type":"INSERT","lineNumber":180,"content":"        {"},{"type":"INSERT","lineNumber":181,"content":"            var positions = new List<Vector2>();"},{"type":"INSERT","lineNumber":182,"content":"            "},{"type":"INSERT","lineNumber":183,"content":"            // Top and bottom edges"},{"type":"INSERT","lineNumber":184,"content":"            for (int x = X; x < X + Width; x++)"},{"type":"INSERT","lineNumber":185,"content":"            {"},{"type":"INSERT","lineNumber":186,"content":"                positions.Add(new Vector2(x, Y)); // Top"},{"type":"INSERT","lineNumber":187,"content":"                positions.Add(new Vector2(x, Y + Height - 1)); // Bottom"},{"type":"INSERT","lineNumber":188,"content":"            }"},{"type":"INSERT","lineNumber":189,"content":"            "},{"type":"INSERT","lineNumber":190,"content":"            // Left and right edges (excluding corners already added)"},{"type":"INSERT","lineNumber":191,"content":"            for (int y = Y + 1; y < Y + Height - 1; y++)"},{"type":"INSERT","lineNumber":192,"content":"            {"},{"type":"INSERT","lineNumber":193,"content":"                positions.Add(new Vector2(X, y)); // Left"},{"type":"INSERT","lineNumber":194,"content":"                positions.Add(new Vector2(X + Width - 1, y)); // Right"},{"type":"INSERT","lineNumber":195,"content":"            }"},{"type":"INSERT","lineNumber":196,"content":"            "},{"type":"INSERT","lineNumber":197,"content":"            return positions;"},{"type":"INSERT","lineNumber":198,"content":"        }"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":201,"content":"        /// Checks if this room is adjacent to another room"},{"type":"INSERT","lineNumber":202,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":203,"content":"        public bool IsAdjacentTo(Room other)"},{"type":"INSERT","lineNumber":204,"content":"        {"},{"type":"INSERT","lineNumber":205,"content":"            if (other == null) return false;"},{"type":"INSERT","lineNumber":206,"content":"            "},{"type":"INSERT","lineNumber":207,"content":"            // Check if rooms are touching but not overlapping"},{"type":"INSERT","lineNumber":208,"content":"            bool horizontallyAdjacent = (X + Width == other.X || other.X + other.Width == X) &&"},{"type":"INSERT","lineNumber":209,"content":"                                       (Y < other.Y + other.Height && Y + Height > other.Y);"},{"type":"INSERT","lineNumber":210,"content":"            "},{"type":"INSERT","lineNumber":211,"content":"            bool verticallyAdjacent = (Y + Height == other.Y || other.Y + other.Height == Y) &&"},{"type":"INSERT","lineNumber":212,"content":"                                     (X < other.X + other.Width && X + Width > other.X);"},{"type":"INSERT","lineNumber":213,"content":"            "},{"type":"INSERT","lineNumber":214,"content":"            return horizontallyAdjacent || verticallyAdjacent;"},{"type":"INSERT","lineNumber":215,"content":"        }"},{"type":"INSERT","lineNumber":216,"content":""},{"type":"INSERT","lineNumber":217,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":218,"content":"        /// Gets the area of the room"},{"type":"INSERT","lineNumber":219,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":220,"content":"        public int GetArea()"},{"type":"INSERT","lineNumber":221,"content":"        {"},{"type":"INSERT","lineNumber":222,"content":"            return Width * Height;"},{"type":"INSERT","lineNumber":223,"content":"        }"},{"type":"INSERT","lineNumber":224,"content":""},{"type":"INSERT","lineNumber":225,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":226,"content":"        /// Checks if the room is valid (positive dimensions)"},{"type":"INSERT","lineNumber":227,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":228,"content":"        public bool IsValid()"},{"type":"INSERT","lineNumber":229,"content":"        {"},{"type":"INSERT","lineNumber":230,"content":"            return Width > 0 && Height > 0;"},{"type":"INSERT","lineNumber":231,"content":"        }"},{"type":"INSERT","lineNumber":232,"content":""},{"type":"INSERT","lineNumber":233,"content":"        public override string ToString()"},{"type":"INSERT","lineNumber":234,"content":"        {"},{"type":"INSERT","lineNumber":235,"content":"            return $\"Room {Id}: ({X}, {Y}) [{Width}x{Height}] - {Type}\";"},{"type":"INSERT","lineNumber":236,"content":"        }"},{"type":"INSERT","lineNumber":237,"content":""},{"type":"INSERT","lineNumber":238,"content":"        public override bool Equals(object obj)"},{"type":"INSERT","lineNumber":239,"content":"        {"},{"type":"INSERT","lineNumber":240,"content":"            if (obj is Room other)"},{"type":"INSERT","lineNumber":241,"content":"            {"},{"type":"INSERT","lineNumber":242,"content":"                return X == other.X && Y == other.Y && Width == other.Width && Height == other.Height;"},{"type":"INSERT","lineNumber":243,"content":"            }"},{"type":"INSERT","lineNumber":244,"content":"            return false;"},{"type":"INSERT","lineNumber":245,"content":"        }"},{"type":"INSERT","lineNumber":246,"content":""},{"type":"INSERT","lineNumber":247,"content":"        public override int GetHashCode()"},{"type":"INSERT","lineNumber":248,"content":"        {"},{"type":"INSERT","lineNumber":249,"content":"            return HashCode.Combine(X, Y, Width, Height);"},{"type":"INSERT","lineNumber":250,"content":"        }"},{"type":"INSERT","lineNumber":251,"content":"    }"},{"type":"INSERT","lineNumber":252,"content":""},{"type":"INSERT","lineNumber":253,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":254,"content":"    /// Types of rooms that can exist in the dungeon"},{"type":"INSERT","lineNumber":255,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":256,"content":"    public enum RoomType"},{"type":"INSERT","lineNumber":257,"content":"    {"},{"type":"INSERT","lineNumber":258,"content":"        Normal,"},{"type":"INSERT","lineNumber":259,"content":"        StartRoom,"},{"type":"INSERT","lineNumber":260,"content":"        EndRoom,"},{"type":"INSERT","lineNumber":261,"content":"        TreasureRoom,"},{"type":"INSERT","lineNumber":262,"content":"        BossRoom,"},{"type":"INSERT","lineNumber":263,"content":"        SecretRoom"},{"type":"INSERT","lineNumber":264,"content":"    }"},{"type":"INSERT","lineNumber":265,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/DungeonExplorer.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/DungeonExplorer.cs","baseContent":"namespace DungeonExplorer.Systems;\n\npublic class DungeonExplorer\n{\n    \n}","baseTimestamp":1756228915445,"deltas":[{"timestamp":1756228920824,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using System;","oldContent":"namespace DungeonExplorer.Systems;"},{"type":"MODIFY","lineNumber":2,"content":"namespace DungeonExplorer.Core","oldContent":"public class DungeonExplorer"},{"type":"MODIFY","lineNumber":4,"content":"    /// <summary>","oldContent":"    "},{"type":"INSERT","lineNumber":5,"content":"    /// Gestisce lo stato generale del gioco, punteggi e statistiche"},{"type":"INSERT","lineNumber":6,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":7,"content":"    public class GameManager"},{"type":"INSERT","lineNumber":8,"content":"    {"},{"type":"INSERT","lineNumber":9,"content":"        public int Score { get; set; }"},{"type":"INSERT","lineNumber":10,"content":"        public int TreasuresCollected { get; set; }"},{"type":"INSERT","lineNumber":11,"content":"        public int EnemiesDefeated { get; set; }"},{"type":"INSERT","lineNumber":12,"content":"        public int CurrentLevel { get; set; }"},{"type":"INSERT","lineNumber":13,"content":"        public TimeSpan PlayTime { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        "},{"type":"INSERT","lineNumber":15,"content":"        public event Action<int> ScoreChanged;"},{"type":"INSERT","lineNumber":16,"content":"        public event Action<int> TreasureCollected;"},{"type":"INSERT","lineNumber":17,"content":"        public event Action<int> EnemyDefeated;"},{"type":"INSERT","lineNumber":18,"content":"        public event Action<int> LevelChanged;"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"        public GameManager()"},{"type":"INSERT","lineNumber":21,"content":"        {"},{"type":"INSERT","lineNumber":22,"content":"            Reset();"},{"type":"INSERT","lineNumber":23,"content":"        }"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":26,"content":"        /// Resetta tutti i valori del gioco"},{"type":"INSERT","lineNumber":27,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":28,"content":"        public void Reset()"},{"type":"INSERT","lineNumber":29,"content":"        {"},{"type":"INSERT","lineNumber":30,"content":"            Score = 0;"},{"type":"INSERT","lineNumber":31,"content":"            TreasuresCollected = 0;"},{"type":"INSERT","lineNumber":32,"content":"            EnemiesDefeated = 0;"},{"type":"INSERT","lineNumber":33,"content":"            CurrentLevel = 1;"},{"type":"INSERT","lineNumber":34,"content":"            PlayTime = TimeSpan.Zero;"},{"type":"INSERT","lineNumber":35,"content":"        }"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":38,"content":"        /// Aggiunge punti al punteggio"},{"type":"INSERT","lineNumber":39,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":40,"content":"        public void AddScore(int points)"},{"type":"INSERT","lineNumber":41,"content":"        {"},{"type":"INSERT","lineNumber":42,"content":"            Score += points;"},{"type":"INSERT","lineNumber":43,"content":"            ScoreChanged?.Invoke(Score);"},{"type":"INSERT","lineNumber":44,"content":"        }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":47,"content":"        /// Registra la raccolta di un tesoro"},{"type":"INSERT","lineNumber":48,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":49,"content":"        public void CollectTreasure(int value = 100)"},{"type":"INSERT","lineNumber":50,"content":"        {"},{"type":"INSERT","lineNumber":51,"content":"            TreasuresCollected++;"},{"type":"INSERT","lineNumber":52,"content":"            AddScore(value);"},{"type":"INSERT","lineNumber":53,"content":"            TreasureCollected?.Invoke(TreasuresCollected);"},{"type":"INSERT","lineNumber":54,"content":"        }"},{"type":"INSERT","lineNumber":55,"content":""},{"type":"INSERT","lineNumber":56,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":57,"content":"        /// Registra l'eliminazione di un nemico"},{"type":"INSERT","lineNumber":58,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":59,"content":"        public void DefeatEnemy(int points = 50)"},{"type":"INSERT","lineNumber":60,"content":"        {"},{"type":"INSERT","lineNumber":61,"content":"            EnemiesDefeated++;"},{"type":"INSERT","lineNumber":62,"content":"            AddScore(points);"},{"type":"INSERT","lineNumber":63,"content":"            EnemyDefeated?.Invoke(EnemiesDefeated);"},{"type":"INSERT","lineNumber":64,"content":"        }"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":67,"content":"        /// Avanza al livello successivo"},{"type":"INSERT","lineNumber":68,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":69,"content":"        public void NextLevel()"},{"type":"INSERT","lineNumber":70,"content":"        {"},{"type":"INSERT","lineNumber":71,"content":"            CurrentLevel++;"},{"type":"INSERT","lineNumber":72,"content":"            AddScore(CurrentLevel * 200); // Bonus per completare il livello"},{"type":"INSERT","lineNumber":73,"content":"            LevelChanged?.Invoke(CurrentLevel);"},{"type":"INSERT","lineNumber":74,"content":"        }"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"INSERT","lineNumber":76,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":77,"content":"        /// Aggiorna il tempo di gioco"},{"type":"INSERT","lineNumber":78,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":79,"content":"        public void UpdatePlayTime(TimeSpan deltaTime)"},{"type":"INSERT","lineNumber":80,"content":"        {"},{"type":"INSERT","lineNumber":81,"content":"            PlayTime = PlayTime.Add(deltaTime);"},{"type":"INSERT","lineNumber":82,"content":"        }"},{"type":"INSERT","lineNumber":83,"content":""},{"type":"INSERT","lineNumber":84,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":85,"content":"        /// Calcola il punteggio finale considerando vari fattori"},{"type":"INSERT","lineNumber":86,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":87,"content":"        public int CalculateFinalScore()"},{"type":"INSERT","lineNumber":88,"content":"        {"},{"type":"INSERT","lineNumber":89,"content":"            int timeBonus = Math.Max(0, 10000 - (int)PlayTime.TotalSeconds * 10);"},{"type":"INSERT","lineNumber":90,"content":"            int treasureBonus = TreasuresCollected * 150;"},{"type":"INSERT","lineNumber":91,"content":"            int enemyBonus = EnemiesDefeated * 75;"},{"type":"INSERT","lineNumber":92,"content":"            int levelBonus = CurrentLevel * 500;"},{"type":"INSERT","lineNumber":93,"content":"            "},{"type":"INSERT","lineNumber":94,"content":"            return Score + timeBonus + treasureBonus + enemyBonus + levelBonus;"},{"type":"INSERT","lineNumber":95,"content":"        }"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":97,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":98,"content":"        /// Ottiene statistiche di gioco formattate"},{"type":"INSERT","lineNumber":99,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":100,"content":"        public string GetFormattedStats()"},{"type":"INSERT","lineNumber":101,"content":"        {"},{"type":"INSERT","lineNumber":102,"content":"            return $\"Level: {CurrentLevel} | Score: {Score:N0} | \" +"},{"type":"INSERT","lineNumber":103,"content":"                   $\"Treasures: {TreasuresCollected} | Enemies: {EnemiesDefeated} | \" +"},{"type":"INSERT","lineNumber":104,"content":"                   $\"Time: {PlayTime:mm\\\\:ss}\";"},{"type":"INSERT","lineNumber":105,"content":"        }"},{"type":"INSERT","lineNumber":106,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Core/InputManager.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Core/InputManager.cs","baseContent":"using Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Input;\n\nnamespace DungeonExplorer.Core\n{\n    /// <summary>\n    /// Gestisce tutti gli input del gioco (tastiera, mouse)\n    /// </summary>\n    public class InputManager\n    {\n        private KeyboardState _currentKeyboardState;\n        private KeyboardState _previousKeyboardState;\n        private MouseState _currentMouseState;\n        private MouseState _previousMouseState;\n\n        public Vector2 MousePosition => _currentMouseState.Position.ToVector2();\n        public Vector2 MouseWorldPosition { get; private set; }\n\n        public InputManager()\n        {\n            _currentKeyboardState = Keyboard.GetState();\n            _previousKeyboardState = _currentKeyboardState;\n            _currentMouseState = Mouse.GetState();\n            _previousMouseState = _currentMouseState;\n        }\n\n        /// <summary>\n        /// Aggiorna gli stati di input\n        /// </summary>\n        public void Update()\n        {\n            _previousKeyboardState = _currentKeyboardState;\n            _currentKeyboardState = Keyboard.GetState();\n            \n            _previousMouseState = _currentMouseState;\n            _currentMouseState = Mouse.GetState();\n        }\n\n        /// <summary>\n        /// Aggiorna la posizione del mouse nel mondo (considerando la camera)\n        /// </summary>\n        public void UpdateMouseWorldPosition(Matrix cameraTransform)\n        {\n            Vector2 mouseScreen = MousePosition;\n            Matrix invertedTransform = Matrix.Invert(cameraTransform);\n            MouseWorldPosition = Vector2.Transform(mouseScreen, invertedTransform);\n        }\n\n        #region Keyboard Input\n\n        /// <summary>\n        /// Controlla se un tasto è attualmente premuto\n        /// </summary>\n        public bool IsKeyDown(Keys key)\n        {\n            return _currentKeyboardState.IsKeyDown(key);\n        }\n\n        /// <summary>\n        /// Controlla se un tasto è stato appena premuto (non era premuto nel frame precedente)\n        /// </summary>\n        public bool IsKeyPressed(Keys key)\n        {\n            return _currentKeyboardState.IsKeyDown(key) && !_previousKeyboardState.IsKeyDown(key);\n        }\n\n        /// <summary>\n        /// Controlla se un tasto è stato appena rilasciato\n        /// </summary>\n        public bool IsKeyReleased(Keys key)\n        {\n            return !_currentKeyboardState.IsKeyDown(key) && _previousKeyboardState.IsKeyDown(key);\n        }\n\n        /// <summary>\n        /// Ottiene la direzione di movimento basata sui tasti WASD\n        /// </summary>\n        public Vector2 GetMovementDirection()\n        {\n            Vector2 direction = Vector2.Zero;\n\n            if (IsKeyDown(Keys.W) || IsKeyDown(Keys.Up))\n                direction.Y -= 1;\n            if (IsKeyDown(Keys.S) || IsKeyDown(Keys.Down))\n                direction.Y += 1;\n            if (IsKeyDown(Keys.A) || IsKeyDown(Keys.Left))\n                direction.X -= 1;\n            if (IsKeyDown(Keys.D) || IsKeyDown(Keys.Right))\n                direction.X += 1;\n\n            // Normalizza per movimento diagonale uniforme\n            if (direction != Vector2.Zero)\n                direction.Normalize();\n\n            return direction;\n        }\n\n        /// <summary>\n        /// Controlla se vengono premuti tasti di movimento\n        /// </summary>\n        public bool IsMoving()\n        {\n            return IsKeyDown(Keys.W) || IsKeyDown(Keys.A) || \n                   IsKeyDown(Keys.S) || IsKeyDown(Keys.D) ||\n                   IsKeyDown(Keys.Up) || IsKeyDown(Keys.Down) ||\n                   IsKeyDown(Keys.Left) || IsKeyDown(Keys.Right);\n        }\n\n        #endregion\n\n        #region Mouse Input\n\n        /// <summary>\n        /// Controlla se un pulsante del mouse è premuto\n        /// </summary>\n        public bool IsMouseButtonDown(MouseButton button)\n        {\n            return button switch\n            {\n                MouseButton.Left => _currentMouseState.LeftButton == ButtonState.Pressed,\n                MouseButton.Right => _currentMouseState.RightButton == ButtonState.Pressed,\n                MouseButton.Middle => _currentMouseState.MiddleButton == ButtonState.Pressed,\n                _ => false\n            };\n        }\n\n        /// <summary>\n        /// Controlla se un pulsante del mouse è stato appena premuto\n        /// </summary>\n        public bool IsMouseButtonPressed(MouseButton button)\n        {\n            bool currentPressed = IsMouseButtonDown(button);\n            bool previousPressed = button switch\n            {\n                MouseButton.Left => _previousMouseState.LeftButton == ButtonState.Pressed,\n                MouseButton.Right => _previousMouseState.RightButton == ButtonState.Pressed,\n                MouseButton.Middle => _previousMouseState.MiddleButton == ButtonState.Pressed,\n                _ => false\n            };\n\n            return currentPressed && !previousPressed;\n        }\n\n        /// <summary>\n        /// Controlla se un pulsante del mouse è stato appena rilasciato\n        /// </summary>\n        public bool IsMouseButtonReleased(MouseButton button)\n        {\n            bool currentPressed = IsMouseButtonDown(button);\n            bool previousPressed = button switch\n            {\n                MouseButton.Left => _previousMouseState.LeftButton == ButtonState.Pressed,\n                MouseButton.Right => _previousMouseState.RightButton == ButtonState.Pressed,\n                MouseButton.Middle => _previousMouseState.MiddleButton == ButtonState.Pressed,\n                _ => false\n            };\n\n            return !currentPressed && previousPressed;\n        }\n\n        /// <summary>\n        /// Ottiene il movimento della rotella del mouse\n        /// </summary>\n        public int GetMouseWheelDelta()\n        {\n            return _currentMouseState.ScrollWheelValue - _previousMouseState.ScrollWheelValue;\n        }\n\n        /// <summary>\n        /// Ottiene il movimento del mouse tra i frame\n        /// </summary>\n        public Vector2 GetMouseDelta()\n        {\n            return MousePosition - _previousMouseState.Position.ToVector2();\n        }\n\n        #endregion\n    }\n\n    /// <summary>\n    /// Enumerazione per i pulsanti del mouse\n    /// </summary>\n    public enum MouseButton\n    {\n        Left,\n        Right,\n        Middle\n    }\n}","baseTimestamp":1756228939633},"C:/Users/tagli/RiderProjects/DungeonExplorer/Core/Camera2D.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Core/Camera2D.cs","baseContent":"using Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing System;\n\nnamespace DungeonExplorer.Core\n{\n    /// <summary>\n    /// Camera 2D con funzionalità di follow, zoom e smooth movement\n    /// </summary>\n    public class Camera2D\n    {\n        private Vector2 _position;\n        private Vector2 _targetPosition;\n        private float _zoom;\n        private float _rotation;\n        private Matrix _transform;\n        private bool _transformNeedsUpdate;\n\n        public Vector2 Position\n        {\n            get => _position;\n            set\n            {\n                _position = value;\n                _transformNeedsUpdate = true;\n            }\n        }\n\n        public float Zoom\n        {\n            get => _zoom;\n            set\n            {\n                _zoom = MathHelper.Clamp(value, MinZoom, MaxZoom);\n                _transformNeedsUpdate = true;\n            }\n        }\n\n        public float Rotation\n        {\n            get => _rotation;\n            set\n            {\n                _rotation = value;\n                _transformNeedsUpdate = true;\n            }\n        }\n\n        public Matrix Transform\n        {\n            get\n            {\n                if (_transformNeedsUpdate)\n                {\n                    UpdateTransform();\n                    _transformNeedsUpdate = false;\n                }\n                return _transform;\n            }\n        }\n\n        public Viewport Viewport { get; private set; }\n        public Vector2 Origin { get; private set; }\n        public Vector2 Center => Position + Origin;\n\n        // Proprietà per il movimento fluido\n        public float FollowSpeed { get; set; } = 5.0f;\n        public bool SmoothFollow { get; set; } = true;\n\n        // Limiti zoom\n        public float MinZoom { get; set; } = 0.5f;\n        public float MaxZoom { get; set; } = 3.0f;\n\n        // Limiti di movimento (opzionali)\n        public Rectangle? MovementBounds { get; set; }\n\n        public Camera2D(Viewport viewport)\n        {\n            Viewport = viewport;\n            Origin = new Vector2(viewport.Width * 0.5f, viewport.Height * 0.5f);\n            _position = Vector2.Zero;\n            _targetPosition = Vector2.Zero;\n            _zoom = 1.0f;\n            _rotation = 0.0f;\n            _transformNeedsUpdate = true;\n        }\n\n        /// <summary>\n        /// Aggiorna la camera\n        /// </summary>\n        public void Update(GameTime gameTime = null)\n        {\n            if (SmoothFollow && gameTime != null)\n            {\n                float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;\n                Vector2 difference = _targetPosition - _position;\n                \n                if (difference.LengthSquared() > 0.01f) // Evita micro-movimenti\n                {\n                    _position = Vector2.Lerp(_position, _targetPosition, FollowSpeed * deltaTime);\n                    _transformNeedsUpdate = true;\n                }\n            }\n\n            ApplyMovementBounds();\n        }\n\n        /// <summary>\n        /// Imposta la camera per seguire una posizione\n        /// </summary>\n        public void Follow(Vector2 targetPosition)\n        {\n            _targetPosition = targetPosition;\n            \n            if (!SmoothFollow)\n            {\n                Position = targetPosition;\n            }\n        }\n\n        /// <summary>\n        /// Centra immediatamente la camera su una posizione\n        /// </summary>\n        public void CenterOn(Vector2 position)\n        {\n            _targetPosition = position;\n            Position = position;\n        }\n\n        /// <summary>\n        /// Muove la camera di un offset\n        /// </summary>\n        public void Move(Vector2 offset)\n        {\n            _targetPosition += offset;\n            if (!SmoothFollow)\n            {\n                Position += offset;\n            }\n        }\n\n        /// <summary>\n        /// Imposta lo zoom con animazione fluida\n        /// </summary>\n        public void SetZoom(float targetZoom, float lerpSpeed = 0.1f)\n        {\n            targetZoom = MathHelper.Clamp(targetZoom, MinZoom, MaxZoom);\n            Zoom = MathHelper.Lerp(Zoom, targetZoom, lerpSpeed);\n        }\n\n        /// <summary>\n        /// Ruota la camera\n        /// </summary>\n        public void Rotate(float deltaRotation)\n        {\n            Rotation += deltaRotation;\n        }\n\n        /// <summary>\n        /// Converte coordinate schermo in coordinate mondo\n        /// </summary>\n        public Vector2 ScreenToWorld(Vector2 screenPosition)\n        {\n            Matrix invertedTransform = Matrix.Invert(Transform);\n            return Vector2.Transform(screenPosition, invertedTransform);\n        }\n\n        /// <summary>\n        /// Converte coordinate mondo in coordinate schermo\n        /// </summary>\n        public Vector2 WorldToScreen(Vector2 worldPosition)\n        {\n            return Vector2.Transform(worldPosition, Transform);\n        }\n\n        /// <summary>\n        /// Controlla se un punto del mondo è visibile nella camera\n        /// </summary>\n        public bool IsInView(Vector2 worldPosition, float margin = 0)\n        {\n            var screenPos = WorldToScreen(worldPosition);\n            return screenPos.X >= -margin && screenPos.X <= Viewport.Width + margin &&\n                   screenPos.Y >= -margin && screenPos.Y <= Viewport.Height + margin;\n        }\n\n        /// <summary>\n        /// Controlla se un rettangolo del mondo è visibile nella camera\n        /// </summary>\n        public bool IsInView(Rectangle worldBounds, float margin = 0)\n        {\n            var topLeft = WorldToScreen(new Vector2(worldBounds.Left, worldBounds.Top));\n            var bottomRight = WorldToScreen(new Vector2(worldBounds.Right, worldBounds.Bottom));\n\n            return topLeft.X <= Viewport.Width + margin && bottomRight.X >= -margin &&\n                   topLeft.Y <= Viewport.Height + margin && bottomRight.Y >= -margin;\n        }\n\n        /// <summary>\n        /// Ottiene i bounds del mondo visibili dalla camera\n        /// </summary>\n        public Rectangle GetVisibleArea()\n        {\n            var topLeft = ScreenToWorld(Vector2.Zero);\n            var bottomRight = ScreenToWorld(new Vector2(Viewport.Width, Viewport.Height));\n\n            return new Rectangle(\n                (int)topLeft.X,\n                (int)topLeft.Y,\n                (int)(bottomRight.X - topLeft.X),\n                (int)(bottomRight.Y - topLeft.Y)\n            );\n        }\n\n        /// <summary>\n        /// Scuote la camera per effetti di impatto\n        /// </summary>\n        public void Shake(float intensity, float duration)\n        {\n            // Implementazione base per camera shake\n            var random = new Random();\n            var offset = new Vector2(\n                (float)(random.NextDouble() - 0.5) * intensity,\n                (float)(random.NextDouble() - 0.5) * intensity\n            );\n            \n            Position += offset;\n        }\n\n        /// <summary>\n        /// Aggiorna la matrice di trasformazione\n        /// </summary>\n        private void UpdateTransform()\n        {\n            _transform = Matrix.CreateTranslation(-_position.X, -_position.Y, 0) *\n                        Matrix.CreateRotationZ(_rotation) *\n                        Matrix.CreateScale(_zoom) *\n                        Matrix.CreateTranslation(Origin.X, Origin.Y, 0);\n        }\n\n        /// <summary>\n        /// Applica i limiti di movimento se impostati\n        /// </summary>\n        private void ApplyMovementBounds()\n        {\n            if (MovementBounds.HasValue)\n            {\n                var bounds = MovementBounds.Value;\n                var visibleArea = GetVisibleArea();\n\n                // Calcola i limiti considerando le dimensioni dell'area visibile\n                float leftLimit = bounds.Left + visibleArea.Width * 0.5f;\n                float rightLimit = bounds.Right - visibleArea.Width * 0.5f;\n                float topLimit = bounds.Top + visibleArea.Height * 0.5f;\n                float bottomLimit = bounds.Bottom - visibleArea.Height * 0.5f;\n\n                // Applica i limiti alla posizione target e attuale\n                _targetPosition.X = MathHelper.Clamp(_targetPosition.X, leftLimit, rightLimit);\n                _targetPosition.Y = MathHelper.Clamp(_targetPosition.Y, topLimit, bottomLimit);\n                \n                _position.X = MathHelper.Clamp(_position.X, leftLimit, rightLimit);\n                _position.Y = MathHelper.Clamp(_position.Y, topLimit, bottomLimit);\n                \n                _transformNeedsUpdate = true;\n            }\n        }\n\n        /// <summary>\n        /// Aggiorna il viewport (da chiamare quando la finestra viene ridimensionata)\n        /// </summary>\n        public void UpdateViewport(Viewport newViewport)\n        {\n            Viewport = newViewport;\n            Origin = new Vector2(newViewport.Width * 0.5f, newViewport.Height * 0.5f);\n            _transformNeedsUpdate = true;\n        }\n    }\n}","baseTimestamp":1756228959393},"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/RenderSystem.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/RenderSystem.cs","baseContent":"namespace DungeonExplorer.Systems;\n\npublic class RenderSystem\n{\n    \n}","baseTimestamp":1756228980102,"deltas":[{"timestamp":1756229046206,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using Microsoft.Xna.Framework;","oldContent":"namespace DungeonExplorer.Systems;"},{"type":"INSERT","lineNumber":1,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":2,"content":"using DungeonExplorer.Core;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class RenderSystem"},{"type":"INSERT","lineNumber":4,"content":"namespace DungeonExplorer.Systems"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":6,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":7,"content":"    /// Sistema responsabile del movimento delle entità"},{"type":"INSERT","lineNumber":8,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":9,"content":"    public class MovementSystem"},{"type":"INSERT","lineNumber":10,"content":"    {"},{"type":"INSERT","lineNumber":11,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":12,"content":"        /// Aggiorna il movimento del giocatore basato sull'input"},{"type":"INSERT","lineNumber":13,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":14,"content":"        public void Update(GameTime gameTime, Player player, InputManager inputManager)"},{"type":"INSERT","lineNumber":15,"content":"        {"},{"type":"INSERT","lineNumber":16,"content":"            if (player?.Movement == null || player.Transform == null) return;"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":19,"content":"            Vector2 movementDirection = inputManager.GetMovementDirection();"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"            // Applica il movimento se il giocatore è vivo"},{"type":"INSERT","lineNumber":22,"content":"            if (player.Health.CurrentHealth > 0)"},{"type":"INSERT","lineNumber":23,"content":"            {"},{"type":"INSERT","lineNumber":24,"content":"                MoveEntity(player, movementDirection, deltaTime);"},{"type":"INSERT","lineNumber":25,"content":"            }"},{"type":"INSERT","lineNumber":26,"content":"        }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":29,"content":"        /// Muove un'entità nella direzione specificata"},{"type":"INSERT","lineNumber":30,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":31,"content":"        public void MoveEntity(Entity entity, Vector2 direction, float deltaTime)"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"            // Calcola la velocità effettiva considerando i modificatori"},{"type":"INSERT","lineNumber":36,"content":"            float currentSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"INSERT","lineNumber":37,"content":"            "},{"type":"INSERT","lineNumber":38,"content":"            // Calcola il movimento"},{"type":"INSERT","lineNumber":39,"content":"            Vector2 movement = direction * currentSpeed * deltaTime;"},{"type":"INSERT","lineNumber":40,"content":"            "},{"type":"INSERT","lineNumber":41,"content":"            // Applica il movimento"},{"type":"INSERT","lineNumber":42,"content":"            entity.Transform.Position += movement;"},{"type":"INSERT","lineNumber":43,"content":"            "},{"type":"INSERT","lineNumber":44,"content":"            // Aggiorna la direzione di movimento"},{"type":"INSERT","lineNumber":45,"content":"            if (direction != Vector2.Zero)"},{"type":"INSERT","lineNumber":46,"content":"            {"},{"type":"INSERT","lineNumber":47,"content":"                entity.Movement.LastDirection = direction;"},{"type":"INSERT","lineNumber":48,"content":"                entity.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":49,"content":"            }"},{"type":"INSERT","lineNumber":50,"content":"            else"},{"type":"INSERT","lineNumber":51,"content":"            {"},{"type":"INSERT","lineNumber":52,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":53,"content":"            }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"            // Aggiorna la rotazione se l'entità dovrebbe ruotare verso la direzione di movimento"},{"type":"INSERT","lineNumber":56,"content":"            if (entity.Movement.RotateTowardsMovement && direction != Vector2.Zero)"},{"type":"INSERT","lineNumber":57,"content":"            {"},{"type":"INSERT","lineNumber":58,"content":"                float targetRotation = (float)System.Math.Atan2(direction.Y, direction.X);"},{"type":"INSERT","lineNumber":59,"content":"                "},{"type":"INSERT","lineNumber":60,"content":"                if (entity.Movement.SmoothRotation)"},{"type":"INSERT","lineNumber":61,"content":"                {"},{"type":"INSERT","lineNumber":62,"content":"                    // Interpolazione fluida della rotazione"},{"type":"INSERT","lineNumber":63,"content":"                    float rotationSpeed = entity.Movement.RotationSpeed * deltaTime;"},{"type":"INSERT","lineNumber":64,"content":"                    entity.Transform.Rotation = LerpAngle(entity.Transform.Rotation, targetRotation, rotationSpeed);"},{"type":"INSERT","lineNumber":65,"content":"                }"},{"type":"INSERT","lineNumber":66,"content":"                else"},{"type":"INSERT","lineNumber":67,"content":"                {"},{"type":"INSERT","lineNumber":68,"content":"                    entity.Transform.Rotation = targetRotation;"},{"type":"INSERT","lineNumber":69,"content":"                }"},{"type":"INSERT","lineNumber":70,"content":"            }"},{"type":"INSERT","lineNumber":71,"content":"        }"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":74,"content":"        /// Muove un'entità verso una posizione target"},{"type":"INSERT","lineNumber":75,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":76,"content":"        public bool MoveTowardsTarget(Entity entity, Vector2 targetPosition, float deltaTime, float stoppingDistance = 0f)"},{"type":"INSERT","lineNumber":77,"content":"        {"},{"type":"INSERT","lineNumber":78,"content":"            if (entity?.Movement == null || entity.Transform == null) return false;"},{"type":"INSERT","lineNumber":79,"content":""},{"type":"INSERT","lineNumber":80,"content":"            Vector2 direction = targetPosition - entity.Transform.Position;"},{"type":"INSERT","lineNumber":81,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"            // Controlla se abbiamo raggiunto il target"},{"type":"INSERT","lineNumber":84,"content":"            if (distance <= stoppingDistance)"},{"type":"INSERT","lineNumber":85,"content":"            {"},{"type":"INSERT","lineNumber":86,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":87,"content":"                return true; // Target raggiunto"},{"type":"INSERT","lineNumber":88,"content":"            }"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"            // Normalizza la direzione"},{"type":"INSERT","lineNumber":91,"content":"            direction.Normalize();"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"            // Muovi verso il target"},{"type":"INSERT","lineNumber":94,"content":"            MoveEntity(entity, direction, deltaTime);"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"            return false; // Target non ancora raggiunto"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":100,"content":"        /// Applica una forza di knockback a un'entità"},{"type":"INSERT","lineNumber":101,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":102,"content":"        public void ApplyKnockback(Entity entity, Vector2 knockbackDirection, float force, float deltaTime)"},{"type":"INSERT","lineNumber":103,"content":"        {"},{"type":"INSERT","lineNumber":104,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"INSERT","lineNumber":106,"content":"            Vector2 knockbackMovement = knockbackDirection * force * deltaTime;"},{"type":"INSERT","lineNumber":107,"content":"            entity.Transform.Position += knockbackMovement;"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"            // Riduce gradualmente il knockback"},{"type":"INSERT","lineNumber":110,"content":"            entity.Movement.KnockbackForce *= 0.9f;"},{"type":"INSERT","lineNumber":111,"content":"            "},{"type":"INSERT","lineNumber":112,"content":"            if (entity.Movement.KnockbackForce < 0.1f)"},{"type":"INSERT","lineNumber":113,"content":"            {"},{"type":"INSERT","lineNumber":114,"content":"                entity.Movement.KnockbackForce = 0f;"},{"type":"INSERT","lineNumber":115,"content":"            }"},{"type":"INSERT","lineNumber":116,"content":"        }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":119,"content":"        /// Movimento con accelerazione e decelerazione"},{"type":"INSERT","lineNumber":120,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":121,"content":"        public void UpdateSmoothMovement(Entity entity, Vector2 targetDirection, float deltaTime)"},{"type":"INSERT","lineNumber":122,"content":"        {"},{"type":"INSERT","lineNumber":123,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"INSERT","lineNumber":125,"content":"            float acceleration = entity.Movement.Acceleration;"},{"type":"INSERT","lineNumber":126,"content":"            float deceleration = entity.Movement.Deceleration;"},{"type":"INSERT","lineNumber":127,"content":"            float maxSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"            // Calcola la velocità target"},{"type":"INSERT","lineNumber":130,"content":"            Vector2 targetVelocity = targetDirection * maxSpeed;"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"            // Interpola verso la velocità target"},{"type":"INSERT","lineNumber":133,"content":"            if (targetDirection != Vector2.Zero)"},{"type":"INSERT","lineNumber":134,"content":"            {"},{"type":"INSERT","lineNumber":135,"content":"                // Accelerazione"},{"type":"INSERT","lineNumber":136,"content":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"INSERT","lineNumber":137,"content":"                    entity.Movement.Velocity, "},{"type":"INSERT","lineNumber":138,"content":"                    targetVelocity, "},{"type":"INSERT","lineNumber":139,"content":"                    acceleration * deltaTime"},{"type":"INSERT","lineNumber":140,"content":"                );"},{"type":"INSERT","lineNumber":141,"content":"            }"},{"type":"INSERT","lineNumber":142,"content":"            else"},{"type":"INSERT","lineNumber":143,"content":"            {"},{"type":"INSERT","lineNumber":144,"content":"                // Decelerazione"},{"type":"INSERT","lineNumber":145,"content":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"INSERT","lineNumber":146,"content":"                    entity.Movement.Velocity, "},{"type":"INSERT","lineNumber":147,"content":"                    Vector2.Zero, "},{"type":"INSERT","lineNumber":148,"content":"                    deceleration * deltaTime"},{"type":"INSERT","lineNumber":149,"content":"                );"},{"type":"INSERT","lineNumber":150,"content":"            }"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"            // Applica la velocità alla posizione"},{"type":"INSERT","lineNumber":153,"content":"            entity.Transform.Position += entity.Movement.Velocity * deltaTime;"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"            // Aggiorna lo stato di movimento"},{"type":"INSERT","lineNumber":156,"content":"            entity.Movement.IsMoving = entity.Movement.Velocity.LengthSquared() > 0.01f;"},{"type":"INSERT","lineNumber":157,"content":"            "},{"type":"INSERT","lineNumber":158,"content":"            if (entity.Movement.IsMoving)"},{"type":"INSERT","lineNumber":159,"content":"            {"},{"type":"INSERT","lineNumber":160,"content":"                entity.Movement.LastDirection = Vector2.Normalize(entity.Movement.Velocity);"},{"type":"INSERT","lineNumber":161,"content":"            }"},{"type":"INSERT","lineNumber":162,"content":"        }"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"INSERT","lineNumber":164,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":165,"content":"        /// Movimento pattuglia tra due punti"},{"type":"INSERT","lineNumber":166,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":167,"content":"        public void UpdatePatrolMovement(Entity entity, Vector2 pointA, Vector2 pointB, float deltaTime)"},{"type":"INSERT","lineNumber":168,"content":"        {"},{"type":"INSERT","lineNumber":169,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":170,"content":""},{"type":"INSERT","lineNumber":171,"content":"            Vector2 currentTarget = entity.Movement.PatrolTargetA ? pointA : pointB;"},{"type":"INSERT","lineNumber":172,"content":"            "},{"type":"INSERT","lineNumber":173,"content":"            if (MoveTowardsTarget(entity, currentTarget, deltaTime, 5f))"},{"type":"INSERT","lineNumber":174,"content":"            {"},{"type":"INSERT","lineNumber":175,"content":"                // Cambia direzione quando raggiunge il target"},{"type":"INSERT","lineNumber":176,"content":"                entity.Movement.PatrolTargetA = !entity.Movement.PatrolTargetA;"},{"type":"INSERT","lineNumber":177,"content":"                "},{"type":"INSERT","lineNumber":178,"content":"                // Pausa opzionale al punto di pattuglia"},{"type":"INSERT","lineNumber":179,"content":"                entity.Movement.PatrolPauseTimer = entity.Movement.PatrolPauseDuration;"},{"type":"INSERT","lineNumber":180,"content":"            }"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"            // Gestisce la pausa"},{"type":"INSERT","lineNumber":183,"content":"            if (entity.Movement.PatrolPauseTimer > 0)"},{"type":"INSERT","lineNumber":184,"content":"            {"},{"type":"INSERT","lineNumber":185,"content":"                entity.Movement.PatrolPauseTimer -= deltaTime;"},{"type":"INSERT","lineNumber":186,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":187,"content":"            }"},{"type":"INSERT","lineNumber":188,"content":"        }"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":191,"content":"        /// Movimento circolare attorno a un punto"},{"type":"INSERT","lineNumber":192,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":193,"content":"        public void UpdateCircularMovement(Entity entity, Vector2 centerPoint, float radius, float angularSpeed, float deltaTime)"},{"type":"INSERT","lineNumber":194,"content":"        {"},{"type":"INSERT","lineNumber":195,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"            // Incrementa l'angolo"},{"type":"INSERT","lineNumber":198,"content":"            entity.Movement.CircularAngle += angularSpeed * deltaTime;"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"            // Calcola la nuova posizione"},{"type":"INSERT","lineNumber":201,"content":"            Vector2 offset = new Vector2("},{"type":"INSERT","lineNumber":202,"content":"                (float)System.Math.Cos(entity.Movement.CircularAngle) * radius,"},{"type":"INSERT","lineNumber":203,"content":"                (float)System.Math.Sin(entity.Movement.CircularAngle) * radius"},{"type":"INSERT","lineNumber":204,"content":"            );"},{"type":"INSERT","lineNumber":205,"content":""},{"type":"INSERT","lineNumber":206,"content":"            entity.Transform.Position = centerPoint + offset;"},{"type":"INSERT","lineNumber":207,"content":"            entity.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":208,"content":""},{"type":"INSERT","lineNumber":209,"content":"            // Aggiorna la direzione per il rendering"},{"type":"INSERT","lineNumber":210,"content":"            Vector2 tangent = new Vector2("},{"type":"INSERT","lineNumber":211,"content":"                -(float)System.Math.Sin(entity.Movement.CircularAngle),"},{"type":"INSERT","lineNumber":212,"content":"                (float)System.Math.Cos(entity.Movement.CircularAngle)"},{"type":"INSERT","lineNumber":213,"content":"            );"},{"type":"INSERT","lineNumber":214,"content":"            entity.Movement.LastDirection = tangent;"},{"type":"INSERT","lineNumber":215,"content":"        }"},{"type":"INSERT","lineNumber":216,"content":""},{"type":"INSERT","lineNumber":217,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":218,"content":"        /// Applica attrito al movimento"},{"type":"INSERT","lineNumber":219,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":220,"content":"        public void ApplyFriction(Entity entity, float frictionCoefficient, float deltaTime)"},{"type":"INSERT","lineNumber":221,"content":"        {"},{"type":"INSERT","lineNumber":222,"content":"            if (entity?.Movement == null) return;"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"            float friction = 1f - (frictionCoefficient * deltaTime);"},{"type":"INSERT","lineNumber":225,"content":"            friction = MathHelper.Max(0f, friction);"},{"type":"INSERT","lineNumber":226,"content":""},{"type":"INSERT","lineNumber":227,"content":"            entity.Movement.Velocity *= friction;"},{"type":"INSERT","lineNumber":228,"content":"        }"},{"type":"INSERT","lineNumber":229,"content":""},{"type":"INSERT","lineNumber":230,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":231,"content":"        /// Interpolazione angolare per rotazioni fluide"},{"type":"INSERT","lineNumber":232,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":233,"content":"        private float LerpAngle(float from, float to, float t)"},{"type":"INSERT","lineNumber":234,"content":"        {"},{"type":"INSERT","lineNumber":235,"content":"            float difference = to - from;"},{"type":"INSERT","lineNumber":236,"content":"            "},{"type":"INSERT","lineNumber":237,"content":"            // Normalizza la differenza per prendere il percorso più breve"},{"type":"INSERT","lineNumber":238,"content":"            while (difference > MathHelper.Pi)"},{"type":"INSERT","lineNumber":239,"content":"                difference -= MathHelper.TwoPi;"},{"type":"INSERT","lineNumber":240,"content":"            while (difference < -MathHelper.Pi)"},{"type":"INSERT","lineNumber":241,"content":"                difference += MathHelper.TwoPi;"},{"type":"INSERT","lineNumber":242,"content":""},{"type":"INSERT","lineNumber":243,"content":"            return from + difference * t;"},{"type":"INSERT","lineNumber":244,"content":"        }"},{"type":"INSERT","lineNumber":245,"content":""},{"type":"INSERT","lineNumber":246,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":247,"content":"        /// Controlla se un'entità può muoversi in una direzione (per prevenire movimenti non validi)"},{"type":"INSERT","lineNumber":248,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":249,"content":"        public bool CanMove(Entity entity, Vector2 direction, float distance = 1f)"},{"type":"INSERT","lineNumber":250,"content":"        {"},{"type":"INSERT","lineNumber":251,"content":"            if (entity?.Transform == null) return false;"},{"type":"INSERT","lineNumber":252,"content":""},{"type":"INSERT","lineNumber":253,"content":"            // Calcola la posizione futura"},{"type":"INSERT","lineNumber":254,"content":"            Vector2 futurePosition = entity.Transform.Position + direction * distance;"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"            // Qui potresti aggiungere controlli per collisioni o limiti del mondo"},{"type":"INSERT","lineNumber":257,"content":"            // Per ora ritorna sempre true"},{"type":"INSERT","lineNumber":258,"content":"            return true;"},{"type":"INSERT","lineNumber":259,"content":"        }"},{"type":"INSERT","lineNumber":260,"content":"    }"}]},{"timestamp":1756229050114,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"MODIFY","lineNumber":0,"content":"namespace DungeonExplorer.Systems;","oldContent":"using DungeonExplorer.Entities;"},{"type":"DELETE","lineNumber":3,"oldContent":"using DungeonExplorer.Core;"},{"type":"INSERT","lineNumber":2,"content":"public class RenderSystem"},{"type":"DELETE","lineNumber":5,"oldContent":"namespace DungeonExplorer.Systems"},{"type":"INSERT","lineNumber":4,"content":"    "},{"type":"DELETE","lineNumber":7,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":8,"oldContent":"    }"},{"type":"DELETE","lineNumber":9,"oldContent":"    /// Sistema responsabile del movimento delle entità"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":11,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":12,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":13,"oldContent":"    public class MovementSystem"},{"type":"DELETE","lineNumber":14,"oldContent":"            // Per ora ritorna sempre true"},{"type":"DELETE","lineNumber":15,"oldContent":"    {"},{"type":"DELETE","lineNumber":16,"oldContent":"            // Qui potresti aggiungere controlli per collisioni o limiti del mondo"},{"type":"DELETE","lineNumber":17,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"        /// Aggiorna il movimento del giocatore basato sull'input"},{"type":"DELETE","lineNumber":20,"oldContent":"            Vector2 futurePosition = entity.Transform.Position + direction * distance;"},{"type":"DELETE","lineNumber":21,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":22,"oldContent":"            // Calcola la posizione futura"},{"type":"DELETE","lineNumber":23,"oldContent":"        public void Update(GameTime gameTime, Player player, InputManager inputManager)"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":25,"oldContent":"        {"},{"type":"DELETE","lineNumber":26,"oldContent":"            if (entity?.Transform == null) return false;"},{"type":"DELETE","lineNumber":27,"oldContent":"            if (player?.Movement == null || player.Transform == null) return;"},{"type":"DELETE","lineNumber":28,"oldContent":"        {"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        public bool CanMove(Entity entity, Vector2 direction, float distance = 1f)"},{"type":"DELETE","lineNumber":31,"oldContent":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":32,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":33,"oldContent":"            Vector2 movementDirection = inputManager.GetMovementDirection();"},{"type":"DELETE","lineNumber":34,"oldContent":"        /// Controlla se un'entità può muoversi in una direzione (per prevenire movimenti non validi)"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":37,"oldContent":"            // Applica il movimento se il giocatore è vivo"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"            if (player.Health.CurrentHealth > 0)"},{"type":"DELETE","lineNumber":40,"oldContent":"        }"},{"type":"DELETE","lineNumber":41,"oldContent":"            {"},{"type":"DELETE","lineNumber":42,"oldContent":"            return from + difference * t;"},{"type":"DELETE","lineNumber":43,"oldContent":"                MoveEntity(player, movementDirection, deltaTime);"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":45,"oldContent":"            }"},{"type":"DELETE","lineNumber":46,"oldContent":"                difference += MathHelper.TwoPi;"},{"type":"DELETE","lineNumber":47,"oldContent":"        }"},{"type":"DELETE","lineNumber":48,"oldContent":"            while (difference < -MathHelper.Pi)"},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"                difference -= MathHelper.TwoPi;"},{"type":"DELETE","lineNumber":51,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":52,"oldContent":"            while (difference > MathHelper.Pi)"},{"type":"DELETE","lineNumber":53,"oldContent":"        /// Muove un'entità nella direzione specificata"},{"type":"DELETE","lineNumber":54,"oldContent":"            // Normalizza la differenza per prendere il percorso più breve"},{"type":"DELETE","lineNumber":55,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":56,"oldContent":"            "},{"type":"DELETE","lineNumber":57,"oldContent":"        public void MoveEntity(Entity entity, Vector2 direction, float deltaTime)"},{"type":"DELETE","lineNumber":58,"oldContent":"            float difference = to - from;"},{"type":"DELETE","lineNumber":59,"oldContent":"        {"},{"type":"DELETE","lineNumber":60,"oldContent":"        {"},{"type":"DELETE","lineNumber":61,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":62,"oldContent":"        private float LerpAngle(float from, float to, float t)"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":65,"oldContent":"            // Calcola la velocità effettiva considerando i modificatori"},{"type":"DELETE","lineNumber":66,"oldContent":"        /// Interpolazione angolare per rotazioni fluide"},{"type":"DELETE","lineNumber":67,"oldContent":"            float currentSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"DELETE","lineNumber":68,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":69,"oldContent":"            "},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"            // Calcola il movimento"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":73,"oldContent":"            Vector2 movement = direction * currentSpeed * deltaTime;"},{"type":"DELETE","lineNumber":74,"oldContent":"            entity.Movement.Velocity *= friction;"},{"type":"DELETE","lineNumber":75,"oldContent":"            "},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":77,"oldContent":"            // Applica il movimento"},{"type":"DELETE","lineNumber":78,"oldContent":"            friction = MathHelper.Max(0f, friction);"},{"type":"DELETE","lineNumber":79,"oldContent":"            entity.Transform.Position += movement;"},{"type":"DELETE","lineNumber":80,"oldContent":"            float friction = 1f - (frictionCoefficient * deltaTime);"},{"type":"DELETE","lineNumber":81,"oldContent":"            "},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"            // Aggiorna la direzione di movimento"},{"type":"DELETE","lineNumber":84,"oldContent":"            if (entity?.Movement == null) return;"},{"type":"DELETE","lineNumber":85,"oldContent":"            if (direction != Vector2.Zero)"},{"type":"DELETE","lineNumber":86,"oldContent":"        {"},{"type":"DELETE","lineNumber":87,"oldContent":"            {"},{"type":"DELETE","lineNumber":88,"oldContent":"        public void ApplyFriction(Entity entity, float frictionCoefficient, float deltaTime)"},{"type":"DELETE","lineNumber":89,"oldContent":"                entity.Movement.LastDirection = direction;"},{"type":"DELETE","lineNumber":90,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":91,"oldContent":"                entity.Movement.IsMoving = true;"},{"type":"DELETE","lineNumber":92,"oldContent":"        /// Applica attrito al movimento"},{"type":"DELETE","lineNumber":93,"oldContent":"            }"},{"type":"DELETE","lineNumber":94,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":95,"oldContent":"            else"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":97,"oldContent":"            {"},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":100,"oldContent":"            entity.Movement.LastDirection = tangent;"},{"type":"DELETE","lineNumber":101,"oldContent":"            }"},{"type":"DELETE","lineNumber":102,"oldContent":"            );"},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":104,"oldContent":"                (float)System.Math.Cos(entity.Movement.CircularAngle)"},{"type":"DELETE","lineNumber":105,"oldContent":"            // Aggiorna la rotazione se l'entità dovrebbe ruotare verso la direzione di movimento"},{"type":"DELETE","lineNumber":106,"oldContent":"                -(float)System.Math.Sin(entity.Movement.CircularAngle),"},{"type":"DELETE","lineNumber":107,"oldContent":"            if (entity.Movement.RotateTowardsMovement && direction != Vector2.Zero)"},{"type":"DELETE","lineNumber":108,"oldContent":"            Vector2 tangent = new Vector2("},{"type":"DELETE","lineNumber":109,"oldContent":"            {"},{"type":"DELETE","lineNumber":110,"oldContent":"            // Aggiorna la direzione per il rendering"},{"type":"DELETE","lineNumber":111,"oldContent":"                float targetRotation = (float)System.Math.Atan2(direction.Y, direction.X);"},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":113,"oldContent":"                "},{"type":"DELETE","lineNumber":114,"oldContent":"            entity.Movement.IsMoving = true;"},{"type":"DELETE","lineNumber":115,"oldContent":"                if (entity.Movement.SmoothRotation)"},{"type":"DELETE","lineNumber":116,"oldContent":"            entity.Transform.Position = centerPoint + offset;"},{"type":"DELETE","lineNumber":117,"oldContent":"                {"},{"type":"DELETE","lineNumber":118,"oldContent":""},{"type":"DELETE","lineNumber":119,"oldContent":"                    // Interpolazione fluida della rotazione"},{"type":"DELETE","lineNumber":120,"oldContent":"            );"},{"type":"DELETE","lineNumber":121,"oldContent":"                    float rotationSpeed = entity.Movement.RotationSpeed * deltaTime;"},{"type":"DELETE","lineNumber":122,"oldContent":"                (float)System.Math.Sin(entity.Movement.CircularAngle) * radius"},{"type":"DELETE","lineNumber":123,"oldContent":"                    entity.Transform.Rotation = LerpAngle(entity.Transform.Rotation, targetRotation, rotationSpeed);"},{"type":"DELETE","lineNumber":124,"oldContent":"                (float)System.Math.Cos(entity.Movement.CircularAngle) * radius,"},{"type":"DELETE","lineNumber":125,"oldContent":"                }"},{"type":"DELETE","lineNumber":126,"oldContent":"            Vector2 offset = new Vector2("},{"type":"DELETE","lineNumber":127,"oldContent":"                else"},{"type":"DELETE","lineNumber":128,"oldContent":"            // Calcola la nuova posizione"},{"type":"DELETE","lineNumber":129,"oldContent":"                {"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"                    entity.Transform.Rotation = targetRotation;"},{"type":"DELETE","lineNumber":132,"oldContent":"            entity.Movement.CircularAngle += angularSpeed * deltaTime;"},{"type":"DELETE","lineNumber":133,"oldContent":"                }"},{"type":"DELETE","lineNumber":134,"oldContent":"            // Incrementa l'angolo"},{"type":"DELETE","lineNumber":135,"oldContent":"            }"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"        }"},{"type":"DELETE","lineNumber":138,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":139,"oldContent":""},{"type":"DELETE","lineNumber":140,"oldContent":"        {"},{"type":"DELETE","lineNumber":141,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":142,"oldContent":"        public void UpdateCircularMovement(Entity entity, Vector2 centerPoint, float radius, float angularSpeed, float deltaTime)"},{"type":"DELETE","lineNumber":143,"oldContent":"        /// Muove un'entità verso una posizione target"},{"type":"DELETE","lineNumber":144,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":145,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":146,"oldContent":"        /// Movimento circolare attorno a un punto"},{"type":"DELETE","lineNumber":147,"oldContent":"        public bool MoveTowardsTarget(Entity entity, Vector2 targetPosition, float deltaTime, float stoppingDistance = 0f)"},{"type":"DELETE","lineNumber":148,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":149,"oldContent":"        {"},{"type":"DELETE","lineNumber":150,"oldContent":""},{"type":"DELETE","lineNumber":151,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return false;"},{"type":"DELETE","lineNumber":152,"oldContent":"        }"},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"DELETE","lineNumber":154,"oldContent":"            }"},{"type":"DELETE","lineNumber":155,"oldContent":"            Vector2 direction = targetPosition - entity.Transform.Position;"},{"type":"DELETE","lineNumber":156,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":157,"oldContent":"            float distance = direction.Length();"},{"type":"DELETE","lineNumber":158,"oldContent":"                entity.Movement.PatrolPauseTimer -= deltaTime;"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"DELETE","lineNumber":160,"oldContent":"            {"},{"type":"DELETE","lineNumber":161,"oldContent":"            // Controlla se abbiamo raggiunto il target"},{"type":"DELETE","lineNumber":162,"oldContent":"            if (entity.Movement.PatrolPauseTimer > 0)"},{"type":"DELETE","lineNumber":163,"oldContent":"            if (distance <= stoppingDistance)"},{"type":"DELETE","lineNumber":164,"oldContent":"            // Gestisce la pausa"},{"type":"DELETE","lineNumber":165,"oldContent":"            {"},{"type":"DELETE","lineNumber":166,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":168,"oldContent":"            }"},{"type":"DELETE","lineNumber":169,"oldContent":"                return true; // Target raggiunto"},{"type":"DELETE","lineNumber":170,"oldContent":"                entity.Movement.PatrolPauseTimer = entity.Movement.PatrolPauseDuration;"},{"type":"DELETE","lineNumber":171,"oldContent":"            }"},{"type":"DELETE","lineNumber":172,"oldContent":"                // Pausa opzionale al punto di pattuglia"},{"type":"DELETE","lineNumber":173,"oldContent":""},{"type":"DELETE","lineNumber":174,"oldContent":"                "},{"type":"DELETE","lineNumber":175,"oldContent":"            // Normalizza la direzione"},{"type":"DELETE","lineNumber":176,"oldContent":"                entity.Movement.PatrolTargetA = !entity.Movement.PatrolTargetA;"},{"type":"DELETE","lineNumber":177,"oldContent":"            direction.Normalize();"},{"type":"DELETE","lineNumber":178,"oldContent":"                // Cambia direzione quando raggiunge il target"},{"type":"DELETE","lineNumber":179,"oldContent":""},{"type":"DELETE","lineNumber":180,"oldContent":"            {"},{"type":"DELETE","lineNumber":181,"oldContent":"            // Muovi verso il target"},{"type":"DELETE","lineNumber":182,"oldContent":"            if (MoveTowardsTarget(entity, currentTarget, deltaTime, 5f))"},{"type":"DELETE","lineNumber":183,"oldContent":"            MoveEntity(entity, direction, deltaTime);"},{"type":"DELETE","lineNumber":184,"oldContent":"            "},{"type":"DELETE","lineNumber":185,"oldContent":""},{"type":"DELETE","lineNumber":186,"oldContent":"            Vector2 currentTarget = entity.Movement.PatrolTargetA ? pointA : pointB;"},{"type":"DELETE","lineNumber":187,"oldContent":"            return false; // Target non ancora raggiunto"},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"DELETE","lineNumber":189,"oldContent":"        }"},{"type":"DELETE","lineNumber":190,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":191,"oldContent":""},{"type":"DELETE","lineNumber":192,"oldContent":"        {"},{"type":"DELETE","lineNumber":193,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":194,"oldContent":"        public void UpdatePatrolMovement(Entity entity, Vector2 pointA, Vector2 pointB, float deltaTime)"},{"type":"DELETE","lineNumber":195,"oldContent":"        /// Applica una forza di knockback a un'entità"},{"type":"DELETE","lineNumber":196,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":197,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":198,"oldContent":"        /// Movimento pattuglia tra due punti"},{"type":"DELETE","lineNumber":199,"oldContent":"        public void ApplyKnockback(Entity entity, Vector2 knockbackDirection, float force, float deltaTime)"},{"type":"DELETE","lineNumber":200,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":201,"oldContent":"        {"},{"type":"DELETE","lineNumber":202,"oldContent":""},{"type":"DELETE","lineNumber":203,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":204,"oldContent":"        }"},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":206,"oldContent":"            }"},{"type":"DELETE","lineNumber":207,"oldContent":"            Vector2 knockbackMovement = knockbackDirection * force * deltaTime;"},{"type":"DELETE","lineNumber":208,"oldContent":"                entity.Movement.LastDirection = Vector2.Normalize(entity.Movement.Velocity);"},{"type":"DELETE","lineNumber":209,"oldContent":"            entity.Transform.Position += knockbackMovement;"},{"type":"DELETE","lineNumber":210,"oldContent":"            {"},{"type":"DELETE","lineNumber":211,"oldContent":""},{"type":"DELETE","lineNumber":212,"oldContent":"            if (entity.Movement.IsMoving)"},{"type":"DELETE","lineNumber":213,"oldContent":"            // Riduce gradualmente il knockback"},{"type":"DELETE","lineNumber":214,"oldContent":"            "},{"type":"DELETE","lineNumber":215,"oldContent":"            entity.Movement.KnockbackForce *= 0.9f;"},{"type":"DELETE","lineNumber":216,"oldContent":"            entity.Movement.IsMoving = entity.Movement.Velocity.LengthSquared() > 0.01f;"},{"type":"DELETE","lineNumber":217,"oldContent":"            "},{"type":"DELETE","lineNumber":218,"oldContent":"            // Aggiorna lo stato di movimento"},{"type":"DELETE","lineNumber":219,"oldContent":"            if (entity.Movement.KnockbackForce < 0.1f)"},{"type":"DELETE","lineNumber":220,"oldContent":""},{"type":"DELETE","lineNumber":221,"oldContent":"            {"},{"type":"DELETE","lineNumber":222,"oldContent":"            entity.Transform.Position += entity.Movement.Velocity * deltaTime;"},{"type":"DELETE","lineNumber":223,"oldContent":"                entity.Movement.KnockbackForce = 0f;"},{"type":"DELETE","lineNumber":224,"oldContent":"            // Applica la velocità alla posizione"},{"type":"DELETE","lineNumber":225,"oldContent":"            }"},{"type":"DELETE","lineNumber":226,"oldContent":""},{"type":"DELETE","lineNumber":227,"oldContent":"        }"},{"type":"DELETE","lineNumber":228,"oldContent":"            }"},{"type":"DELETE","lineNumber":229,"oldContent":""},{"type":"DELETE","lineNumber":230,"oldContent":"                );"},{"type":"DELETE","lineNumber":231,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":232,"oldContent":"                    deceleration * deltaTime"},{"type":"DELETE","lineNumber":233,"oldContent":"        /// Movimento con accelerazione e decelerazione"},{"type":"DELETE","lineNumber":234,"oldContent":"                    Vector2.Zero, "},{"type":"DELETE","lineNumber":235,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":236,"oldContent":"                    entity.Movement.Velocity, "},{"type":"DELETE","lineNumber":237,"oldContent":"        public void UpdateSmoothMovement(Entity entity, Vector2 targetDirection, float deltaTime)"},{"type":"DELETE","lineNumber":238,"oldContent":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"DELETE","lineNumber":239,"oldContent":"        {"},{"type":"DELETE","lineNumber":240,"oldContent":"                // Decelerazione"},{"type":"DELETE","lineNumber":241,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":242,"oldContent":"            {"},{"type":"DELETE","lineNumber":243,"oldContent":""},{"type":"DELETE","lineNumber":244,"oldContent":"            else"},{"type":"DELETE","lineNumber":245,"oldContent":"            float acceleration = entity.Movement.Acceleration;"},{"type":"DELETE","lineNumber":246,"oldContent":"            }"},{"type":"DELETE","lineNumber":247,"oldContent":"            float deceleration = entity.Movement.Deceleration;"},{"type":"DELETE","lineNumber":248,"oldContent":"                );"},{"type":"DELETE","lineNumber":249,"oldContent":"            float maxSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"DELETE","lineNumber":250,"oldContent":"                    acceleration * deltaTime"},{"type":"DELETE","lineNumber":251,"oldContent":""},{"type":"DELETE","lineNumber":252,"oldContent":"                    targetVelocity, "},{"type":"DELETE","lineNumber":253,"oldContent":"            // Calcola la velocità target"},{"type":"DELETE","lineNumber":254,"oldContent":"                    entity.Movement.Velocity, "},{"type":"DELETE","lineNumber":255,"oldContent":"            Vector2 targetVelocity = targetDirection * maxSpeed;"},{"type":"DELETE","lineNumber":256,"oldContent":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"DELETE","lineNumber":257,"oldContent":""},{"type":"DELETE","lineNumber":258,"oldContent":"                // Accelerazione"},{"type":"DELETE","lineNumber":259,"oldContent":"            // Interpola verso la velocità target"},{"type":"DELETE","lineNumber":260,"oldContent":"            {"},{"type":"DELETE","lineNumber":261,"oldContent":"            if (targetDirection != Vector2.Zero)"}]},{"timestamp":1756229160648,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"namespace DungeonExplorer.Systems;"},{"type":"DELETE","lineNumber":1,"oldContent":"public class RenderSystem"},{"type":"INSERT","lineNumber":0,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":1,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":2,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":3,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":4,"content":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":3,"oldContent":"    "},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.Systems"},{"type":"DELETE","lineNumber":5,"oldContent":"}"},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Sistema responsabile del rendering di tutte le entità e del mondo"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public class RenderSystem"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        private const int TILE_SIZE = 32;"},{"type":"INSERT","lineNumber":14,"content":""},{"type":"INSERT","lineNumber":15,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":16,"content":"        /// Renderizza una singola entità"},{"type":"INSERT","lineNumber":17,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":18,"content":"        public void RenderEntity(SpriteBatch spriteBatch, Entity entity)"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            if (entity?.Render?.Texture != null && entity.Transform != null)"},{"type":"INSERT","lineNumber":21,"content":"            {"},{"type":"INSERT","lineNumber":22,"content":"                var color = entity.Render.Color;"},{"type":"INSERT","lineNumber":23,"content":"                var origin = entity.Render.Origin;"},{"type":"INSERT","lineNumber":24,"content":"                var scale = entity.Transform.Scale;"},{"type":"INSERT","lineNumber":25,"content":"                var rotation = entity.Transform.Rotation;"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"                spriteBatch.Draw("},{"type":"INSERT","lineNumber":28,"content":"                    entity.Render.Texture,"},{"type":"INSERT","lineNumber":29,"content":"                    entity.Transform.Position,"},{"type":"INSERT","lineNumber":30,"content":"                    null,"},{"type":"INSERT","lineNumber":31,"content":"                    color,"},{"type":"INSERT","lineNumber":32,"content":"                    rotation,"},{"type":"INSERT","lineNumber":33,"content":"                    origin,"},{"type":"INSERT","lineNumber":34,"content":"                    scale,"},{"type":"INSERT","lineNumber":35,"content":"                    SpriteEffects.None,"},{"type":"INSERT","lineNumber":36,"content":"                    entity.Render.LayerDepth"},{"type":"INSERT","lineNumber":37,"content":"                );"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"                // Render health bar per entità che hanno salute"},{"type":"INSERT","lineNumber":40,"content":"                if (entity.Health != null && entity.Health.CurrentHealth < entity.Health.MaxHealth)"},{"type":"INSERT","lineNumber":41,"content":"                {"},{"type":"INSERT","lineNumber":42,"content":"                    RenderHealthBar(spriteBatch, entity);"},{"type":"INSERT","lineNumber":43,"content":"                }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":45,"content":"                // Debug rendering se abilitato"},{"type":"INSERT","lineNumber":46,"content":"                if (entity.Render.ShowDebugInfo)"},{"type":"INSERT","lineNumber":47,"content":"                {"},{"type":"INSERT","lineNumber":48,"content":"                    RenderEntityDebugInfo(spriteBatch, entity);"},{"type":"INSERT","lineNumber":49,"content":"                }"},{"type":"INSERT","lineNumber":50,"content":"            }"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":53,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":54,"content":"        /// Renderizza il dungeon completo"},{"type":"INSERT","lineNumber":55,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":56,"content":"        public void RenderDungeon(SpriteBatch spriteBatch, Dungeon dungeon, Dictionary<string, Texture2D> textures)"},{"type":"INSERT","lineNumber":57,"content":"        {"},{"type":"INSERT","lineNumber":58,"content":"            if (dungeon?.Tiles == null) return;"},{"type":"INSERT","lineNumber":59,"content":""},{"type":"INSERT","lineNumber":60,"content":"            int width = dungeon.Width;"},{"type":"INSERT","lineNumber":61,"content":"            int height = dungeon.Height;"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"            for (int x = 0; x < width; x++)"},{"type":"INSERT","lineNumber":64,"content":"            {"},{"type":"INSERT","lineNumber":65,"content":"                for (int y = 0; y < height; y++)"},{"type":"INSERT","lineNumber":66,"content":"                {"},{"type":"INSERT","lineNumber":67,"content":"                    var tile = dungeon.Tiles[x, y];"},{"type":"INSERT","lineNumber":68,"content":"                    RenderTile(spriteBatch, tile, x, y, textures);"},{"type":"INSERT","lineNumber":69,"content":"                }"},{"type":"INSERT","lineNumber":70,"content":"            }"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"            // Render room debug info se abilitato"},{"type":"INSERT","lineNumber":73,"content":"            if (dungeon.ShowDebugInfo)"},{"type":"INSERT","lineNumber":74,"content":"            {"},{"type":"INSERT","lineNumber":75,"content":"                RenderDungeonDebugInfo(spriteBatch, dungeon);"},{"type":"INSERT","lineNumber":76,"content":"            }"},{"type":"INSERT","lineNumber":77,"content":"        }"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":80,"content":"        /// Renderizza un singolo tile"},{"type":"INSERT","lineNumber":81,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":82,"content":"        private void RenderTile(SpriteBatch spriteBatch, Tile tile, int x, int y, Dictionary<string, Texture2D> textures)"},{"type":"INSERT","lineNumber":83,"content":"        {"},{"type":"INSERT","lineNumber":84,"content":"            if (tile == null) return;"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"INSERT","lineNumber":86,"content":"            var position = new Vector2(x * TILE_SIZE, y * TILE_SIZE);"},{"type":"INSERT","lineNumber":87,"content":"            Texture2D texture = null;"},{"type":"INSERT","lineNumber":88,"content":"            Color color = Color.White;"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"            // Determina la texture basata sul tipo di tile"},{"type":"INSERT","lineNumber":91,"content":"            switch (tile.Type)"},{"type":"INSERT","lineNumber":92,"content":"            {"},{"type":"INSERT","lineNumber":93,"content":"                case TileType.Floor:"},{"type":"INSERT","lineNumber":94,"content":"                    texture = textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null;"},{"type":"INSERT","lineNumber":95,"content":"                    break;"},{"type":"INSERT","lineNumber":96,"content":"                case TileType.Wall:"},{"type":"INSERT","lineNumber":97,"content":"                    texture = textures.ContainsKey(\"wall\") ? textures[\"wall\"] : null;"},{"type":"INSERT","lineNumber":98,"content":"                    break;"},{"type":"INSERT","lineNumber":99,"content":"                case TileType.Door:"},{"type":"INSERT","lineNumber":100,"content":"                    texture = textures.ContainsKey(\"door\") ? textures[\"door\"] : "},{"type":"INSERT","lineNumber":101,"content":"                             (textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null);"},{"type":"INSERT","lineNumber":102,"content":"                    color = Color.Brown;"},{"type":"INSERT","lineNumber":103,"content":"                    break;"},{"type":"INSERT","lineNumber":104,"content":"                default:"},{"type":"INSERT","lineNumber":105,"content":"                    return; // Non renderizza tile vuoti"},{"type":"INSERT","lineNumber":106,"content":"            }"},{"type":"INSERT","lineNumber":107,"content":""},{"type":"INSERT","lineNumber":108,"content":"            if (texture != null)"},{"type":"INSERT","lineNumber":109,"content":"            {"},{"type":"INSERT","lineNumber":110,"content":"                spriteBatch.Draw(texture, position, color);"},{"type":"INSERT","lineNumber":111,"content":"            }"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"            // Rendering speciale per tile speciali"},{"type":"INSERT","lineNumber":114,"content":"            if (tile.IsStartPosition)"},{"type":"INSERT","lineNumber":115,"content":"            {"},{"type":"INSERT","lineNumber":116,"content":"                // Indica la posizione di partenza con un overlay verde"},{"type":"INSERT","lineNumber":117,"content":"                spriteBatch.Draw(texture, position, Color.Green * 0.3f);"},{"type":"INSERT","lineNumber":118,"content":"            }"},{"type":"INSERT","lineNumber":119,"content":"            else if (tile.IsEndPosition)"},{"type":"INSERT","lineNumber":120,"content":"            {"},{"type":"INSERT","lineNumber":121,"content":"                // Indica la posizione finale con un overlay rosso"},{"type":"INSERT","lineNumber":122,"content":"                spriteBatch.Draw(texture, position, Color.Red * 0.3f);"},{"type":"INSERT","lineNumber":123,"content":"            }"},{"type":"INSERT","lineNumber":124,"content":"        }"},{"type":"INSERT","lineNumber":125,"content":""},{"type":"INSERT","lineNumber":126,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":127,"content":"        /// Renderizza la barra della salute di un'entità"},{"type":"INSERT","lineNumber":128,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":129,"content":"        private void RenderHealthBar(SpriteBatch spriteBatch, Entity entity)"},{"type":"INSERT","lineNumber":130,"content":"        {"},{"type":"INSERT","lineNumber":131,"content":"            if (entity.Health == null) return;"},{"type":"INSERT","lineNumber":132,"content":""},{"type":"INSERT","lineNumber":133,"content":"            var position = entity.Transform.Position;"},{"type":"INSERT","lineNumber":134,"content":"            var healthBarWidth = 30;"},{"type":"INSERT","lineNumber":135,"content":"            var healthBarHeight = 4;"},{"type":"INSERT","lineNumber":136,"content":"            var healthBarOffset = new Vector2(-healthBarWidth * 0.5f, -40);"},{"type":"INSERT","lineNumber":137,"content":""},{"type":"INSERT","lineNumber":138,"content":"            var healthBarPosition = position + healthBarOffset;"},{"type":"INSERT","lineNumber":139,"content":"            var healthPercentage = (float)entity.Health.CurrentHealth / entity.Health.MaxHealth;"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"            // Background della barra (rosso)"},{"type":"INSERT","lineNumber":142,"content":"            var backgroundRect = new Rectangle("},{"type":"INSERT","lineNumber":143,"content":"                (int)healthBarPosition.X,"},{"type":"INSERT","lineNumber":144,"content":"                (int)healthBarPosition.Y,"},{"type":"INSERT","lineNumber":145,"content":"                healthBarWidth,"},{"type":"INSERT","lineNumber":146,"content":"                healthBarHeight"},{"type":"INSERT","lineNumber":147,"content":"            );"},{"type":"INSERT","lineNumber":148,"content":""},{"type":"INSERT","lineNumber":149,"content":"            // Barra della salute (verde/giallo/rosso basato sulla percentuale)"},{"type":"INSERT","lineNumber":150,"content":"            var healthRect = new Rectangle("},{"type":"INSERT","lineNumber":151,"content":"                (int)healthBarPosition.X,"},{"type":"INSERT","lineNumber":152,"content":"                (int)healthBarPosition.Y,"},{"type":"INSERT","lineNumber":153,"content":"                (int)(healthBarWidth * healthPercentage),"},{"type":"INSERT","lineNumber":154,"content":"                healthBarHeight"},{"type":"INSERT","lineNumber":155,"content":"            );"},{"type":"INSERT","lineNumber":156,"content":""},{"type":"INSERT","lineNumber":157,"content":"            Color healthColor = Color.Green;"},{"type":"INSERT","lineNumber":158,"content":"            if (healthPercentage < 0.3f)"},{"type":"INSERT","lineNumber":159,"content":"                healthColor = Color.Red;"},{"type":"INSERT","lineNumber":160,"content":"            else if (healthPercentage < 0.6f)"},{"type":"INSERT","lineNumber":161,"content":"                healthColor = Color.Yellow;"},{"type":"INSERT","lineNumber":162,"content":""},{"type":"INSERT","lineNumber":163,"content":"            // Crea texture pixel se non disponibile (metodo helper)"},{"type":"INSERT","lineNumber":164,"content":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"INSERT","lineNumber":165,"content":"            "},{"type":"INSERT","lineNumber":166,"content":"            spriteBatch.Draw(pixelTexture, backgroundRect, Color.DarkRed);"},{"type":"INSERT","lineNumber":167,"content":"            spriteBatch.Draw(pixelTexture, healthRect, healthColor);"},{"type":"INSERT","lineNumber":168,"content":"        }"},{"type":"INSERT","lineNumber":169,"content":""},{"type":"INSERT","lineNumber":170,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":171,"content":"        /// Renderizza informazioni di debug per un'entità"},{"type":"INSERT","lineNumber":172,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":173,"content":"        private void RenderEntityDebugInfo(SpriteBatch spriteBatch, Entity entity)"},{"type":"INSERT","lineNumber":174,"content":"        {"},{"type":"INSERT","lineNumber":175,"content":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"INSERT","lineNumber":176,"content":"            "},{"type":"INSERT","lineNumber":177,"content":"            // Bounding box"},{"type":"INSERT","lineNumber":178,"content":"            var bounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":179,"content":"            var boundsColor = Color.Yellow * 0.5f;"},{"type":"INSERT","lineNumber":180,"content":"            "},{"type":"INSERT","lineNumber":181,"content":"            // Top"},{"type":"INSERT","lineNumber":182,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, bounds.Width, 1), boundsColor);"},{"type":"INSERT","lineNumber":183,"content":"            // Bottom"},{"type":"INSERT","lineNumber":184,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Bottom - 1, bounds.Width, 1), boundsColor);"},{"type":"INSERT","lineNumber":185,"content":"            // Left"},{"type":"INSERT","lineNumber":186,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"INSERT","lineNumber":187,"content":"            // Right"},{"type":"INSERT","lineNumber":188,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Right - 1, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"            // Centro dell'entità"},{"type":"INSERT","lineNumber":191,"content":"            var center = entity.Transform.Position;"},{"type":"INSERT","lineNumber":192,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle((int)center.X - 2, (int)center.Y - 2, 4, 4), Color.Red);"},{"type":"INSERT","lineNumber":193,"content":"        }"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"INSERT","lineNumber":195,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":196,"content":"        /// Renderizza informazioni di debug per il dungeon"},{"type":"INSERT","lineNumber":197,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":198,"content":"        private void RenderDungeonDebugInfo(SpriteBatch spriteBatch, Dungeon dungeon)"},{"type":"INSERT","lineNumber":199,"content":"        {"},{"type":"INSERT","lineNumber":200,"content":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"INSERT","lineNumber":201,"content":"            "},{"type":"INSERT","lineNumber":202,"content":"            // Renderizza i contorni delle stanze"},{"type":"INSERT","lineNumber":203,"content":"            foreach (var room in dungeon.GetRooms())"},{"type":"INSERT","lineNumber":204,"content":"            {"},{"type":"INSERT","lineNumber":205,"content":"                var roomBounds = new Rectangle("},{"type":"INSERT","lineNumber":206,"content":"                    room.X * TILE_SIZE,"},{"type":"INSERT","lineNumber":207,"content":"                    room.Y * TILE_SIZE,"},{"type":"INSERT","lineNumber":208,"content":"                    room.Width * TILE_SIZE,"},{"type":"INSERT","lineNumber":209,"content":"                    room.Height * TILE_SIZE"},{"type":"INSERT","lineNumber":210,"content":"                );"},{"type":"INSERT","lineNumber":211,"content":""},{"type":"INSERT","lineNumber":212,"content":"                var outlineColor = Color.Cyan * 0.7f;"},{"type":"INSERT","lineNumber":213,"content":"                "},{"type":"INSERT","lineNumber":214,"content":"                // Top"},{"type":"INSERT","lineNumber":215,"content":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, roomBounds.Width, 2), outlineColor);"},{"type":"INSERT","lineNumber":216,"content":"                // Bottom"},{"type":"INSERT","lineNumber":217,"content":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Bottom - 2, roomBounds.Width, 2), outlineColor);"},{"type":"INSERT","lineNumber":218,"content":"                // Left"},{"type":"INSERT","lineNumber":219,"content":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, 2, roomBounds.Height), outlineColor);"},{"type":"INSERT","lineNumber":220,"content":"                // Right"},{"type":"INSERT","lineNumber":221,"content":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Right - 2, roomBounds.Top, 2, roomBounds.Height), outlineColor);"},{"type":"INSERT","lineNumber":222,"content":"            }"},{"type":"INSERT","lineNumber":223,"content":"        }"},{"type":"INSERT","lineNumber":224,"content":""},{"type":"INSERT","lineNumber":225,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":226,"content":"        /// Renderizza un'entità con effetti speciali"},{"type":"INSERT","lineNumber":227,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":228,"content":"        public void RenderEntityWithEffects(SpriteBatch spriteBatch, Entity entity, Color? tintColor = null, float flashIntensity = 0f)"},{"type":"INSERT","lineNumber":229,"content":"        {"},{"type":"INSERT","lineNumber":230,"content":"            if (entity?.Render?.Texture == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":231,"content":""},{"type":"INSERT","lineNumber":232,"content":"            Color finalColor = entity.Render.Color;"},{"type":"INSERT","lineNumber":233,"content":"            "},{"type":"INSERT","lineNumber":234,"content":"            // Applica tint color se specificato"},{"type":"INSERT","lineNumber":235,"content":"            if (tintColor.HasValue)"},{"type":"INSERT","lineNumber":236,"content":"            {"},{"type":"INSERT","lineNumber":237,"content":"                finalColor = Color.Lerp(finalColor, tintColor.Value, 0.5f);"},{"type":"INSERT","lineNumber":238,"content":"            }"},{"type":"INSERT","lineNumber":239,"content":""},{"type":"INSERT","lineNumber":240,"content":"            // Applica effetto flash"},{"type":"INSERT","lineNumber":241,"content":"            if (flashIntensity > 0)"},{"type":"INSERT","lineNumber":242,"content":"            {"},{"type":"INSERT","lineNumber":243,"content":"                finalColor = Color.Lerp(finalColor, Color.White, flashIntensity);"},{"type":"INSERT","lineNumber":244,"content":"            }"},{"type":"INSERT","lineNumber":245,"content":""},{"type":"INSERT","lineNumber":246,"content":"            var origin = entity.Render.Origin;"},{"type":"INSERT","lineNumber":247,"content":"            var scale = entity.Transform.Scale;"},{"type":"INSERT","lineNumber":248,"content":"            var rotation = entity.Transform.Rotation;"},{"type":"INSERT","lineNumber":249,"content":""},{"type":"INSERT","lineNumber":250,"content":"            spriteBatch.Draw("},{"type":"INSERT","lineNumber":251,"content":"                entity.Render.Texture,"},{"type":"INSERT","lineNumber":252,"content":"                entity.Transform.Position,"},{"type":"INSERT","lineNumber":253,"content":"                null,"},{"type":"INSERT","lineNumber":254,"content":"                finalColor,"},{"type":"INSERT","lineNumber":255,"content":"                rotation,"},{"type":"INSERT","lineNumber":256,"content":"                origin,"},{"type":"INSERT","lineNumber":257,"content":"                scale,"},{"type":"INSERT","lineNumber":258,"content":"                SpriteEffects.None,"},{"type":"INSERT","lineNumber":259,"content":"                entity.Render.LayerDepth"},{"type":"INSERT","lineNumber":260,"content":"            );"},{"type":"INSERT","lineNumber":261,"content":"        }"},{"type":"INSERT","lineNumber":262,"content":""},{"type":"INSERT","lineNumber":263,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":264,"content":"        /// Renderizza un gruppo di entità con culling automatico"},{"type":"INSERT","lineNumber":265,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":266,"content":"        public void RenderEntities(SpriteBatch spriteBatch, IEnumerable<Entity> entities, Rectangle visibleArea)"},{"type":"INSERT","lineNumber":267,"content":"        {"},{"type":"INSERT","lineNumber":268,"content":"            foreach (var entity in entities)"},{"type":"INSERT","lineNumber":269,"content":"            {"},{"type":"INSERT","lineNumber":270,"content":"                // Culling: renderizza solo le entità visibili"},{"type":"INSERT","lineNumber":271,"content":"                if (IsEntityVisible(entity, visibleArea))"},{"type":"INSERT","lineNumber":272,"content":"                {"},{"type":"INSERT","lineNumber":273,"content":"                    RenderEntity(spriteBatch, entity);"},{"type":"INSERT","lineNumber":274,"content":"                }"},{"type":"INSERT","lineNumber":275,"content":"            }"},{"type":"INSERT","lineNumber":276,"content":"        }"},{"type":"INSERT","lineNumber":277,"content":""},{"type":"INSERT","lineNumber":278,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":279,"content":"        /// Controlla se un'entità è visibile nell'area specificata"},{"type":"INSERT","lineNumber":280,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":281,"content":"        private bool IsEntityVisible(Entity entity, Rectangle visibleArea)"},{"type":"INSERT","lineNumber":282,"content":"        {"},{"type":"INSERT","lineNumber":283,"content":"            if (entity?.Transform == null) return false;"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":285,"content":"            var entityBounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":286,"content":"            return visibleArea.Intersects(entityBounds);"},{"type":"INSERT","lineNumber":287,"content":"        }"},{"type":"INSERT","lineNumber":288,"content":""},{"type":"INSERT","lineNumber":289,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":290,"content":"        /// Crea una texture pixel per il rendering di forme primitive"},{"type":"INSERT","lineNumber":291,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":292,"content":"        private Texture2D CreatePixelTexture(GraphicsDevice graphicsDevice)"},{"type":"INSERT","lineNumber":293,"content":"        {"},{"type":"INSERT","lineNumber":294,"content":"            // Questo è un metodo helper che dovrebbe essere cached"},{"type":"INSERT","lineNumber":295,"content":"            // In una implementazione reale, questa texture dovrebbe essere creata una volta"},{"type":"INSERT","lineNumber":296,"content":"            // e riutilizzata"},{"type":"INSERT","lineNumber":297,"content":"            var texture = new Texture2D(graphicsDevice, 1, 1);"},{"type":"INSERT","lineNumber":298,"content":"            texture.SetData(new[] { Color.White });"},{"type":"INSERT","lineNumber":299,"content":"            return texture;"},{"type":"INSERT","lineNumber":300,"content":"        }"},{"type":"INSERT","lineNumber":301,"content":""},{"type":"INSERT","lineNumber":302,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":303,"content":"        /// Renderizza testo del mondo (testo che segue la camera)"},{"type":"INSERT","lineNumber":304,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":305,"content":"        public void RenderWorldText(SpriteBatch spriteBatch, SpriteFont font, string text, Vector2 worldPosition, Color color)"},{"type":"INSERT","lineNumber":306,"content":"        {"},{"type":"INSERT","lineNumber":307,"content":"            if (font != null && !string.IsNullOrEmpty(text))"},{"type":"INSERT","lineNumber":308,"content":"            {"},{"type":"INSERT","lineNumber":309,"content":"                spriteBatch.DrawString(font, text, worldPosition, color);"},{"type":"INSERT","lineNumber":310,"content":"            }"},{"type":"INSERT","lineNumber":311,"content":"        }"},{"type":"INSERT","lineNumber":312,"content":""},{"type":"INSERT","lineNumber":313,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":314,"content":"        /// Renderizza particelle o effetti speciali"},{"type":"INSERT","lineNumber":315,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":316,"content":"        public void RenderParticleEffect(SpriteBatch spriteBatch, Vector2 position, Texture2D texture, Color color, float scale = 1.0f, float rotation = 0f)"},{"type":"INSERT","lineNumber":317,"content":"        {"},{"type":"INSERT","lineNumber":318,"content":"            if (texture != null)"},{"type":"INSERT","lineNumber":319,"content":"            {"},{"type":"INSERT","lineNumber":320,"content":"                var origin = new Vector2(texture.Width * 0.5f, texture.Height * 0.5f);"},{"type":"INSERT","lineNumber":321,"content":"                spriteBatch.Draw(texture, position, null, color, rotation, origin, scale, SpriteEffects.None, 0.9f);"},{"type":"INSERT","lineNumber":322,"content":"            }"},{"type":"INSERT","lineNumber":323,"content":"        }"},{"type":"INSERT","lineNumber":324,"content":"    }"}]},{"timestamp":1756229168702,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"DELETE","lineNumber":8,"oldContent":"    }"},{"type":"DELETE","lineNumber":9,"oldContent":"        }"},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"DELETE","lineNumber":11,"oldContent":"            }"},{"type":"DELETE","lineNumber":13,"oldContent":"                spriteBatch.Draw(texture, position, null, color, rotation, origin, scale, SpriteEffects.None, 0.9f);"},{"type":"DELETE","lineNumber":15,"oldContent":"                var origin = new Vector2(texture.Width * 0.5f, texture.Height * 0.5f);"},{"type":"DELETE","lineNumber":17,"oldContent":"            {"},{"type":"DELETE","lineNumber":19,"oldContent":"            if (texture != null)"},{"type":"DELETE","lineNumber":21,"oldContent":"        {"},{"type":"DELETE","lineNumber":23,"oldContent":"        public void RenderParticleEffect(SpriteBatch spriteBatch, Vector2 position, Texture2D texture, Color color, float scale = 1.0f, float rotation = 0f)"},{"type":"DELETE","lineNumber":25,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":27,"oldContent":"        /// Renderizza particelle o effetti speciali"},{"type":"DELETE","lineNumber":29,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":35,"oldContent":"            }"},{"type":"DELETE","lineNumber":37,"oldContent":"                spriteBatch.DrawString(font, text, worldPosition, color);"},{"type":"DELETE","lineNumber":39,"oldContent":"            {"},{"type":"DELETE","lineNumber":41,"oldContent":"            if (font != null && !string.IsNullOrEmpty(text))"},{"type":"DELETE","lineNumber":43,"oldContent":"        {"},{"type":"DELETE","lineNumber":45,"oldContent":"        public void RenderWorldText(SpriteBatch spriteBatch, SpriteFont font, string text, Vector2 worldPosition, Color color)"},{"type":"DELETE","lineNumber":47,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":49,"oldContent":"        /// Renderizza testo del mondo (testo che segue la camera)"},{"type":"DELETE","lineNumber":51,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":55,"oldContent":"        }"},{"type":"DELETE","lineNumber":57,"oldContent":"            return texture;"},{"type":"DELETE","lineNumber":59,"oldContent":"            texture.SetData(new[] { Color.White });"},{"type":"DELETE","lineNumber":61,"oldContent":"            var texture = new Texture2D(graphicsDevice, 1, 1);"},{"type":"DELETE","lineNumber":63,"oldContent":"            // e riutilizzata"},{"type":"DELETE","lineNumber":65,"oldContent":"            // In una implementazione reale, questa texture dovrebbe essere creata una volta"},{"type":"DELETE","lineNumber":67,"oldContent":"            // Questo è un metodo helper che dovrebbe essere cached"},{"type":"DELETE","lineNumber":69,"oldContent":"        {"},{"type":"DELETE","lineNumber":71,"oldContent":"        private Texture2D CreatePixelTexture(GraphicsDevice graphicsDevice)"},{"type":"DELETE","lineNumber":73,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":75,"oldContent":"        /// Crea una texture pixel per il rendering di forme primitive"},{"type":"DELETE","lineNumber":77,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":83,"oldContent":"            return visibleArea.Intersects(entityBounds);"},{"type":"DELETE","lineNumber":85,"oldContent":"            var entityBounds = entity.GetBounds();"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"            if (entity?.Transform == null) return false;"},{"type":"DELETE","lineNumber":91,"oldContent":"        {"},{"type":"DELETE","lineNumber":93,"oldContent":"        private bool IsEntityVisible(Entity entity, Rectangle visibleArea)"},{"type":"DELETE","lineNumber":95,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":97,"oldContent":"        /// Controlla se un'entità è visibile nell'area specificata"},{"type":"DELETE","lineNumber":100,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":"        }"},{"type":"DELETE","lineNumber":105,"oldContent":"            }"},{"type":"DELETE","lineNumber":107,"oldContent":"                }"},{"type":"DELETE","lineNumber":109,"oldContent":"                    RenderEntity(spriteBatch, entity);"},{"type":"DELETE","lineNumber":111,"oldContent":"                {"},{"type":"DELETE","lineNumber":113,"oldContent":"                if (IsEntityVisible(entity, visibleArea))"},{"type":"DELETE","lineNumber":115,"oldContent":"                // Culling: renderizza solo le entità visibili"},{"type":"DELETE","lineNumber":117,"oldContent":"            {"},{"type":"DELETE","lineNumber":119,"oldContent":"            foreach (var entity in entities)"},{"type":"DELETE","lineNumber":121,"oldContent":"        {"},{"type":"DELETE","lineNumber":123,"oldContent":"        public void RenderEntities(SpriteBatch spriteBatch, IEnumerable<Entity> entities, Rectangle visibleArea)"},{"type":"DELETE","lineNumber":125,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":127,"oldContent":"        /// Renderizza un gruppo di entità con culling automatico"},{"type":"DELETE","lineNumber":129,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":131,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":"        }"},{"type":"DELETE","lineNumber":135,"oldContent":"            );"},{"type":"DELETE","lineNumber":137,"oldContent":"                entity.Render.LayerDepth"},{"type":"DELETE","lineNumber":139,"oldContent":"                SpriteEffects.None,"},{"type":"DELETE","lineNumber":141,"oldContent":"                scale,"},{"type":"DELETE","lineNumber":143,"oldContent":"                origin,"},{"type":"DELETE","lineNumber":145,"oldContent":"                rotation,"},{"type":"DELETE","lineNumber":147,"oldContent":"                finalColor,"},{"type":"DELETE","lineNumber":149,"oldContent":"                null,"},{"type":"DELETE","lineNumber":151,"oldContent":"                entity.Transform.Position,"},{"type":"DELETE","lineNumber":153,"oldContent":"                entity.Render.Texture,"},{"type":"DELETE","lineNumber":155,"oldContent":"            spriteBatch.Draw("},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":158,"oldContent":"        private void RenderTile(SpriteBatch spriteBatch, Tile tile, int x, int y, Dictionary<string, Texture2D> textures)"},{"type":"DELETE","lineNumber":159,"oldContent":"            var rotation = entity.Transform.Rotation;"},{"type":"INSERT","lineNumber":82,"content":"        private void RenderTile(SpriteBatch spriteBatch, Tile tile, int x, int y,"},{"type":"INSERT","lineNumber":83,"content":"            Dictionary<string, Texture2D> textures)"},{"type":"DELETE","lineNumber":161,"oldContent":"            var scale = entity.Transform.Scale;"},{"type":"DELETE","lineNumber":163,"oldContent":"            var origin = entity.Render.Origin;"},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"DELETE","lineNumber":167,"oldContent":"            }"},{"type":"DELETE","lineNumber":169,"oldContent":"                finalColor = Color.Lerp(finalColor, Color.White, flashIntensity);"},{"type":"DELETE","lineNumber":171,"oldContent":"            {"},{"type":"DELETE","lineNumber":173,"oldContent":"            if (flashIntensity > 0)"},{"type":"DELETE","lineNumber":175,"oldContent":"            // Applica effetto flash"},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":179,"oldContent":"            }"},{"type":"DELETE","lineNumber":181,"oldContent":"                finalColor = Color.Lerp(finalColor, tintColor.Value, 0.5f);"},{"type":"DELETE","lineNumber":183,"oldContent":"            {"},{"type":"DELETE","lineNumber":185,"oldContent":"            if (tintColor.HasValue)"},{"type":"DELETE","lineNumber":187,"oldContent":"            // Applica tint color se specificato"},{"type":"DELETE","lineNumber":189,"oldContent":"            "},{"type":"DELETE","lineNumber":191,"oldContent":"            Color finalColor = entity.Render.Color;"},{"type":"DELETE","lineNumber":193,"oldContent":""},{"type":"DELETE","lineNumber":194,"oldContent":"                    texture = textures.ContainsKey(\"door\") ? textures[\"door\"] : "},{"type":"DELETE","lineNumber":195,"oldContent":"            if (entity?.Render?.Texture == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":196,"oldContent":"                             (textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null);"},{"type":"DELETE","lineNumber":197,"oldContent":"        {"},{"type":"INSERT","lineNumber":101,"content":"                    texture = textures.ContainsKey(\"door\")"},{"type":"INSERT","lineNumber":102,"content":"                        ? textures[\"door\"]"},{"type":"INSERT","lineNumber":103,"content":"                        : (textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null);"},{"type":"DELETE","lineNumber":199,"oldContent":"        public void RenderEntityWithEffects(SpriteBatch spriteBatch, Entity entity, Color? tintColor = null, float flashIntensity = 0f)"},{"type":"DELETE","lineNumber":201,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":203,"oldContent":"        /// Renderizza un'entità con effetti speciali"},{"type":"DELETE","lineNumber":205,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":208,"oldContent":""},{"type":"DELETE","lineNumber":209,"oldContent":"        }"},{"type":"DELETE","lineNumber":211,"oldContent":"            }"},{"type":"DELETE","lineNumber":213,"oldContent":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Right - 2, roomBounds.Top, 2, roomBounds.Height), outlineColor);"},{"type":"DELETE","lineNumber":215,"oldContent":"                // Right"},{"type":"DELETE","lineNumber":217,"oldContent":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, 2, roomBounds.Height), outlineColor);"},{"type":"DELETE","lineNumber":219,"oldContent":"                // Left"},{"type":"DELETE","lineNumber":221,"oldContent":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Bottom - 2, roomBounds.Width, 2), outlineColor);"},{"type":"DELETE","lineNumber":223,"oldContent":"                // Bottom"},{"type":"DELETE","lineNumber":225,"oldContent":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, roomBounds.Width, 2), outlineColor);"},{"type":"DELETE","lineNumber":227,"oldContent":"                // Top"},{"type":"DELETE","lineNumber":229,"oldContent":"                "},{"type":"DELETE","lineNumber":231,"oldContent":"                var outlineColor = Color.Cyan * 0.7f;"},{"type":"DELETE","lineNumber":233,"oldContent":""},{"type":"DELETE","lineNumber":235,"oldContent":"                );"},{"type":"DELETE","lineNumber":237,"oldContent":"                    room.Height * TILE_SIZE"},{"type":"DELETE","lineNumber":239,"oldContent":"                    room.Width * TILE_SIZE,"},{"type":"DELETE","lineNumber":241,"oldContent":"                    room.Y * TILE_SIZE,"},{"type":"DELETE","lineNumber":243,"oldContent":"                    room.X * TILE_SIZE,"},{"type":"DELETE","lineNumber":245,"oldContent":"                var roomBounds = new Rectangle("},{"type":"DELETE","lineNumber":247,"oldContent":"            {"},{"type":"DELETE","lineNumber":249,"oldContent":"            foreach (var room in dungeon.GetRooms())"},{"type":"DELETE","lineNumber":251,"oldContent":"            // Renderizza i contorni delle stanze"},{"type":"DELETE","lineNumber":253,"oldContent":"            "},{"type":"DELETE","lineNumber":255,"oldContent":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"DELETE","lineNumber":257,"oldContent":"        {"},{"type":"DELETE","lineNumber":259,"oldContent":"        private void RenderDungeonDebugInfo(SpriteBatch spriteBatch, Dungeon dungeon)"},{"type":"DELETE","lineNumber":261,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":263,"oldContent":"        /// Renderizza informazioni di debug per il dungeon"},{"type":"DELETE","lineNumber":265,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":268,"oldContent":""},{"type":"DELETE","lineNumber":269,"oldContent":"        }"},{"type":"DELETE","lineNumber":271,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle((int)center.X - 2, (int)center.Y - 2, 4, 4), Color.Red);"},{"type":"DELETE","lineNumber":273,"oldContent":"            var center = entity.Transform.Position;"},{"type":"DELETE","lineNumber":275,"oldContent":"            // Centro dell'entità"},{"type":"DELETE","lineNumber":277,"oldContent":""},{"type":"DELETE","lineNumber":279,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Right - 1, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"DELETE","lineNumber":281,"oldContent":"            // Right"},{"type":"DELETE","lineNumber":283,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"DELETE","lineNumber":285,"oldContent":"            // Left"},{"type":"DELETE","lineNumber":287,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Bottom - 1, bounds.Width, 1), boundsColor);"},{"type":"DELETE","lineNumber":289,"oldContent":"            // Bottom"},{"type":"DELETE","lineNumber":291,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, bounds.Width, 1), boundsColor);"},{"type":"DELETE","lineNumber":293,"oldContent":"            // Top"},{"type":"DELETE","lineNumber":295,"oldContent":"            "},{"type":"DELETE","lineNumber":297,"oldContent":"            var boundsColor = Color.Yellow * 0.5f;"},{"type":"DELETE","lineNumber":299,"oldContent":"            var bounds = entity.GetBounds();"},{"type":"DELETE","lineNumber":301,"oldContent":"            // Bounding box"},{"type":"DELETE","lineNumber":303,"oldContent":"            "},{"type":"DELETE","lineNumber":305,"oldContent":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"DELETE","lineNumber":307,"oldContent":"        {"},{"type":"DELETE","lineNumber":309,"oldContent":"        private void RenderEntityDebugInfo(SpriteBatch spriteBatch, Entity entity)"},{"type":"DELETE","lineNumber":311,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":313,"oldContent":"        /// Renderizza informazioni di debug per un'entità"},{"type":"DELETE","lineNumber":315,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":318,"oldContent":""},{"type":"DELETE","lineNumber":319,"oldContent":"        }"},{"type":"DELETE","lineNumber":321,"oldContent":"            spriteBatch.Draw(pixelTexture, healthRect, healthColor);"},{"type":"INSERT","lineNumber":167,"content":""},{"type":"DELETE","lineNumber":324,"oldContent":"            "},{"type":"INSERT","lineNumber":169,"content":"            spriteBatch.Draw(pixelTexture, healthRect, healthColor);"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":173,"content":"        /// Renderizza informazioni di debug per un'entità"},{"type":"INSERT","lineNumber":174,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":175,"content":"        private void RenderEntityDebugInfo(SpriteBatch spriteBatch, Entity entity)"},{"type":"INSERT","lineNumber":176,"content":"        {"},{"type":"INSERT","lineNumber":177,"content":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"INSERT","lineNumber":178,"content":""},{"type":"INSERT","lineNumber":179,"content":"            // Bounding box"},{"type":"INSERT","lineNumber":180,"content":"            var bounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":181,"content":"            var boundsColor = Color.Yellow * 0.5f;"},{"type":"INSERT","lineNumber":182,"content":""},{"type":"INSERT","lineNumber":183,"content":"            // Top"},{"type":"INSERT","lineNumber":184,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, bounds.Width, 1), boundsColor);"},{"type":"INSERT","lineNumber":185,"content":"            // Bottom"},{"type":"INSERT","lineNumber":186,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Bottom - 1, bounds.Width, 1), boundsColor);"},{"type":"INSERT","lineNumber":187,"content":"            // Left"},{"type":"INSERT","lineNumber":188,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"INSERT","lineNumber":189,"content":"            // Right"},{"type":"INSERT","lineNumber":190,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Right - 1, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"INSERT","lineNumber":191,"content":""},{"type":"INSERT","lineNumber":192,"content":"            // Centro dell'entità"},{"type":"INSERT","lineNumber":193,"content":"            var center = entity.Transform.Position;"},{"type":"INSERT","lineNumber":194,"content":"            spriteBatch.Draw(pixelTexture, new Rectangle((int)center.X - 2, (int)center.Y - 2, 4, 4), Color.Red);"},{"type":"INSERT","lineNumber":195,"content":"        }"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":198,"content":"        /// Renderizza informazioni di debug per il dungeon"},{"type":"INSERT","lineNumber":199,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":200,"content":"        private void RenderDungeonDebugInfo(SpriteBatch spriteBatch, Dungeon dungeon)"},{"type":"INSERT","lineNumber":201,"content":"        {"},{"type":"INSERT","lineNumber":202,"content":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"INSERT","lineNumber":203,"content":""},{"type":"INSERT","lineNumber":204,"content":"            // Renderizza i contorni delle stanze"},{"type":"INSERT","lineNumber":205,"content":"            foreach (var room in dungeon.GetRooms())"},{"type":"INSERT","lineNumber":206,"content":"            {"},{"type":"INSERT","lineNumber":207,"content":"                var roomBounds = new Rectangle("},{"type":"INSERT","lineNumber":208,"content":"                    room.X * TILE_SIZE,"},{"type":"INSERT","lineNumber":209,"content":"                    room.Y * TILE_SIZE,"},{"type":"INSERT","lineNumber":210,"content":"                    room.Width * TILE_SIZE,"},{"type":"INSERT","lineNumber":211,"content":"                    room.Height * TILE_SIZE"},{"type":"INSERT","lineNumber":212,"content":"                );"},{"type":"INSERT","lineNumber":213,"content":""},{"type":"INSERT","lineNumber":214,"content":"                var outlineColor = Color.Cyan * 0.7f;"},{"type":"INSERT","lineNumber":215,"content":""},{"type":"INSERT","lineNumber":216,"content":"                // Top"},{"type":"INSERT","lineNumber":217,"content":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, roomBounds.Width, 2),"},{"type":"INSERT","lineNumber":218,"content":"                    outlineColor);"},{"type":"INSERT","lineNumber":219,"content":"                // Bottom"},{"type":"INSERT","lineNumber":220,"content":"                spriteBatch.Draw(pixelTexture,"},{"type":"INSERT","lineNumber":221,"content":"                    new Rectangle(roomBounds.Left, roomBounds.Bottom - 2, roomBounds.Width, 2), outlineColor);"},{"type":"INSERT","lineNumber":222,"content":"                // Left"},{"type":"INSERT","lineNumber":223,"content":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, 2, roomBounds.Height),"},{"type":"INSERT","lineNumber":224,"content":"                    outlineColor);"},{"type":"INSERT","lineNumber":225,"content":"                // Right"},{"type":"INSERT","lineNumber":226,"content":"                spriteBatch.Draw(pixelTexture,"},{"type":"INSERT","lineNumber":227,"content":"                    new Rectangle(roomBounds.Right - 2, roomBounds.Top, 2, roomBounds.Height), outlineColor);"},{"type":"INSERT","lineNumber":228,"content":"            }"},{"type":"INSERT","lineNumber":229,"content":"        }"},{"type":"INSERT","lineNumber":230,"content":""},{"type":"INSERT","lineNumber":231,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":232,"content":"        /// Renderizza un'entità con effetti speciali"},{"type":"INSERT","lineNumber":233,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":234,"content":"        public void RenderEntityWithEffects(SpriteBatch spriteBatch, Entity entity, Color? tintColor = null,"},{"type":"INSERT","lineNumber":235,"content":"            float flashIntensity = 0f)"},{"type":"INSERT","lineNumber":236,"content":"        {"},{"type":"INSERT","lineNumber":237,"content":"            if (entity?.Render?.Texture == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":238,"content":""},{"type":"INSERT","lineNumber":239,"content":"            Color finalColor = entity.Render.Color;"},{"type":"INSERT","lineNumber":240,"content":""},{"type":"INSERT","lineNumber":241,"content":"            // Applica tint color se specificato"},{"type":"INSERT","lineNumber":242,"content":"            if (tintColor.HasValue)"},{"type":"INSERT","lineNumber":243,"content":"            {"},{"type":"INSERT","lineNumber":244,"content":"                finalColor = Color.Lerp(finalColor, tintColor.Value, 0.5f);"},{"type":"INSERT","lineNumber":245,"content":"            }"},{"type":"INSERT","lineNumber":246,"content":""},{"type":"INSERT","lineNumber":247,"content":"            // Applica effetto flash"},{"type":"INSERT","lineNumber":248,"content":"            if (flashIntensity > 0)"},{"type":"INSERT","lineNumber":249,"content":"            {"},{"type":"INSERT","lineNumber":250,"content":"                finalColor = Color.Lerp(finalColor, Color.White, flashIntensity);"},{"type":"INSERT","lineNumber":251,"content":"            }"},{"type":"INSERT","lineNumber":252,"content":""},{"type":"INSERT","lineNumber":253,"content":"            var origin = entity.Render.Origin;"},{"type":"INSERT","lineNumber":254,"content":"            var scale = entity.Transform.Scale;"},{"type":"INSERT","lineNumber":255,"content":"            var rotation = entity.Transform.Rotation;"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"            spriteBatch.Draw("},{"type":"INSERT","lineNumber":258,"content":"                entity.Render.Texture,"},{"type":"INSERT","lineNumber":259,"content":"                entity.Transform.Position,"},{"type":"INSERT","lineNumber":260,"content":"                null,"},{"type":"INSERT","lineNumber":261,"content":"                finalColor,"},{"type":"INSERT","lineNumber":262,"content":"                rotation,"},{"type":"INSERT","lineNumber":263,"content":"                origin,"},{"type":"INSERT","lineNumber":264,"content":"                scale,"},{"type":"INSERT","lineNumber":265,"content":"                SpriteEffects.None,"},{"type":"INSERT","lineNumber":266,"content":"                entity.Render.LayerDepth"},{"type":"INSERT","lineNumber":267,"content":"            );"},{"type":"INSERT","lineNumber":268,"content":"        }"},{"type":"INSERT","lineNumber":269,"content":""},{"type":"INSERT","lineNumber":270,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":271,"content":"        /// Renderizza un gruppo di entità con culling automatico"},{"type":"INSERT","lineNumber":272,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":273,"content":"        public void RenderEntities(SpriteBatch spriteBatch, IEnumerable<Entity> entities, Rectangle visibleArea)"},{"type":"INSERT","lineNumber":274,"content":"        {"},{"type":"INSERT","lineNumber":275,"content":"            foreach (var entity in entities)"},{"type":"INSERT","lineNumber":276,"content":"            {"},{"type":"INSERT","lineNumber":277,"content":"                // Culling: renderizza solo le entità visibili"},{"type":"INSERT","lineNumber":278,"content":"                if (IsEntityVisible(entity, visibleArea))"},{"type":"INSERT","lineNumber":279,"content":"                {"},{"type":"INSERT","lineNumber":280,"content":"                    RenderEntity(spriteBatch, entity);"},{"type":"INSERT","lineNumber":281,"content":"                }"},{"type":"INSERT","lineNumber":282,"content":"            }"},{"type":"INSERT","lineNumber":283,"content":"        }"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":285,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":286,"content":"        /// Controlla se un'entità è visibile nell'area specificata"},{"type":"INSERT","lineNumber":287,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":288,"content":"        private bool IsEntityVisible(Entity entity, Rectangle visibleArea)"},{"type":"INSERT","lineNumber":289,"content":"        {"},{"type":"INSERT","lineNumber":290,"content":"            if (entity?.Transform == null) return false;"},{"type":"INSERT","lineNumber":291,"content":""},{"type":"INSERT","lineNumber":292,"content":"            var entityBounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":293,"content":"            return visibleArea.Intersects(entityBounds);"},{"type":"INSERT","lineNumber":294,"content":"        }"},{"type":"INSERT","lineNumber":295,"content":""},{"type":"INSERT","lineNumber":296,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":297,"content":"        /// Crea una texture pixel per il rendering di forme primitive"},{"type":"INSERT","lineNumber":298,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":299,"content":"        private Texture2D CreatePixelTexture(GraphicsDevice graphicsDevice)"},{"type":"INSERT","lineNumber":300,"content":"        {"},{"type":"INSERT","lineNumber":301,"content":"            // Questo è un metodo helper che dovrebbe essere cached"},{"type":"INSERT","lineNumber":302,"content":"            // In una implementazione reale, questa texture dovrebbe essere creata una volta"},{"type":"INSERT","lineNumber":303,"content":"            // e riutilizzata"},{"type":"INSERT","lineNumber":304,"content":"            var texture = new Texture2D(graphicsDevice, 1, 1);"},{"type":"INSERT","lineNumber":305,"content":"            texture.SetData(new[] { Color.White });"},{"type":"INSERT","lineNumber":306,"content":"            return texture;"},{"type":"INSERT","lineNumber":307,"content":"        }"},{"type":"INSERT","lineNumber":308,"content":""},{"type":"INSERT","lineNumber":309,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":310,"content":"        /// Renderizza testo del mondo (testo che segue la camera)"},{"type":"INSERT","lineNumber":311,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":312,"content":"        public void RenderWorldText(SpriteBatch spriteBatch, SpriteFont font, string text, Vector2 worldPosition,"},{"type":"INSERT","lineNumber":313,"content":"            Color color)"},{"type":"INSERT","lineNumber":314,"content":"        {"},{"type":"INSERT","lineNumber":315,"content":"            if (font != null && !string.IsNullOrEmpty(text))"},{"type":"INSERT","lineNumber":316,"content":"            {"},{"type":"INSERT","lineNumber":317,"content":"                spriteBatch.DrawString(font, text, worldPosition, color);"},{"type":"INSERT","lineNumber":318,"content":"            }"},{"type":"INSERT","lineNumber":319,"content":"        }"},{"type":"INSERT","lineNumber":320,"content":""},{"type":"INSERT","lineNumber":321,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":322,"content":"        /// Renderizza particelle o effetti speciali"},{"type":"INSERT","lineNumber":323,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":324,"content":"        public void RenderParticleEffect(SpriteBatch spriteBatch, Vector2 position, Texture2D texture, Color color,"},{"type":"INSERT","lineNumber":325,"content":"            float scale = 1.0f, float rotation = 0f)"},{"type":"INSERT","lineNumber":326,"content":"        {"},{"type":"INSERT","lineNumber":327,"content":"            if (texture != null)"},{"type":"INSERT","lineNumber":328,"content":"            {"},{"type":"INSERT","lineNumber":329,"content":"                var origin = new Vector2(texture.Width * 0.5f, texture.Height * 0.5f);"},{"type":"INSERT","lineNumber":330,"content":"                spriteBatch.Draw(texture, position, null, color, rotation, origin, scale, SpriteEffects.None, 0.9f);"},{"type":"INSERT","lineNumber":331,"content":"            }"},{"type":"INSERT","lineNumber":332,"content":"        }"},{"type":"INSERT","lineNumber":333,"content":"    }"},{"type":"INSERT","lineNumber":334,"content":"}"}]},{"timestamp":1756230113029,"changes":[{"type":"INSERT","lineNumber":0,"content":""},{"type":"INSERT","lineNumber":1,"content":"// ============================================"},{"type":"INSERT","lineNumber":2,"content":"// Systems/RenderSystem.cs"},{"type":"INSERT","lineNumber":3,"content":"// ============================================"},{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":9,"content":""},{"type":"DELETE","lineNumber":8,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":9,"oldContent":"    /// Sistema responsabile del rendering di tutte le entità e del mondo"},{"type":"DELETE","lineNumber":10,"oldContent":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"{"},{"type":"DELETE","lineNumber":13,"oldContent":"        private const int TILE_SIZE = 32;"},{"type":"DELETE","lineNumber":14,"oldContent":""},{"type":"DELETE","lineNumber":15,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":16,"oldContent":"        /// Renderizza una singola entità"},{"type":"DELETE","lineNumber":17,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":20,"oldContent":"            if (entity?.Render?.Texture != null && entity.Transform != null)"},{"type":"DELETE","lineNumber":21,"oldContent":"            {"},{"type":"DELETE","lineNumber":22,"oldContent":"                var color = entity.Render.Color;"},{"type":"DELETE","lineNumber":23,"oldContent":"                var origin = entity.Render.Origin;"},{"type":"DELETE","lineNumber":24,"oldContent":"                var scale = entity.Transform.Scale;"},{"type":"DELETE","lineNumber":25,"oldContent":"                var rotation = entity.Transform.Rotation;"},{"type":"INSERT","lineNumber":16,"content":"            if (entity?.Transform == null || entity.Render == null || !entity.Render.Visible)"},{"type":"INSERT","lineNumber":17,"content":"                return;"},{"type":"DELETE","lineNumber":27,"oldContent":"                spriteBatch.Draw("},{"type":"DELETE","lineNumber":28,"oldContent":"                    entity.Render.Texture,"},{"type":"DELETE","lineNumber":29,"oldContent":"                    entity.Transform.Position,"},{"type":"DELETE","lineNumber":30,"oldContent":"                    null,"},{"type":"DELETE","lineNumber":31,"oldContent":"                    color,"},{"type":"DELETE","lineNumber":32,"oldContent":"                    rotation,"},{"type":"DELETE","lineNumber":33,"oldContent":"                    origin,"},{"type":"DELETE","lineNumber":34,"oldContent":"                    scale,"},{"type":"DELETE","lineNumber":35,"oldContent":"                    SpriteEffects.None,"},{"type":"DELETE","lineNumber":36,"oldContent":"                    entity.Render.LayerDepth"},{"type":"DELETE","lineNumber":37,"oldContent":"                );"},{"type":"INSERT","lineNumber":19,"content":"            var texture = entity.Render.Texture;"},{"type":"INSERT","lineNumber":20,"content":"            var position = entity.Transform.Position;"},{"type":"INSERT","lineNumber":21,"content":"            var rotation = entity.Transform.Rotation;"},{"type":"INSERT","lineNumber":22,"content":"            var scale = entity.Transform.Scale;"},{"type":"INSERT","lineNumber":23,"content":"            var origin = entity.Transform.Origin;"},{"type":"INSERT","lineNumber":24,"content":"            var tint = entity.Render.Tint;"},{"type":"INSERT","lineNumber":25,"content":"            var sourceRect = entity.Render.SourceRectangle;"},{"type":"INSERT","lineNumber":26,"content":"            var effects = entity.Render.SpriteEffects;"},{"type":"INSERT","lineNumber":27,"content":"            var layerDepth = entity.Render.LayerDepth;"},{"type":"DELETE","lineNumber":39,"oldContent":"                // Render health bar per entità che hanno salute"},{"type":"DELETE","lineNumber":40,"oldContent":"                if (entity.Health != null && entity.Health.CurrentHealth < entity.Health.MaxHealth)"},{"type":"DELETE","lineNumber":41,"oldContent":"                {"},{"type":"DELETE","lineNumber":42,"oldContent":"                    RenderHealthBar(spriteBatch, entity);"},{"type":"DELETE","lineNumber":43,"oldContent":"                }"},{"type":"DELETE","lineNumber":44,"oldContent":"        private void RenderTile(SpriteBatch spriteBatch, Tile tile, int x, int y,"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"            Dictionary<string, Texture2D> textures)"},{"type":"DELETE","lineNumber":47,"oldContent":"                // Debug rendering se abilitato"},{"type":"DELETE","lineNumber":48,"oldContent":"                if (entity.Render.ShowDebugInfo)"},{"type":"DELETE","lineNumber":49,"oldContent":"                {"},{"type":"DELETE","lineNumber":50,"oldContent":"                    RenderEntityDebugInfo(spriteBatch, entity);"},{"type":"DELETE","lineNumber":51,"oldContent":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"            }"},{"type":"INSERT","lineNumber":29,"content":"            spriteBatch.Draw("},{"type":"INSERT","lineNumber":30,"content":"                texture,"},{"type":"INSERT","lineNumber":31,"content":"                position,"},{"type":"INSERT","lineNumber":32,"content":"                sourceRect,"},{"type":"INSERT","lineNumber":33,"content":"                tint,"},{"type":"INSERT","lineNumber":34,"content":"                rotation,"},{"type":"INSERT","lineNumber":35,"content":"                origin,"},{"type":"INSERT","lineNumber":36,"content":"                scale,"},{"type":"INSERT","lineNumber":37,"content":"                effects,"},{"type":"INSERT","lineNumber":38,"content":"                layerDepth"},{"type":"INSERT","lineNumber":39,"content":"            );"},{"type":"DELETE","lineNumber":55,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":56,"oldContent":"                    texture = textures.ContainsKey(\"door\")"},{"type":"DELETE","lineNumber":57,"oldContent":"                        ? textures[\"door\"]"},{"type":"DELETE","lineNumber":58,"oldContent":"        /// Renderizza il dungeon completo"},{"type":"DELETE","lineNumber":59,"oldContent":"                        : (textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null);"},{"type":"DELETE","lineNumber":60,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":65,"oldContent":"            int width = dungeon.Width;"},{"type":"DELETE","lineNumber":66,"oldContent":"            int height = dungeon.Height;"},{"type":"INSERT","lineNumber":46,"content":"            const int TILE_SIZE = 32;"},{"type":"DELETE","lineNumber":68,"oldContent":"            for (int x = 0; x < width; x++)"},{"type":"INSERT","lineNumber":48,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"DELETE","lineNumber":70,"oldContent":"                for (int y = 0; y < height; y++)"},{"type":"INSERT","lineNumber":50,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"DELETE","lineNumber":73,"oldContent":"                    RenderTile(spriteBatch, tile, x, y, textures);"},{"type":"DELETE","lineNumber":74,"oldContent":"                }"},{"type":"DELETE","lineNumber":75,"oldContent":"            }"},{"type":"INSERT","lineNumber":53,"content":"                    if (tile == null) continue;"},{"type":"DELETE","lineNumber":77,"oldContent":"            // Render room debug info se abilitato"},{"type":"DELETE","lineNumber":78,"oldContent":"            if (dungeon.ShowDebugInfo)"},{"type":"DELETE","lineNumber":79,"oldContent":"            {"},{"type":"DELETE","lineNumber":80,"oldContent":"                RenderDungeonDebugInfo(spriteBatch, dungeon);"},{"type":"DELETE","lineNumber":81,"oldContent":"            }"},{"type":"DELETE","lineNumber":82,"oldContent":"        }"},{"type":"INSERT","lineNumber":55,"content":"                    var position = new Vector2(x * TILE_SIZE, y * TILE_SIZE);"},{"type":"INSERT","lineNumber":56,"content":"                    Texture2D texture = null;"},{"type":"DELETE","lineNumber":84,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":85,"oldContent":"        /// Renderizza un singolo tile"},{"type":"DELETE","lineNumber":86,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":87,"oldContent":"        {"},{"type":"DELETE","lineNumber":88,"oldContent":"            if (tile == null) return;"},{"type":"INSERT","lineNumber":58,"content":"                    switch (tile.Type)"},{"type":"INSERT","lineNumber":59,"content":"                    {"},{"type":"INSERT","lineNumber":60,"content":"                        case TileType.Floor:"},{"type":"INSERT","lineNumber":61,"content":"                            texture = textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null;"},{"type":"INSERT","lineNumber":62,"content":"                            break;"},{"type":"INSERT","lineNumber":63,"content":"                        case TileType.Wall:"},{"type":"INSERT","lineNumber":64,"content":"                            texture = textures.ContainsKey(\"wall\") ? textures[\"wall\"] : null;"},{"type":"INSERT","lineNumber":65,"content":"                            break;"},{"type":"INSERT","lineNumber":66,"content":"                        case TileType.Door:"},{"type":"INSERT","lineNumber":67,"content":"                            texture = textures.ContainsKey(\"door\") ? textures[\"door\"] : textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null;"},{"type":"INSERT","lineNumber":68,"content":"                            break;"},{"type":"INSERT","lineNumber":69,"content":"                        case TileType.Corridor:"},{"type":"INSERT","lineNumber":70,"content":"                            texture = textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null;"},{"type":"INSERT","lineNumber":71,"content":"                            break;"},{"type":"INSERT","lineNumber":72,"content":"                    }"},{"type":"DELETE","lineNumber":90,"oldContent":"            var position = new Vector2(x * TILE_SIZE, y * TILE_SIZE);"},{"type":"INSERT","lineNumber":74,"content":"                    if (texture != null)"},{"type":"INSERT","lineNumber":75,"content":"                    {"},{"type":"INSERT","lineNumber":76,"content":"                        var tint = tile.Tint;"},{"type":"INSERT","lineNumber":77,"content":"                        "},{"type":"INSERT","lineNumber":78,"content":"                        // Special coloring for start/end positions"},{"type":"INSERT","lineNumber":79,"content":"                        if (tile.IsStartPosition)"},{"type":"INSERT","lineNumber":80,"content":"                            tint = Color.Green;"},{"type":"INSERT","lineNumber":81,"content":"                        else if (tile.IsEndPosition)"},{"type":"INSERT","lineNumber":82,"content":"                            tint = Color.Red;"},{"type":"DELETE","lineNumber":92,"oldContent":"            Texture2D texture = null;"},{"type":"DELETE","lineNumber":93,"oldContent":"            spriteBatch.Draw(pixelTexture, healthRect, healthColor);"},{"type":"DELETE","lineNumber":94,"oldContent":"        }"},{"type":"DELETE","lineNumber":95,"oldContent":"            Color color = Color.White;"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":97,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":98,"oldContent":""},{"type":"DELETE","lineNumber":99,"oldContent":"        /// Renderizza informazioni di debug per un'entità"},{"type":"DELETE","lineNumber":100,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":101,"oldContent":"            // Determina la texture basata sul tipo di tile"},{"type":"DELETE","lineNumber":102,"oldContent":"        private void RenderEntityDebugInfo(SpriteBatch spriteBatch, Entity entity)"},{"type":"DELETE","lineNumber":103,"oldContent":"        {"},{"type":"DELETE","lineNumber":104,"oldContent":"            switch (tile.Type)"},{"type":"DELETE","lineNumber":105,"oldContent":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"            {"},{"type":"DELETE","lineNumber":108,"oldContent":"            // Bounding box"},{"type":"DELETE","lineNumber":109,"oldContent":"            var bounds = entity.GetBounds();"},{"type":"DELETE","lineNumber":110,"oldContent":"                case TileType.Floor:"},{"type":"DELETE","lineNumber":111,"oldContent":"            var boundsColor = Color.Yellow * 0.5f;"},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":113,"oldContent":"                    texture = textures.ContainsKey(\"floor\") ? textures[\"floor\"] : null;"},{"type":"DELETE","lineNumber":114,"oldContent":"            // Top"},{"type":"DELETE","lineNumber":115,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, bounds.Width, 1), boundsColor);"},{"type":"DELETE","lineNumber":116,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":117,"oldContent":"            // Bottom"},{"type":"DELETE","lineNumber":118,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Bottom - 1, bounds.Width, 1), boundsColor);"},{"type":"DELETE","lineNumber":119,"oldContent":"                case TileType.Wall:"},{"type":"DELETE","lineNumber":120,"oldContent":"            // Left"},{"type":"DELETE","lineNumber":121,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Left, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"DELETE","lineNumber":122,"oldContent":"                    texture = textures.ContainsKey(\"wall\") ? textures[\"wall\"] : null;"},{"type":"DELETE","lineNumber":123,"oldContent":"            // Right"},{"type":"DELETE","lineNumber":124,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle(bounds.Right - 1, bounds.Top, 1, bounds.Height), boundsColor);"},{"type":"DELETE","lineNumber":125,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"            // Centro dell'entità"},{"type":"DELETE","lineNumber":128,"oldContent":"                case TileType.Door:"},{"type":"DELETE","lineNumber":129,"oldContent":"            var center = entity.Transform.Position;"},{"type":"DELETE","lineNumber":130,"oldContent":"            spriteBatch.Draw(pixelTexture, new Rectangle((int)center.X - 2, (int)center.Y - 2, 4, 4), Color.Red);"},{"type":"DELETE","lineNumber":131,"oldContent":"        }"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":134,"oldContent":"        /// Renderizza informazioni di debug per il dungeon"},{"type":"DELETE","lineNumber":135,"oldContent":"                    color = Color.Brown;"},{"type":"DELETE","lineNumber":136,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":137,"oldContent":"        private void RenderDungeonDebugInfo(SpriteBatch spriteBatch, Dungeon dungeon)"},{"type":"DELETE","lineNumber":138,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":139,"oldContent":"        {"},{"type":"DELETE","lineNumber":140,"oldContent":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"DELETE","lineNumber":141,"oldContent":"                default:"},{"type":"DELETE","lineNumber":142,"oldContent":""},{"type":"DELETE","lineNumber":143,"oldContent":"            // Renderizza i contorni delle stanze"},{"type":"DELETE","lineNumber":144,"oldContent":"                    return; // Non renderizza tile vuoti"},{"type":"DELETE","lineNumber":145,"oldContent":"            foreach (var room in dungeon.GetRooms())"},{"type":"DELETE","lineNumber":146,"oldContent":"            {"},{"type":"DELETE","lineNumber":147,"oldContent":"            }"},{"type":"DELETE","lineNumber":148,"oldContent":"                var roomBounds = new Rectangle("},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":150,"oldContent":"                    room.X * TILE_SIZE,"},{"type":"DELETE","lineNumber":151,"oldContent":"                    room.Y * TILE_SIZE,"},{"type":"DELETE","lineNumber":152,"oldContent":"                    room.Width * TILE_SIZE,"},{"type":"DELETE","lineNumber":153,"oldContent":"            if (texture != null)"},{"type":"DELETE","lineNumber":154,"oldContent":"                    room.Height * TILE_SIZE"},{"type":"DELETE","lineNumber":155,"oldContent":"                );"},{"type":"DELETE","lineNumber":156,"oldContent":"            {"},{"type":"DELETE","lineNumber":157,"oldContent":""},{"type":"DELETE","lineNumber":158,"oldContent":"                var outlineColor = Color.Cyan * 0.7f;"},{"type":"DELETE","lineNumber":159,"oldContent":"                spriteBatch.Draw(texture, position, color);"},{"type":"DELETE","lineNumber":160,"oldContent":""},{"type":"DELETE","lineNumber":161,"oldContent":"                // Top"},{"type":"DELETE","lineNumber":162,"oldContent":"            }"},{"type":"DELETE","lineNumber":163,"oldContent":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, roomBounds.Width, 2),"},{"type":"DELETE","lineNumber":164,"oldContent":"                    outlineColor);"},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"DELETE","lineNumber":166,"oldContent":"                // Bottom"},{"type":"DELETE","lineNumber":167,"oldContent":"                spriteBatch.Draw(pixelTexture,"},{"type":"DELETE","lineNumber":168,"oldContent":"            // Rendering speciale per tile speciali"},{"type":"DELETE","lineNumber":169,"oldContent":"                    new Rectangle(roomBounds.Left, roomBounds.Bottom - 2, roomBounds.Width, 2), outlineColor);"},{"type":"DELETE","lineNumber":170,"oldContent":"                // Left"},{"type":"DELETE","lineNumber":171,"oldContent":"            if (tile.IsStartPosition)"},{"type":"DELETE","lineNumber":172,"oldContent":"                spriteBatch.Draw(pixelTexture, new Rectangle(roomBounds.Left, roomBounds.Top, 2, roomBounds.Height),"},{"type":"DELETE","lineNumber":173,"oldContent":"                    outlineColor);"},{"type":"DELETE","lineNumber":174,"oldContent":"            {"},{"type":"DELETE","lineNumber":175,"oldContent":"                // Right"},{"type":"DELETE","lineNumber":176,"oldContent":"                spriteBatch.Draw(pixelTexture,"},{"type":"DELETE","lineNumber":177,"oldContent":"                // Indica la posizione di partenza con un overlay verde"},{"type":"DELETE","lineNumber":178,"oldContent":"                    new Rectangle(roomBounds.Right - 2, roomBounds.Top, 2, roomBounds.Height), outlineColor);"},{"type":"DELETE","lineNumber":179,"oldContent":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":"                spriteBatch.Draw(texture, position, Color.Green * 0.3f);"},{"type":"DELETE","lineNumber":181,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":"            }"},{"type":"DELETE","lineNumber":184,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":185,"oldContent":"        /// Renderizza un'entità con effetti speciali"},{"type":"DELETE","lineNumber":186,"oldContent":"            else if (tile.IsEndPosition)"},{"type":"DELETE","lineNumber":187,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":188,"oldContent":"        public void RenderEntityWithEffects(SpriteBatch spriteBatch, Entity entity, Color? tintColor = null,"},{"type":"DELETE","lineNumber":189,"oldContent":"            {"},{"type":"DELETE","lineNumber":190,"oldContent":"            float flashIntensity = 0f)"},{"type":"DELETE","lineNumber":191,"oldContent":"        {"},{"type":"DELETE","lineNumber":192,"oldContent":"                // Indica la posizione finale con un overlay rosso"},{"type":"DELETE","lineNumber":193,"oldContent":"            if (entity?.Render?.Texture == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":194,"oldContent":""},{"type":"DELETE","lineNumber":195,"oldContent":"                spriteBatch.Draw(texture, position, Color.Red * 0.3f);"},{"type":"DELETE","lineNumber":196,"oldContent":"            Color finalColor = entity.Render.Color;"},{"type":"DELETE","lineNumber":197,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"            }"},{"type":"DELETE","lineNumber":199,"oldContent":"            // Applica tint color se specificato"},{"type":"DELETE","lineNumber":200,"oldContent":"            if (tintColor.HasValue)"},{"type":"DELETE","lineNumber":201,"oldContent":"        }"},{"type":"DELETE","lineNumber":202,"oldContent":"            {"},{"type":"DELETE","lineNumber":203,"oldContent":"                finalColor = Color.Lerp(finalColor, tintColor.Value, 0.5f);"},{"type":"DELETE","lineNumber":204,"oldContent":""},{"type":"DELETE","lineNumber":205,"oldContent":"            }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":208,"oldContent":"            // Applica effetto flash"},{"type":"DELETE","lineNumber":209,"oldContent":"            if (flashIntensity > 0)"},{"type":"DELETE","lineNumber":210,"oldContent":"        /// Renderizza la barra della salute di un'entità"},{"type":"DELETE","lineNumber":211,"oldContent":"            {"},{"type":"DELETE","lineNumber":212,"oldContent":"                finalColor = Color.Lerp(finalColor, Color.White, flashIntensity);"},{"type":"DELETE","lineNumber":213,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":214,"oldContent":"            }"},{"type":"DELETE","lineNumber":215,"oldContent":""},{"type":"DELETE","lineNumber":216,"oldContent":"        private void RenderHealthBar(SpriteBatch spriteBatch, Entity entity)"},{"type":"DELETE","lineNumber":217,"oldContent":"            var origin = entity.Render.Origin;"},{"type":"DELETE","lineNumber":218,"oldContent":"            var scale = entity.Transform.Scale;"},{"type":"DELETE","lineNumber":219,"oldContent":"        {"},{"type":"DELETE","lineNumber":220,"oldContent":"            var rotation = entity.Transform.Rotation;"},{"type":"DELETE","lineNumber":221,"oldContent":""},{"type":"DELETE","lineNumber":222,"oldContent":"            if (entity.Health == null) return;"},{"type":"DELETE","lineNumber":223,"oldContent":"            spriteBatch.Draw("},{"type":"DELETE","lineNumber":224,"oldContent":"                entity.Render.Texture,"},{"type":"DELETE","lineNumber":225,"oldContent":""},{"type":"DELETE","lineNumber":226,"oldContent":"                entity.Transform.Position,"},{"type":"DELETE","lineNumber":227,"oldContent":"                null,"},{"type":"DELETE","lineNumber":228,"oldContent":"            var position = entity.Transform.Position;"},{"type":"DELETE","lineNumber":229,"oldContent":"                finalColor,"},{"type":"DELETE","lineNumber":230,"oldContent":"                rotation,"},{"type":"DELETE","lineNumber":231,"oldContent":"            var healthBarWidth = 30;"},{"type":"DELETE","lineNumber":232,"oldContent":"                origin,"},{"type":"DELETE","lineNumber":233,"oldContent":"                scale,"},{"type":"DELETE","lineNumber":234,"oldContent":"            var healthBarHeight = 4;"},{"type":"DELETE","lineNumber":235,"oldContent":"                SpriteEffects.None,"},{"type":"DELETE","lineNumber":236,"oldContent":"                entity.Render.LayerDepth"},{"type":"DELETE","lineNumber":237,"oldContent":"            var healthBarOffset = new Vector2(-healthBarWidth * 0.5f, -40);"},{"type":"DELETE","lineNumber":238,"oldContent":"            );"},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"DELETE","lineNumber":240,"oldContent":"        }"},{"type":"DELETE","lineNumber":241,"oldContent":""},{"type":"DELETE","lineNumber":242,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":243,"oldContent":"            var healthBarPosition = position + healthBarOffset;"},{"type":"DELETE","lineNumber":244,"oldContent":"        /// Renderizza un gruppo di entità con culling automatico"},{"type":"DELETE","lineNumber":245,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":246,"oldContent":"            var healthPercentage = (float)entity.Health.CurrentHealth / entity.Health.MaxHealth;"},{"type":"DELETE","lineNumber":247,"oldContent":"        public void RenderEntities(SpriteBatch spriteBatch, IEnumerable<Entity> entities, Rectangle visibleArea)"},{"type":"DELETE","lineNumber":248,"oldContent":"        {"},{"type":"DELETE","lineNumber":249,"oldContent":""},{"type":"DELETE","lineNumber":250,"oldContent":"            foreach (var entity in entities)"},{"type":"DELETE","lineNumber":251,"oldContent":"            {"},{"type":"DELETE","lineNumber":252,"oldContent":"            // Background della barra (rosso)"},{"type":"DELETE","lineNumber":253,"oldContent":"                // Culling: renderizza solo le entità visibili"},{"type":"DELETE","lineNumber":254,"oldContent":"                if (IsEntityVisible(entity, visibleArea))"},{"type":"DELETE","lineNumber":255,"oldContent":"            var backgroundRect = new Rectangle("},{"type":"DELETE","lineNumber":256,"oldContent":"                {"},{"type":"DELETE","lineNumber":257,"oldContent":"                    RenderEntity(spriteBatch, entity);"},{"type":"DELETE","lineNumber":258,"oldContent":"                (int)healthBarPosition.X,"},{"type":"INSERT","lineNumber":84,"content":"                        spriteBatch.Draw(texture, position, tint);"},{"type":"INSERT","lineNumber":85,"content":"                    }"},{"type":"DELETE","lineNumber":261,"oldContent":"                (int)healthBarPosition.Y,"},{"type":"INSERT","lineNumber":89,"content":"    }"},{"type":"INSERT","lineNumber":90,"content":"}"},{"type":"DELETE","lineNumber":264,"oldContent":"                healthBarWidth,"},{"type":"DELETE","lineNumber":265,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":266,"oldContent":"        /// Controlla se un'entità è visibile nell'area specificata"},{"type":"DELETE","lineNumber":267,"oldContent":"                healthBarHeight"},{"type":"DELETE","lineNumber":268,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":269,"oldContent":"        private bool IsEntityVisible(Entity entity, Rectangle visibleArea)"},{"type":"DELETE","lineNumber":270,"oldContent":"            );"},{"type":"DELETE","lineNumber":271,"oldContent":"        {"},{"type":"DELETE","lineNumber":272,"oldContent":"            if (entity?.Transform == null) return false;"},{"type":"INSERT","lineNumber":92,"content":"// ============================================"},{"type":"INSERT","lineNumber":93,"content":"// Systems/MovementSystem.cs"},{"type":"INSERT","lineNumber":94,"content":"// ============================================"},{"type":"INSERT","lineNumber":95,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":96,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":97,"content":"using DungeonExplorer.Core;"},{"type":"DELETE","lineNumber":274,"oldContent":""},{"type":"DELETE","lineNumber":275,"oldContent":"            var entityBounds = entity.GetBounds();"},{"type":"DELETE","lineNumber":276,"oldContent":"            // Barra della salute (verde/giallo/rosso basato sulla percentuale)"},{"type":"DELETE","lineNumber":277,"oldContent":"            return visibleArea.Intersects(entityBounds);"},{"type":"DELETE","lineNumber":278,"oldContent":"        }"},{"type":"DELETE","lineNumber":279,"oldContent":"            var healthRect = new Rectangle("},{"type":"DELETE","lineNumber":280,"oldContent":""},{"type":"DELETE","lineNumber":281,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":282,"oldContent":"                (int)healthBarPosition.X,"},{"type":"DELETE","lineNumber":283,"oldContent":"        /// Crea una texture pixel per il rendering di forme primitive"},{"type":"DELETE","lineNumber":284,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":285,"oldContent":"                (int)healthBarPosition.Y,"},{"type":"DELETE","lineNumber":286,"oldContent":"        private Texture2D CreatePixelTexture(GraphicsDevice graphicsDevice)"},{"type":"INSERT","lineNumber":99,"content":"namespace DungeonExplorer.Systems"},{"type":"INSERT","lineNumber":100,"content":"{"},{"type":"INSERT","lineNumber":101,"content":"    public class MovementSystem"},{"type":"INSERT","lineNumber":102,"content":"    {"},{"type":"INSERT","lineNumber":103,"content":"        public void Update(GameTime gameTime, Player player, InputManager inputManager)"},{"type":"DELETE","lineNumber":288,"oldContent":"                (int)(healthBarWidth * healthPercentage),"},{"type":"DELETE","lineNumber":289,"oldContent":"            // Questo è un metodo helper che dovrebbe essere cached"},{"type":"DELETE","lineNumber":290,"oldContent":"            // In una implementazione reale, questa texture dovrebbe essere creata una volta"},{"type":"DELETE","lineNumber":291,"oldContent":"                healthBarHeight"},{"type":"DELETE","lineNumber":292,"oldContent":"            // e riutilizzata"},{"type":"DELETE","lineNumber":293,"oldContent":"            var texture = new Texture2D(graphicsDevice, 1, 1);"},{"type":"DELETE","lineNumber":294,"oldContent":"            );"},{"type":"DELETE","lineNumber":295,"oldContent":"            texture.SetData(new[] { Color.White });"},{"type":"DELETE","lineNumber":296,"oldContent":"            return texture;"},{"type":"INSERT","lineNumber":105,"content":"            if (player?.Movement == null || player.Transform == null) return;"},{"type":"DELETE","lineNumber":298,"oldContent":"        }"},{"type":"DELETE","lineNumber":299,"oldContent":""},{"type":"DELETE","lineNumber":300,"oldContent":"            Color healthColor = Color.Green;"},{"type":"DELETE","lineNumber":301,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":302,"oldContent":"        /// Renderizza testo del mondo (testo che segue la camera)"},{"type":"DELETE","lineNumber":303,"oldContent":"            if (healthPercentage < 0.3f)"},{"type":"DELETE","lineNumber":304,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":305,"oldContent":"        public void RenderWorldText(SpriteBatch spriteBatch, SpriteFont font, string text, Vector2 worldPosition,"},{"type":"DELETE","lineNumber":306,"oldContent":"                healthColor = Color.Red;"},{"type":"DELETE","lineNumber":307,"oldContent":"            Color color)"},{"type":"DELETE","lineNumber":308,"oldContent":"        {"},{"type":"DELETE","lineNumber":309,"oldContent":"            else if (healthPercentage < 0.6f)"},{"type":"DELETE","lineNumber":310,"oldContent":"            if (font != null && !string.IsNullOrEmpty(text))"},{"type":"INSERT","lineNumber":107,"content":"            var direction = inputManager.GetMovementDirection();"},{"type":"INSERT","lineNumber":108,"content":"            "},{"type":"INSERT","lineNumber":109,"content":"            if (direction != Vector2.Zero)"},{"type":"DELETE","lineNumber":312,"oldContent":"                healthColor = Color.Yellow;"},{"type":"DELETE","lineNumber":313,"oldContent":"                spriteBatch.DrawString(font, text, worldPosition, color);"},{"type":"DELETE","lineNumber":314,"oldContent":""},{"type":"INSERT","lineNumber":111,"content":"                player.Movement.AddForce(direction * 500f); // Apply movement force"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"            // Crea texture pixel se non disponibile (metodo helper)"},{"type":"DELETE","lineNumber":319,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":320,"oldContent":"        /// Renderizza particelle o effetti speciali"},{"type":"DELETE","lineNumber":321,"oldContent":"            var pixelTexture = CreatePixelTexture(spriteBatch.GraphicsDevice);"},{"type":"DELETE","lineNumber":322,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":323,"oldContent":"            spriteBatch.Draw(pixelTexture, backgroundRect, Color.DarkRed);"},{"type":"DELETE","lineNumber":324,"oldContent":"        public void RenderParticleEffect(SpriteBatch spriteBatch, Vector2 position, Texture2D texture, Color color,"},{"type":"DELETE","lineNumber":325,"oldContent":"            float scale = 1.0f, float rotation = 0f)"},{"type":"DELETE","lineNumber":326,"oldContent":"}"},{"type":"DELETE","lineNumber":327,"oldContent":"        {"},{"type":"DELETE","lineNumber":329,"oldContent":"            if (texture != null)"},{"type":"DELETE","lineNumber":330,"oldContent":"        }"},{"type":"DELETE","lineNumber":331,"oldContent":"            {"},{"type":"DELETE","lineNumber":332,"oldContent":"            }"},{"type":"DELETE","lineNumber":333,"oldContent":"                var origin = new Vector2(texture.Width * 0.5f, texture.Height * 0.5f);"},{"type":"DELETE","lineNumber":334,"oldContent":"                spriteBatch.Draw(texture, position, null, color, rotation, origin, scale, SpriteEffects.None, 0.9f);"},{"type":"INSERT","lineNumber":115,"content":"}"}]},{"timestamp":1756230121363,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":3,"oldContent":"using Microsoft.Xna.Framework.Graphics;"},{"type":"DELETE","lineNumber":5,"oldContent":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":4,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":5,"content":"using Microsoft.Xna.Framework.Graphics;"},{"type":"INSERT","lineNumber":6,"content":"using DungeonExplorer.Entities;"},{"type":"MODIFY","lineNumber":10,"content":"namespace DungeonExplorer.Systems","oldContent":"namespace DungeonExplorer.Systems"},{"type":"INSERT","lineNumber":14,"content":"        public void RenderEntity(SpriteBatch spriteBatch, Entity entity)"},{"type":"INSERT","lineNumber":15,"content":"        {"},{"type":"DELETE","lineNumber":16,"oldContent":"        public void RenderEntity(SpriteBatch spriteBatch, Entity entity)"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"DELETE","lineNumber":18,"oldContent":"        {"},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"INSERT","lineNumber":28,"content":""},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"INSERT","lineNumber":40,"content":"        }"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"        public void RenderDungeon(SpriteBatch spriteBatch, Dungeon dungeon, Dictionary<string, Texture2D> textures)"},{"type":"INSERT","lineNumber":43,"content":"        {"},{"type":"INSERT","lineNumber":44,"content":"            if (dungeon?.Tiles == null) return;"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":47,"content":""},{"type":"INSERT","lineNumber":49,"content":"            {"},{"type":"INSERT","lineNumber":51,"content":"                {"},{"type":"INSERT","lineNumber":52,"content":"                    var tile = dungeon.Tiles[x, y];"},{"type":"DELETE","lineNumber":44,"oldContent":"        }"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"DELETE","lineNumber":52,"oldContent":"        public void RenderDungeon(SpriteBatch spriteBatch, Dungeon dungeon, Dictionary<string, Texture2D> textures)"},{"type":"DELETE","lineNumber":54,"oldContent":"        {"},{"type":"DELETE","lineNumber":56,"oldContent":"            if (dungeon?.Tiles == null) return;"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":65,"oldContent":"            {"},{"type":"DELETE","lineNumber":68,"oldContent":"                {"},{"type":"DELETE","lineNumber":70,"oldContent":"                    var tile = dungeon.Tiles[x, y];"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"DELETE","lineNumber":74,"oldContent":""},{"type":"DELETE","lineNumber":84,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"}"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":88,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":89,"oldContent":"// Systems/MovementSystem.cs"},{"type":"DELETE","lineNumber":90,"oldContent":"// ============================================"},{"type":"DELETE","lineNumber":91,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":92,"oldContent":"using DungeonExplorer.Entities;"},{"type":"DELETE","lineNumber":93,"oldContent":"using DungeonExplorer.Core;"},{"type":"DELETE","lineNumber":94,"oldContent":"namespace DungeonExplorer.Systems"},{"type":"DELETE","lineNumber":95,"oldContent":"{"},{"type":"DELETE","lineNumber":96,"oldContent":"    public class MovementSystem"},{"type":"DELETE","lineNumber":97,"oldContent":"    {"},{"type":"DELETE","lineNumber":98,"oldContent":"        public void Update(GameTime gameTime, Player player, InputManager inputManager)"},{"type":"DELETE","lineNumber":99,"oldContent":"            if (player?.Movement == null || player.Transform == null) return;"},{"type":"DELETE","lineNumber":100,"oldContent":"            var direction = inputManager.GetMovementDirection();"},{"type":"DELETE","lineNumber":101,"oldContent":"            "},{"type":"DELETE","lineNumber":102,"oldContent":"            if (direction != Vector2.Zero)"},{"type":"DELETE","lineNumber":103,"oldContent":"                player.Movement.AddForce(direction * 500f); // Apply movement force"},{"type":"DELETE","lineNumber":104,"oldContent":"}"},{"type":"INSERT","lineNumber":89,"content":"    }"},{"type":"INSERT","lineNumber":90,"content":"}"},{"type":"DELETE","lineNumber":110,"oldContent":"        {"},{"type":"DELETE","lineNumber":111,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":"            {"},{"type":"DELETE","lineNumber":113,"oldContent":"            }"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":115,"oldContent":"    }"}]},{"timestamp":1756230125356,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":3,"content":"// ============================================"},{"type":"INSERT","lineNumber":4,"content":"using Microsoft.Xna.Framework;"},{"type":"DELETE","lineNumber":6,"oldContent":"// ============================================"},{"type":"INSERT","lineNumber":9,"content":""},{"type":"DELETE","lineNumber":10,"oldContent":"namespace DungeonExplorer.Systems"},{"type":"MODIFY","lineNumber":16,"content":"            if (entity?.Transform == null || entity.Render == null || !entity.Render.Visible)","oldContent":"            if (entity?.Transform == null || entity.Render == null || !entity.Render.Visible)"},{"type":"MODIFY","lineNumber":19,"content":"            var texture = entity.Render.Texture;","oldContent":"            var texture = entity.Render.Texture;"},{"type":"DELETE","lineNumber":41,"oldContent":"            const int TILE_SIZE = 32;"},{"type":"DELETE","lineNumber":43,"oldContent":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"DELETE","lineNumber":45,"oldContent":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"DELETE","lineNumber":47,"oldContent":"                    if (tile == null) continue;"},{"type":"INSERT","lineNumber":46,"content":"            const int TILE_SIZE = 32;"},{"type":"DELETE","lineNumber":51,"oldContent":"                    var position = new Vector2(x * TILE_SIZE, y * TILE_SIZE);"},{"type":"INSERT","lineNumber":48,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":49,"content":"            {"},{"type":"INSERT","lineNumber":50,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":51,"content":"                {"},{"type":"INSERT","lineNumber":52,"content":"                    var tile = dungeon.Tiles[x, y];"},{"type":"INSERT","lineNumber":53,"content":"                    if (tile == null) continue;"},{"type":"INSERT","lineNumber":55,"content":"                    var position = new Vector2(x * TILE_SIZE, y * TILE_SIZE);"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"DELETE","lineNumber":55,"oldContent":"            {"},{"type":"DELETE","lineNumber":58,"oldContent":"                {"},{"type":"DELETE","lineNumber":60,"oldContent":"                    var tile = dungeon.Tiles[x, y];"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"INSERT","lineNumber":73,"content":""},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"    }"},{"type":"DELETE","lineNumber":87,"oldContent":"}"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"INSERT","lineNumber":89,"content":"    }"},{"type":"INSERT","lineNumber":90,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/MovementSystem.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/MovementSystem.cs","baseContent":"namespace DungeonExplorer.Systems;\n\npublic class MovementSystem\n{\n    \n}","baseTimestamp":1756229033200,"deltas":[{"timestamp":1756229052415,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using Microsoft.Xna.Framework;","oldContent":"namespace DungeonExplorer.Systems;"},{"type":"INSERT","lineNumber":1,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":2,"content":"using DungeonExplorer.Core;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class MovementSystem"},{"type":"INSERT","lineNumber":4,"content":"namespace DungeonExplorer.Systems"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":6,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":7,"content":"    /// Sistema responsabile del movimento delle entità"},{"type":"INSERT","lineNumber":8,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":9,"content":"    public class MovementSystem"},{"type":"INSERT","lineNumber":10,"content":"    {"},{"type":"INSERT","lineNumber":11,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":12,"content":"        /// Aggiorna il movimento del giocatore basato sull'input"},{"type":"INSERT","lineNumber":13,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":14,"content":"        public void Update(GameTime gameTime, Player player, InputManager inputManager)"},{"type":"INSERT","lineNumber":15,"content":"        {"},{"type":"INSERT","lineNumber":16,"content":"            if (player?.Movement == null || player.Transform == null) return;"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":19,"content":"            Vector2 movementDirection = inputManager.GetMovementDirection();"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"            // Applica il movimento se il giocatore è vivo"},{"type":"INSERT","lineNumber":22,"content":"            if (player.Health.CurrentHealth > 0)"},{"type":"INSERT","lineNumber":23,"content":"            {"},{"type":"INSERT","lineNumber":24,"content":"                MoveEntity(player, movementDirection, deltaTime);"},{"type":"INSERT","lineNumber":25,"content":"            }"},{"type":"INSERT","lineNumber":26,"content":"        }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":29,"content":"        /// Muove un'entità nella direzione specificata"},{"type":"INSERT","lineNumber":30,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":31,"content":"        public void MoveEntity(Entity entity, Vector2 direction, float deltaTime)"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"            // Calcola la velocità effettiva considerando i modificatori"},{"type":"INSERT","lineNumber":36,"content":"            float currentSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"INSERT","lineNumber":37,"content":"            "},{"type":"INSERT","lineNumber":38,"content":"            // Calcola il movimento"},{"type":"INSERT","lineNumber":39,"content":"            Vector2 movement = direction * currentSpeed * deltaTime;"},{"type":"INSERT","lineNumber":40,"content":"            "},{"type":"INSERT","lineNumber":41,"content":"            // Applica il movimento"},{"type":"INSERT","lineNumber":42,"content":"            entity.Transform.Position += movement;"},{"type":"INSERT","lineNumber":43,"content":"            "},{"type":"INSERT","lineNumber":44,"content":"            // Aggiorna la direzione di movimento"},{"type":"INSERT","lineNumber":45,"content":"            if (direction != Vector2.Zero)"},{"type":"INSERT","lineNumber":46,"content":"            {"},{"type":"INSERT","lineNumber":47,"content":"                entity.Movement.LastDirection = direction;"},{"type":"INSERT","lineNumber":48,"content":"                entity.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":49,"content":"            }"},{"type":"INSERT","lineNumber":50,"content":"            else"},{"type":"INSERT","lineNumber":51,"content":"            {"},{"type":"INSERT","lineNumber":52,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":53,"content":"            }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"            // Aggiorna la rotazione se l'entità dovrebbe ruotare verso la direzione di movimento"},{"type":"INSERT","lineNumber":56,"content":"            if (entity.Movement.RotateTowardsMovement && direction != Vector2.Zero)"},{"type":"INSERT","lineNumber":57,"content":"            {"},{"type":"INSERT","lineNumber":58,"content":"                float targetRotation = (float)System.Math.Atan2(direction.Y, direction.X);"},{"type":"INSERT","lineNumber":59,"content":"                "},{"type":"INSERT","lineNumber":60,"content":"                if (entity.Movement.SmoothRotation)"},{"type":"INSERT","lineNumber":61,"content":"                {"},{"type":"INSERT","lineNumber":62,"content":"                    // Interpolazione fluida della rotazione"},{"type":"INSERT","lineNumber":63,"content":"                    float rotationSpeed = entity.Movement.RotationSpeed * deltaTime;"},{"type":"INSERT","lineNumber":64,"content":"                    entity.Transform.Rotation = LerpAngle(entity.Transform.Rotation, targetRotation, rotationSpeed);"},{"type":"INSERT","lineNumber":65,"content":"                }"},{"type":"INSERT","lineNumber":66,"content":"                else"},{"type":"INSERT","lineNumber":67,"content":"                {"},{"type":"INSERT","lineNumber":68,"content":"                    entity.Transform.Rotation = targetRotation;"},{"type":"INSERT","lineNumber":69,"content":"                }"},{"type":"INSERT","lineNumber":70,"content":"            }"},{"type":"INSERT","lineNumber":71,"content":"        }"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":74,"content":"        /// Muove un'entità verso una posizione target"},{"type":"INSERT","lineNumber":75,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":76,"content":"        public bool MoveTowardsTarget(Entity entity, Vector2 targetPosition, float deltaTime, float stoppingDistance = 0f)"},{"type":"INSERT","lineNumber":77,"content":"        {"},{"type":"INSERT","lineNumber":78,"content":"            if (entity?.Movement == null || entity.Transform == null) return false;"},{"type":"INSERT","lineNumber":79,"content":""},{"type":"INSERT","lineNumber":80,"content":"            Vector2 direction = targetPosition - entity.Transform.Position;"},{"type":"INSERT","lineNumber":81,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"            // Controlla se abbiamo raggiunto il target"},{"type":"INSERT","lineNumber":84,"content":"            if (distance <= stoppingDistance)"},{"type":"INSERT","lineNumber":85,"content":"            {"},{"type":"INSERT","lineNumber":86,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":87,"content":"                return true; // Target raggiunto"},{"type":"INSERT","lineNumber":88,"content":"            }"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"            // Normalizza la direzione"},{"type":"INSERT","lineNumber":91,"content":"            direction.Normalize();"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"            // Muovi verso il target"},{"type":"INSERT","lineNumber":94,"content":"            MoveEntity(entity, direction, deltaTime);"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"            return false; // Target non ancora raggiunto"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":100,"content":"        /// Applica una forza di knockback a un'entità"},{"type":"INSERT","lineNumber":101,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":102,"content":"        public void ApplyKnockback(Entity entity, Vector2 knockbackDirection, float force, float deltaTime)"},{"type":"INSERT","lineNumber":103,"content":"        {"},{"type":"INSERT","lineNumber":104,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"INSERT","lineNumber":106,"content":"            Vector2 knockbackMovement = knockbackDirection * force * deltaTime;"},{"type":"INSERT","lineNumber":107,"content":"            entity.Transform.Position += knockbackMovement;"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"            // Riduce gradualmente il knockback"},{"type":"INSERT","lineNumber":110,"content":"            entity.Movement.KnockbackForce *= 0.9f;"},{"type":"INSERT","lineNumber":111,"content":"            "},{"type":"INSERT","lineNumber":112,"content":"            if (entity.Movement.KnockbackForce < 0.1f)"},{"type":"INSERT","lineNumber":113,"content":"            {"},{"type":"INSERT","lineNumber":114,"content":"                entity.Movement.KnockbackForce = 0f;"},{"type":"INSERT","lineNumber":115,"content":"            }"},{"type":"INSERT","lineNumber":116,"content":"        }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":119,"content":"        /// Movimento con accelerazione e decelerazione"},{"type":"INSERT","lineNumber":120,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":121,"content":"        public void UpdateSmoothMovement(Entity entity, Vector2 targetDirection, float deltaTime)"},{"type":"INSERT","lineNumber":122,"content":"        {"},{"type":"INSERT","lineNumber":123,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"INSERT","lineNumber":125,"content":"            float acceleration = entity.Movement.Acceleration;"},{"type":"INSERT","lineNumber":126,"content":"            float deceleration = entity.Movement.Deceleration;"},{"type":"INSERT","lineNumber":127,"content":"            float maxSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"            // Calcola la velocità target"},{"type":"INSERT","lineNumber":130,"content":"            Vector2 targetVelocity = targetDirection * maxSpeed;"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"            // Interpola verso la velocità target"},{"type":"INSERT","lineNumber":133,"content":"            if (targetDirection != Vector2.Zero)"},{"type":"INSERT","lineNumber":134,"content":"            {"},{"type":"INSERT","lineNumber":135,"content":"                // Accelerazione"},{"type":"INSERT","lineNumber":136,"content":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"INSERT","lineNumber":137,"content":"                    entity.Movement.Velocity, "},{"type":"INSERT","lineNumber":138,"content":"                    targetVelocity, "},{"type":"INSERT","lineNumber":139,"content":"                    acceleration * deltaTime"},{"type":"INSERT","lineNumber":140,"content":"                );"},{"type":"INSERT","lineNumber":141,"content":"            }"},{"type":"INSERT","lineNumber":142,"content":"            else"},{"type":"INSERT","lineNumber":143,"content":"            {"},{"type":"INSERT","lineNumber":144,"content":"                // Decelerazione"},{"type":"INSERT","lineNumber":145,"content":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"INSERT","lineNumber":146,"content":"                    entity.Movement.Velocity, "},{"type":"INSERT","lineNumber":147,"content":"                    Vector2.Zero, "},{"type":"INSERT","lineNumber":148,"content":"                    deceleration * deltaTime"},{"type":"INSERT","lineNumber":149,"content":"                );"},{"type":"INSERT","lineNumber":150,"content":"            }"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"            // Applica la velocità alla posizione"},{"type":"INSERT","lineNumber":153,"content":"            entity.Transform.Position += entity.Movement.Velocity * deltaTime;"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"            // Aggiorna lo stato di movimento"},{"type":"INSERT","lineNumber":156,"content":"            entity.Movement.IsMoving = entity.Movement.Velocity.LengthSquared() > 0.01f;"},{"type":"INSERT","lineNumber":157,"content":"            "},{"type":"INSERT","lineNumber":158,"content":"            if (entity.Movement.IsMoving)"},{"type":"INSERT","lineNumber":159,"content":"            {"},{"type":"INSERT","lineNumber":160,"content":"                entity.Movement.LastDirection = Vector2.Normalize(entity.Movement.Velocity);"},{"type":"INSERT","lineNumber":161,"content":"            }"},{"type":"INSERT","lineNumber":162,"content":"        }"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"INSERT","lineNumber":164,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":165,"content":"        /// Movimento pattuglia tra due punti"},{"type":"INSERT","lineNumber":166,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":167,"content":"        public void UpdatePatrolMovement(Entity entity, Vector2 pointA, Vector2 pointB, float deltaTime)"},{"type":"INSERT","lineNumber":168,"content":"        {"},{"type":"INSERT","lineNumber":169,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":170,"content":""},{"type":"INSERT","lineNumber":171,"content":"            Vector2 currentTarget = entity.Movement.PatrolTargetA ? pointA : pointB;"},{"type":"INSERT","lineNumber":172,"content":"            "},{"type":"INSERT","lineNumber":173,"content":"            if (MoveTowardsTarget(entity, currentTarget, deltaTime, 5f))"},{"type":"INSERT","lineNumber":174,"content":"            {"},{"type":"INSERT","lineNumber":175,"content":"                // Cambia direzione quando raggiunge il target"},{"type":"INSERT","lineNumber":176,"content":"                entity.Movement.PatrolTargetA = !entity.Movement.PatrolTargetA;"},{"type":"INSERT","lineNumber":177,"content":"                "},{"type":"INSERT","lineNumber":178,"content":"                // Pausa opzionale al punto di pattuglia"},{"type":"INSERT","lineNumber":179,"content":"                entity.Movement.PatrolPauseTimer = entity.Movement.PatrolPauseDuration;"},{"type":"INSERT","lineNumber":180,"content":"            }"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"            // Gestisce la pausa"},{"type":"INSERT","lineNumber":183,"content":"            if (entity.Movement.PatrolPauseTimer > 0)"},{"type":"INSERT","lineNumber":184,"content":"            {"},{"type":"INSERT","lineNumber":185,"content":"                entity.Movement.PatrolPauseTimer -= deltaTime;"},{"type":"INSERT","lineNumber":186,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":187,"content":"            }"},{"type":"INSERT","lineNumber":188,"content":"        }"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":191,"content":"        /// Movimento circolare attorno a un punto"},{"type":"INSERT","lineNumber":192,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":193,"content":"        public void UpdateCircularMovement(Entity entity, Vector2 centerPoint, float radius, float angularSpeed, float deltaTime)"},{"type":"INSERT","lineNumber":194,"content":"        {"},{"type":"INSERT","lineNumber":195,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"            // Incrementa l'angolo"},{"type":"INSERT","lineNumber":198,"content":"            entity.Movement.CircularAngle += angularSpeed * deltaTime;"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"            // Calcola la nuova posizione"},{"type":"INSERT","lineNumber":201,"content":"            Vector2 offset = new Vector2("},{"type":"INSERT","lineNumber":202,"content":"                (float)System.Math.Cos(entity.Movement.CircularAngle) * radius,"},{"type":"INSERT","lineNumber":203,"content":"                (float)System.Math.Sin(entity.Movement.CircularAngle) * radius"},{"type":"INSERT","lineNumber":204,"content":"            );"},{"type":"INSERT","lineNumber":205,"content":""},{"type":"INSERT","lineNumber":206,"content":"            entity.Transform.Position = centerPoint + offset;"},{"type":"INSERT","lineNumber":207,"content":"            entity.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":208,"content":""},{"type":"INSERT","lineNumber":209,"content":"            // Aggiorna la direzione per il rendering"},{"type":"INSERT","lineNumber":210,"content":"            Vector2 tangent = new Vector2("},{"type":"INSERT","lineNumber":211,"content":"                -(float)System.Math.Sin(entity.Movement.CircularAngle),"},{"type":"INSERT","lineNumber":212,"content":"                (float)System.Math.Cos(entity.Movement.CircularAngle)"},{"type":"INSERT","lineNumber":213,"content":"            );"},{"type":"INSERT","lineNumber":214,"content":"            entity.Movement.LastDirection = tangent;"},{"type":"INSERT","lineNumber":215,"content":"        }"},{"type":"INSERT","lineNumber":216,"content":""},{"type":"INSERT","lineNumber":217,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":218,"content":"        /// Applica attrito al movimento"},{"type":"INSERT","lineNumber":219,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":220,"content":"        public void ApplyFriction(Entity entity, float frictionCoefficient, float deltaTime)"},{"type":"INSERT","lineNumber":221,"content":"        {"},{"type":"INSERT","lineNumber":222,"content":"            if (entity?.Movement == null) return;"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"            float friction = 1f - (frictionCoefficient * deltaTime);"},{"type":"INSERT","lineNumber":225,"content":"            friction = MathHelper.Max(0f, friction);"},{"type":"INSERT","lineNumber":226,"content":""},{"type":"INSERT","lineNumber":227,"content":"            entity.Movement.Velocity *= friction;"},{"type":"INSERT","lineNumber":228,"content":"        }"},{"type":"INSERT","lineNumber":229,"content":""},{"type":"INSERT","lineNumber":230,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":231,"content":"        /// Interpolazione angolare per rotazioni fluide"},{"type":"INSERT","lineNumber":232,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":233,"content":"        private float LerpAngle(float from, float to, float t)"},{"type":"INSERT","lineNumber":234,"content":"        {"},{"type":"INSERT","lineNumber":235,"content":"            float difference = to - from;"},{"type":"INSERT","lineNumber":236,"content":"            "},{"type":"INSERT","lineNumber":237,"content":"            // Normalizza la differenza per prendere il percorso più breve"},{"type":"INSERT","lineNumber":238,"content":"            while (difference > MathHelper.Pi)"},{"type":"INSERT","lineNumber":239,"content":"                difference -= MathHelper.TwoPi;"},{"type":"INSERT","lineNumber":240,"content":"            while (difference < -MathHelper.Pi)"},{"type":"INSERT","lineNumber":241,"content":"                difference += MathHelper.TwoPi;"},{"type":"INSERT","lineNumber":242,"content":""},{"type":"INSERT","lineNumber":243,"content":"            return from + difference * t;"},{"type":"INSERT","lineNumber":244,"content":"        }"},{"type":"INSERT","lineNumber":245,"content":""},{"type":"INSERT","lineNumber":246,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":247,"content":"        /// Controlla se un'entità può muoversi in una direzione (per prevenire movimenti non validi)"},{"type":"INSERT","lineNumber":248,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":249,"content":"        public bool CanMove(Entity entity, Vector2 direction, float distance = 1f)"},{"type":"INSERT","lineNumber":250,"content":"        {"},{"type":"INSERT","lineNumber":251,"content":"            if (entity?.Transform == null) return false;"},{"type":"INSERT","lineNumber":252,"content":""},{"type":"INSERT","lineNumber":253,"content":"            // Calcola la posizione futura"},{"type":"INSERT","lineNumber":254,"content":"            Vector2 futurePosition = entity.Transform.Position + direction * distance;"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"            // Qui potresti aggiungere controlli per collisioni o limiti del mondo"},{"type":"INSERT","lineNumber":257,"content":"            // Per ora ritorna sempre true"},{"type":"INSERT","lineNumber":258,"content":"            return true;"},{"type":"INSERT","lineNumber":259,"content":"        }"},{"type":"INSERT","lineNumber":260,"content":"    }"}]},{"timestamp":1756229095614,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"{"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":6,"oldContent":"}"},{"type":"INSERT","lineNumber":5,"content":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"    }"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":12,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":14,"oldContent":"            // Per ora ritorna sempre true"},{"type":"DELETE","lineNumber":16,"oldContent":"            // Qui potresti aggiungere controlli per collisioni o limiti del mondo"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"            Vector2 futurePosition = entity.Transform.Position + direction * distance;"},{"type":"DELETE","lineNumber":22,"oldContent":"            // Calcola la posizione futura"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"            if (entity?.Transform == null) return false;"},{"type":"DELETE","lineNumber":28,"oldContent":"        {"},{"type":"DELETE","lineNumber":30,"oldContent":"        public bool CanMove(Entity entity, Vector2 direction, float distance = 1f)"},{"type":"DELETE","lineNumber":32,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":34,"oldContent":"        /// Controlla se un'entità può muoversi in una direzione (per prevenire movimenti non validi)"},{"type":"DELETE","lineNumber":36,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        }"},{"type":"DELETE","lineNumber":42,"oldContent":"            return from + difference * t;"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"                difference += MathHelper.TwoPi;"},{"type":"DELETE","lineNumber":48,"oldContent":"            while (difference < -MathHelper.Pi)"},{"type":"DELETE","lineNumber":50,"oldContent":"                difference -= MathHelper.TwoPi;"},{"type":"DELETE","lineNumber":52,"oldContent":"            while (difference > MathHelper.Pi)"},{"type":"DELETE","lineNumber":54,"oldContent":"            // Normalizza la differenza per prendere il percorso più breve"},{"type":"DELETE","lineNumber":56,"oldContent":"            "},{"type":"DELETE","lineNumber":58,"oldContent":"            float difference = to - from;"},{"type":"DELETE","lineNumber":60,"oldContent":"        {"},{"type":"DELETE","lineNumber":62,"oldContent":"        private float LerpAngle(float from, float to, float t)"},{"type":"DELETE","lineNumber":64,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":66,"oldContent":"        /// Interpolazione angolare per rotazioni fluide"},{"type":"DELETE","lineNumber":68,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":74,"oldContent":"            entity.Movement.Velocity *= friction;"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"            friction = MathHelper.Max(0f, friction);"},{"type":"DELETE","lineNumber":80,"oldContent":"            float friction = 1f - (frictionCoefficient * deltaTime);"},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":84,"oldContent":"            if (entity?.Movement == null) return;"},{"type":"DELETE","lineNumber":86,"oldContent":"        {"},{"type":"DELETE","lineNumber":88,"oldContent":"        public void ApplyFriction(Entity entity, float frictionCoefficient, float deltaTime)"},{"type":"DELETE","lineNumber":90,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":92,"oldContent":"        /// Applica attrito al movimento"},{"type":"DELETE","lineNumber":94,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":100,"oldContent":"            entity.Movement.LastDirection = tangent;"},{"type":"DELETE","lineNumber":102,"oldContent":"            );"},{"type":"DELETE","lineNumber":104,"oldContent":"                (float)System.Math.Cos(entity.Movement.CircularAngle)"},{"type":"DELETE","lineNumber":106,"oldContent":"                -(float)System.Math.Sin(entity.Movement.CircularAngle),"},{"type":"DELETE","lineNumber":108,"oldContent":"            Vector2 tangent = new Vector2("},{"type":"DELETE","lineNumber":110,"oldContent":"            // Aggiorna la direzione per il rendering"},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":114,"oldContent":"            entity.Movement.IsMoving = true;"},{"type":"DELETE","lineNumber":116,"oldContent":"            entity.Transform.Position = centerPoint + offset;"},{"type":"DELETE","lineNumber":118,"oldContent":""},{"type":"DELETE","lineNumber":120,"oldContent":"            );"},{"type":"DELETE","lineNumber":122,"oldContent":"                (float)System.Math.Sin(entity.Movement.CircularAngle) * radius"},{"type":"DELETE","lineNumber":124,"oldContent":"                (float)System.Math.Cos(entity.Movement.CircularAngle) * radius,"},{"type":"DELETE","lineNumber":126,"oldContent":"            Vector2 offset = new Vector2("},{"type":"DELETE","lineNumber":128,"oldContent":"            // Calcola la nuova posizione"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":132,"oldContent":"            entity.Movement.CircularAngle += angularSpeed * deltaTime;"},{"type":"DELETE","lineNumber":134,"oldContent":"            // Incrementa l'angolo"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":138,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":140,"oldContent":"        {"},{"type":"DELETE","lineNumber":142,"oldContent":"        public void UpdateCircularMovement(Entity entity, Vector2 centerPoint, float radius, float angularSpeed, float deltaTime)"},{"type":"DELETE","lineNumber":145,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":146,"oldContent":"        /// Movimento circolare attorno a un punto"},{"type":"DELETE","lineNumber":148,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":150,"oldContent":""},{"type":"DELETE","lineNumber":152,"oldContent":"        }"},{"type":"DELETE","lineNumber":154,"oldContent":"            }"},{"type":"DELETE","lineNumber":156,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":158,"oldContent":"                entity.Movement.PatrolPauseTimer -= deltaTime;"},{"type":"DELETE","lineNumber":160,"oldContent":"            {"},{"type":"DELETE","lineNumber":162,"oldContent":"            if (entity.Movement.PatrolPauseTimer > 0)"},{"type":"DELETE","lineNumber":164,"oldContent":"            // Gestisce la pausa"},{"type":"DELETE","lineNumber":166,"oldContent":""},{"type":"DELETE","lineNumber":168,"oldContent":"            }"},{"type":"DELETE","lineNumber":170,"oldContent":"                entity.Movement.PatrolPauseTimer = entity.Movement.PatrolPauseDuration;"},{"type":"DELETE","lineNumber":172,"oldContent":"                // Pausa opzionale al punto di pattuglia"},{"type":"DELETE","lineNumber":174,"oldContent":"                "},{"type":"DELETE","lineNumber":176,"oldContent":"                entity.Movement.PatrolTargetA = !entity.Movement.PatrolTargetA;"},{"type":"DELETE","lineNumber":178,"oldContent":"                // Cambia direzione quando raggiunge il target"},{"type":"DELETE","lineNumber":180,"oldContent":"            {"},{"type":"DELETE","lineNumber":182,"oldContent":"            if (MoveTowardsTarget(entity, currentTarget, deltaTime, 5f))"},{"type":"DELETE","lineNumber":184,"oldContent":"            "},{"type":"DELETE","lineNumber":186,"oldContent":"            Vector2 currentTarget = entity.Movement.PatrolTargetA ? pointA : pointB;"},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"DELETE","lineNumber":190,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":192,"oldContent":"        {"},{"type":"DELETE","lineNumber":194,"oldContent":"        public void UpdatePatrolMovement(Entity entity, Vector2 pointA, Vector2 pointB, float deltaTime)"},{"type":"DELETE","lineNumber":197,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":198,"oldContent":"        /// Movimento pattuglia tra due punti"},{"type":"DELETE","lineNumber":200,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":202,"oldContent":""},{"type":"DELETE","lineNumber":204,"oldContent":"        }"},{"type":"DELETE","lineNumber":206,"oldContent":"            }"},{"type":"DELETE","lineNumber":208,"oldContent":"                entity.Movement.LastDirection = Vector2.Normalize(entity.Movement.Velocity);"},{"type":"DELETE","lineNumber":210,"oldContent":"            {"},{"type":"DELETE","lineNumber":212,"oldContent":"            if (entity.Movement.IsMoving)"},{"type":"DELETE","lineNumber":214,"oldContent":"            "},{"type":"DELETE","lineNumber":216,"oldContent":"            entity.Movement.IsMoving = entity.Movement.Velocity.LengthSquared() > 0.01f;"},{"type":"DELETE","lineNumber":218,"oldContent":"            // Aggiorna lo stato di movimento"},{"type":"DELETE","lineNumber":220,"oldContent":""},{"type":"DELETE","lineNumber":222,"oldContent":"            entity.Transform.Position += entity.Movement.Velocity * deltaTime;"},{"type":"DELETE","lineNumber":224,"oldContent":"            // Applica la velocità alla posizione"},{"type":"DELETE","lineNumber":226,"oldContent":""},{"type":"DELETE","lineNumber":228,"oldContent":"            }"},{"type":"DELETE","lineNumber":230,"oldContent":"                );"},{"type":"DELETE","lineNumber":232,"oldContent":"                    deceleration * deltaTime"},{"type":"DELETE","lineNumber":234,"oldContent":"                    Vector2.Zero, "},{"type":"DELETE","lineNumber":236,"oldContent":"                    entity.Movement.Velocity, "},{"type":"DELETE","lineNumber":238,"oldContent":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"DELETE","lineNumber":240,"oldContent":"                // Decelerazione"},{"type":"DELETE","lineNumber":242,"oldContent":"            {"},{"type":"DELETE","lineNumber":244,"oldContent":"            else"},{"type":"DELETE","lineNumber":246,"oldContent":"            }"},{"type":"DELETE","lineNumber":248,"oldContent":"                );"},{"type":"DELETE","lineNumber":250,"oldContent":"                    acceleration * deltaTime"},{"type":"DELETE","lineNumber":252,"oldContent":"                    targetVelocity, "},{"type":"DELETE","lineNumber":254,"oldContent":"                    entity.Movement.Velocity, "},{"type":"DELETE","lineNumber":256,"oldContent":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"DELETE","lineNumber":258,"oldContent":"                // Accelerazione"},{"type":"DELETE","lineNumber":260,"oldContent":"            {"},{"type":"INSERT","lineNumber":134,"content":"            {"},{"type":"INSERT","lineNumber":135,"content":"                // Accelerazione"},{"type":"INSERT","lineNumber":136,"content":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"INSERT","lineNumber":137,"content":"                    entity.Movement.Velocity, "},{"type":"INSERT","lineNumber":138,"content":"                    targetVelocity, "},{"type":"INSERT","lineNumber":139,"content":"                    acceleration * deltaTime"},{"type":"INSERT","lineNumber":140,"content":"                );"},{"type":"INSERT","lineNumber":141,"content":"            }"},{"type":"INSERT","lineNumber":142,"content":"            else"},{"type":"INSERT","lineNumber":143,"content":"            {"},{"type":"INSERT","lineNumber":144,"content":"                // Decelerazione"},{"type":"INSERT","lineNumber":145,"content":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"INSERT","lineNumber":146,"content":"                    entity.Movement.Velocity, "},{"type":"INSERT","lineNumber":147,"content":"                    Vector2.Zero, "},{"type":"INSERT","lineNumber":148,"content":"                    deceleration * deltaTime"},{"type":"INSERT","lineNumber":149,"content":"                );"},{"type":"INSERT","lineNumber":150,"content":"            }"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"            // Applica la velocità alla posizione"},{"type":"INSERT","lineNumber":153,"content":"            entity.Transform.Position += entity.Movement.Velocity * deltaTime;"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"            // Aggiorna lo stato di movimento"},{"type":"INSERT","lineNumber":156,"content":"            entity.Movement.IsMoving = entity.Movement.Velocity.LengthSquared() > 0.01f;"},{"type":"INSERT","lineNumber":157,"content":"            "},{"type":"INSERT","lineNumber":158,"content":"            if (entity.Movement.IsMoving)"},{"type":"INSERT","lineNumber":159,"content":"            {"},{"type":"INSERT","lineNumber":160,"content":"                entity.Movement.LastDirection = Vector2.Normalize(entity.Movement.Velocity);"},{"type":"INSERT","lineNumber":161,"content":"            }"},{"type":"INSERT","lineNumber":162,"content":"        }"},{"type":"INSERT","lineNumber":163,"content":""},{"type":"INSERT","lineNumber":164,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":165,"content":"        /// Movimento pattuglia tra due punti"},{"type":"INSERT","lineNumber":166,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":167,"content":"        public void UpdatePatrolMovement(Entity entity, Vector2 pointA, Vector2 pointB, float deltaTime)"},{"type":"INSERT","lineNumber":168,"content":"        {"},{"type":"INSERT","lineNumber":169,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":170,"content":""},{"type":"INSERT","lineNumber":171,"content":"            Vector2 currentTarget = entity.Movement.PatrolTargetA ? pointA : pointB;"},{"type":"INSERT","lineNumber":172,"content":"            "},{"type":"INSERT","lineNumber":173,"content":"            if (MoveTowardsTarget(entity, currentTarget, deltaTime, 5f))"},{"type":"INSERT","lineNumber":174,"content":"            {"},{"type":"INSERT","lineNumber":175,"content":"                // Cambia direzione quando raggiunge il target"},{"type":"INSERT","lineNumber":176,"content":"                entity.Movement.PatrolTargetA = !entity.Movement.PatrolTargetA;"},{"type":"INSERT","lineNumber":177,"content":"                "},{"type":"INSERT","lineNumber":178,"content":"                // Pausa opzionale al punto di pattuglia"},{"type":"INSERT","lineNumber":179,"content":"                entity.Movement.PatrolPauseTimer = entity.Movement.PatrolPauseDuration;"},{"type":"INSERT","lineNumber":180,"content":"            }"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"            // Gestisce la pausa"},{"type":"INSERT","lineNumber":183,"content":"            if (entity.Movement.PatrolPauseTimer > 0)"},{"type":"INSERT","lineNumber":184,"content":"            {"},{"type":"INSERT","lineNumber":185,"content":"                entity.Movement.PatrolPauseTimer -= deltaTime;"},{"type":"INSERT","lineNumber":186,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":187,"content":"            }"},{"type":"INSERT","lineNumber":188,"content":"        }"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":191,"content":"        /// Movimento circolare attorno a un punto"},{"type":"INSERT","lineNumber":192,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":193,"content":"        public void UpdateCircularMovement(Entity entity, Vector2 centerPoint, float radius, float angularSpeed, float deltaTime)"},{"type":"INSERT","lineNumber":194,"content":"        {"},{"type":"INSERT","lineNumber":195,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"            // Incrementa l'angolo"},{"type":"INSERT","lineNumber":198,"content":"            entity.Movement.CircularAngle += angularSpeed * deltaTime;"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"            // Calcola la nuova posizione"},{"type":"INSERT","lineNumber":201,"content":"            Vector2 offset = new Vector2("},{"type":"INSERT","lineNumber":202,"content":"                (float)System.Math.Cos(entity.Movement.CircularAngle) * radius,"},{"type":"INSERT","lineNumber":203,"content":"                (float)System.Math.Sin(entity.Movement.CircularAngle) * radius"},{"type":"INSERT","lineNumber":204,"content":"            );"},{"type":"INSERT","lineNumber":205,"content":""},{"type":"INSERT","lineNumber":206,"content":"            entity.Transform.Position = centerPoint + offset;"},{"type":"INSERT","lineNumber":207,"content":"            entity.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":208,"content":""},{"type":"INSERT","lineNumber":209,"content":"            // Aggiorna la direzione per il rendering"},{"type":"INSERT","lineNumber":210,"content":"            Vector2 tangent = new Vector2("},{"type":"INSERT","lineNumber":211,"content":"                -(float)System.Math.Sin(entity.Movement.CircularAngle),"},{"type":"INSERT","lineNumber":212,"content":"                (float)System.Math.Cos(entity.Movement.CircularAngle)"},{"type":"INSERT","lineNumber":213,"content":"            );"},{"type":"INSERT","lineNumber":214,"content":"            entity.Movement.LastDirection = tangent;"},{"type":"INSERT","lineNumber":215,"content":"        }"},{"type":"INSERT","lineNumber":216,"content":""},{"type":"INSERT","lineNumber":217,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":218,"content":"        /// Applica attrito al movimento"},{"type":"INSERT","lineNumber":219,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":220,"content":"        public void ApplyFriction(Entity entity, float frictionCoefficient, float deltaTime)"},{"type":"INSERT","lineNumber":221,"content":"        {"},{"type":"INSERT","lineNumber":222,"content":"            if (entity?.Movement == null) return;"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"            float friction = 1f - (frictionCoefficient * deltaTime);"},{"type":"INSERT","lineNumber":225,"content":"            friction = MathHelper.Max(0f, friction);"},{"type":"INSERT","lineNumber":226,"content":""},{"type":"INSERT","lineNumber":227,"content":"            entity.Movement.Velocity *= friction;"},{"type":"INSERT","lineNumber":228,"content":"        }"},{"type":"INSERT","lineNumber":229,"content":""},{"type":"INSERT","lineNumber":230,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":231,"content":"        /// Interpolazione angolare per rotazioni fluide"},{"type":"INSERT","lineNumber":232,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":233,"content":"        private float LerpAngle(float from, float to, float t)"},{"type":"INSERT","lineNumber":234,"content":"        {"},{"type":"INSERT","lineNumber":235,"content":"            float difference = to - from;"},{"type":"INSERT","lineNumber":236,"content":"            "},{"type":"INSERT","lineNumber":237,"content":"            // Normalizza la differenza per prendere il percorso più breve"},{"type":"INSERT","lineNumber":238,"content":"            while (difference > MathHelper.Pi)"},{"type":"INSERT","lineNumber":239,"content":"                difference -= MathHelper.TwoPi;"},{"type":"INSERT","lineNumber":240,"content":"            while (difference < -MathHelper.Pi)"},{"type":"INSERT","lineNumber":241,"content":"                difference += MathHelper.TwoPi;"},{"type":"INSERT","lineNumber":242,"content":""},{"type":"INSERT","lineNumber":243,"content":"            return from + difference * t;"},{"type":"INSERT","lineNumber":244,"content":"        }"},{"type":"INSERT","lineNumber":245,"content":""},{"type":"INSERT","lineNumber":246,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":247,"content":"        /// Controlla se un'entità può muoversi in una direzione (per prevenire movimenti non validi)"},{"type":"INSERT","lineNumber":248,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":249,"content":"        public bool CanMove(Entity entity, Vector2 direction, float distance = 1f)"},{"type":"INSERT","lineNumber":250,"content":"        {"},{"type":"INSERT","lineNumber":251,"content":"            if (entity?.Transform == null) return false;"},{"type":"INSERT","lineNumber":252,"content":""},{"type":"INSERT","lineNumber":253,"content":"            // Calcola la posizione futura"},{"type":"INSERT","lineNumber":254,"content":"            Vector2 futurePosition = entity.Transform.Position + direction * distance;"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"            // Qui potresti aggiungere controlli per collisioni o limiti del mondo"},{"type":"INSERT","lineNumber":257,"content":"            // Per ora ritorna sempre true"},{"type":"INSERT","lineNumber":258,"content":"            return true;"},{"type":"INSERT","lineNumber":259,"content":"        }"},{"type":"INSERT","lineNumber":260,"content":"    }"},{"type":"INSERT","lineNumber":261,"content":"}"}]},{"timestamp":1756229107853,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"{"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":5,"content":"{"},{"type":"INSERT","lineNumber":70,"content":"            }"},{"type":"INSERT","lineNumber":71,"content":"        }"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":74,"content":"        /// Muove un'entità verso una posizione target"},{"type":"INSERT","lineNumber":75,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":76,"content":"        public bool MoveTowardsTarget(Entity entity, Vector2 targetPosition, float deltaTime, float stoppingDistance = 0f)"},{"type":"INSERT","lineNumber":77,"content":"        {"},{"type":"INSERT","lineNumber":78,"content":"            if (entity?.Movement == null || entity.Transform == null) return false;"},{"type":"INSERT","lineNumber":79,"content":""},{"type":"INSERT","lineNumber":80,"content":"            Vector2 direction = targetPosition - entity.Transform.Position;"},{"type":"INSERT","lineNumber":81,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"            // Controlla se abbiamo raggiunto il target"},{"type":"INSERT","lineNumber":84,"content":"            if (distance <= stoppingDistance)"},{"type":"DELETE","lineNumber":71,"oldContent":"                // Accelerazione"},{"type":"INSERT","lineNumber":86,"content":"                entity.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":87,"content":"                return true; // Target raggiunto"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"            // Normalizza la direzione"},{"type":"INSERT","lineNumber":91,"content":"            direction.Normalize();"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"            // Muovi verso il target"},{"type":"INSERT","lineNumber":94,"content":"            MoveEntity(entity, direction, deltaTime);"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"            return false; // Target non ancora raggiunto"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":100,"content":"        /// Applica una forza di knockback a un'entità"},{"type":"INSERT","lineNumber":101,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":102,"content":"        public void ApplyKnockback(Entity entity, Vector2 knockbackDirection, float force, float deltaTime)"},{"type":"INSERT","lineNumber":103,"content":"        {"},{"type":"INSERT","lineNumber":104,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"INSERT","lineNumber":106,"content":"            Vector2 knockbackMovement = knockbackDirection * force * deltaTime;"},{"type":"INSERT","lineNumber":107,"content":"            entity.Transform.Position += knockbackMovement;"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"            // Riduce gradualmente il knockback"},{"type":"INSERT","lineNumber":110,"content":"            entity.Movement.KnockbackForce *= 0.9f;"},{"type":"INSERT","lineNumber":111,"content":"            "},{"type":"INSERT","lineNumber":112,"content":"            if (entity.Movement.KnockbackForce < 0.1f)"},{"type":"INSERT","lineNumber":113,"content":"            {"},{"type":"INSERT","lineNumber":114,"content":"                entity.Movement.KnockbackForce = 0f;"},{"type":"INSERT","lineNumber":115,"content":"            }"},{"type":"INSERT","lineNumber":116,"content":"        }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":119,"content":"        /// Movimento con accelerazione e decelerazione"},{"type":"INSERT","lineNumber":120,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":121,"content":"        public void UpdateSmoothMovement(Entity entity, Vector2 targetDirection, float deltaTime)"},{"type":"INSERT","lineNumber":122,"content":"        {"},{"type":"INSERT","lineNumber":123,"content":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"INSERT","lineNumber":125,"content":"            float acceleration = entity.Movement.Acceleration;"},{"type":"INSERT","lineNumber":126,"content":"            float deceleration = entity.Movement.Deceleration;"},{"type":"INSERT","lineNumber":127,"content":"            float maxSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"            // Calcola la velocità target"},{"type":"INSERT","lineNumber":130,"content":"            Vector2 targetVelocity = targetDirection * maxSpeed;"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"            // Interpola verso la velocità target"},{"type":"INSERT","lineNumber":133,"content":"            if (targetDirection != Vector2.Zero)"},{"type":"INSERT","lineNumber":134,"content":"            {"},{"type":"INSERT","lineNumber":135,"content":"                // Accelerazione"},{"type":"DELETE","lineNumber":75,"oldContent":"        }"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":84,"oldContent":"        /// Muove un'entità verso una posizione target"},{"type":"DELETE","lineNumber":86,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":90,"oldContent":"        public bool MoveTowardsTarget(Entity entity, Vector2 targetPosition, float deltaTime, float stoppingDistance = 0f)"},{"type":"DELETE","lineNumber":93,"oldContent":"        {"},{"type":"DELETE","lineNumber":96,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return false;"},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"            Vector2 direction = targetPosition - entity.Transform.Position;"},{"type":"DELETE","lineNumber":105,"oldContent":"            float distance = direction.Length();"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":111,"oldContent":"            // Controlla se abbiamo raggiunto il target"},{"type":"DELETE","lineNumber":114,"oldContent":"            if (distance <= stoppingDistance)"},{"type":"DELETE","lineNumber":117,"oldContent":"            {"},{"type":"DELETE","lineNumber":120,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":123,"oldContent":"                return true; // Target raggiunto"},{"type":"DELETE","lineNumber":126,"oldContent":"            }"},{"type":"DELETE","lineNumber":129,"oldContent":""},{"type":"DELETE","lineNumber":132,"oldContent":"            // Normalizza la direzione"},{"type":"DELETE","lineNumber":135,"oldContent":"            direction.Normalize();"},{"type":"DELETE","lineNumber":138,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"            // Muovi verso il target"},{"type":"DELETE","lineNumber":144,"oldContent":"            MoveEntity(entity, direction, deltaTime);"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":150,"oldContent":"            return false; // Target non ancora raggiunto"},{"type":"DELETE","lineNumber":153,"oldContent":"        }"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":159,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":162,"oldContent":"        /// Applica una forza di knockback a un'entità"},{"type":"DELETE","lineNumber":164,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":168,"oldContent":"        public void ApplyKnockback(Entity entity, Vector2 knockbackDirection, float force, float deltaTime)"},{"type":"DELETE","lineNumber":171,"oldContent":"        {"},{"type":"DELETE","lineNumber":174,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":177,"oldContent":""},{"type":"DELETE","lineNumber":180,"oldContent":"            Vector2 knockbackMovement = knockbackDirection * force * deltaTime;"},{"type":"DELETE","lineNumber":183,"oldContent":"            entity.Transform.Position += knockbackMovement;"},{"type":"DELETE","lineNumber":186,"oldContent":""},{"type":"DELETE","lineNumber":189,"oldContent":"            // Riduce gradualmente il knockback"},{"type":"DELETE","lineNumber":192,"oldContent":"            entity.Movement.KnockbackForce *= 0.9f;"},{"type":"DELETE","lineNumber":195,"oldContent":"            "},{"type":"DELETE","lineNumber":198,"oldContent":"            if (entity.Movement.KnockbackForce < 0.1f)"},{"type":"DELETE","lineNumber":201,"oldContent":"            {"},{"type":"DELETE","lineNumber":204,"oldContent":"                entity.Movement.KnockbackForce = 0f;"},{"type":"DELETE","lineNumber":207,"oldContent":"            }"},{"type":"DELETE","lineNumber":211,"oldContent":"        }"},{"type":"DELETE","lineNumber":213,"oldContent":""},{"type":"DELETE","lineNumber":216,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":219,"oldContent":"        /// Movimento con accelerazione e decelerazione"},{"type":"DELETE","lineNumber":222,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":225,"oldContent":"        public void UpdateSmoothMovement(Entity entity, Vector2 targetDirection, float deltaTime)"},{"type":"DELETE","lineNumber":228,"oldContent":"        {"},{"type":"DELETE","lineNumber":231,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"DELETE","lineNumber":237,"oldContent":"            float acceleration = entity.Movement.Acceleration;"},{"type":"DELETE","lineNumber":240,"oldContent":"            float deceleration = entity.Movement.Deceleration;"},{"type":"DELETE","lineNumber":243,"oldContent":"            float maxSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"DELETE","lineNumber":247,"oldContent":""},{"type":"DELETE","lineNumber":249,"oldContent":"            // Calcola la velocità target"},{"type":"DELETE","lineNumber":252,"oldContent":"            Vector2 targetVelocity = targetDirection * maxSpeed;"},{"type":"DELETE","lineNumber":255,"oldContent":""},{"type":"DELETE","lineNumber":258,"oldContent":"            // Interpola verso la velocità target"},{"type":"DELETE","lineNumber":261,"oldContent":"            if (targetDirection != Vector2.Zero)"}]},{"timestamp":1756230128587,"changes":[{"type":"INSERT","lineNumber":0,"content":"// ============================================"},{"type":"INSERT","lineNumber":1,"content":"// Systems/MovementSystem.cs"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"{"},{"type":"INSERT","lineNumber":6,"content":""},{"type":"DELETE","lineNumber":6,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":7,"oldContent":"    /// Sistema responsabile del movimento delle entità"},{"type":"MODIFY","lineNumber":8,"content":"{","oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":11,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":12,"oldContent":"        /// Aggiorna il movimento del giocatore basato sull'input"},{"type":"DELETE","lineNumber":13,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":18,"oldContent":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":19,"oldContent":"            Vector2 movementDirection = inputManager.GetMovementDirection();"},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":"            // Applica il movimento se il giocatore è vivo"},{"type":"DELETE","lineNumber":22,"oldContent":"            if (player.Health.CurrentHealth > 0)"},{"type":"DELETE","lineNumber":23,"oldContent":"            {"},{"type":"DELETE","lineNumber":24,"oldContent":"                MoveEntity(player, movementDirection, deltaTime);"},{"type":"DELETE","lineNumber":25,"oldContent":"            }"},{"type":"DELETE","lineNumber":26,"oldContent":"        }"},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":28,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":29,"oldContent":"        /// Muove un'entità nella direzione specificata"},{"type":"DELETE","lineNumber":30,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":31,"oldContent":"        public void MoveEntity(Entity entity, Vector2 direction, float deltaTime)"},{"type":"DELETE","lineNumber":32,"oldContent":"        {"},{"type":"DELETE","lineNumber":33,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"            // Calcola la velocità effettiva considerando i modificatori"},{"type":"DELETE","lineNumber":36,"oldContent":"            float currentSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"INSERT","lineNumber":15,"content":"            var direction = inputManager.GetMovementDirection();"},{"type":"DELETE","lineNumber":38,"oldContent":"            // Calcola il movimento"},{"type":"DELETE","lineNumber":39,"oldContent":"            Vector2 movement = direction * currentSpeed * deltaTime;"},{"type":"DELETE","lineNumber":40,"oldContent":"            "},{"type":"DELETE","lineNumber":41,"oldContent":"            // Applica il movimento"},{"type":"DELETE","lineNumber":42,"oldContent":"            entity.Transform.Position += movement;"},{"type":"DELETE","lineNumber":43,"oldContent":"            "},{"type":"DELETE","lineNumber":44,"oldContent":"            // Aggiorna la direzione di movimento"},{"type":"DELETE","lineNumber":47,"oldContent":"                entity.Movement.LastDirection = direction;"},{"type":"DELETE","lineNumber":48,"oldContent":"                entity.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":19,"content":"                player.Movement.AddForce(direction * 500f); // Apply movement force"},{"type":"DELETE","lineNumber":50,"oldContent":"            else"},{"type":"DELETE","lineNumber":51,"oldContent":"            {"},{"type":"DELETE","lineNumber":52,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":53,"oldContent":"            }"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":55,"oldContent":"            // Aggiorna la rotazione se l'entità dovrebbe ruotare verso la direzione di movimento"},{"type":"DELETE","lineNumber":56,"oldContent":"            if (entity.Movement.RotateTowardsMovement && direction != Vector2.Zero)"},{"type":"DELETE","lineNumber":57,"oldContent":"            {"},{"type":"DELETE","lineNumber":58,"oldContent":"                float targetRotation = (float)System.Math.Atan2(direction.Y, direction.X);"},{"type":"DELETE","lineNumber":59,"oldContent":"                "},{"type":"DELETE","lineNumber":60,"oldContent":"                if (entity.Movement.SmoothRotation)"},{"type":"DELETE","lineNumber":61,"oldContent":"                {"},{"type":"DELETE","lineNumber":62,"oldContent":"                    // Interpolazione fluida della rotazione"},{"type":"DELETE","lineNumber":63,"oldContent":"                    float rotationSpeed = entity.Movement.RotationSpeed * deltaTime;"},{"type":"DELETE","lineNumber":64,"oldContent":"                    entity.Transform.Rotation = LerpAngle(entity.Transform.Rotation, targetRotation, rotationSpeed);"},{"type":"DELETE","lineNumber":65,"oldContent":"                }"},{"type":"DELETE","lineNumber":66,"oldContent":"                else"},{"type":"DELETE","lineNumber":67,"oldContent":"                {"},{"type":"DELETE","lineNumber":68,"oldContent":"                    entity.Transform.Rotation = targetRotation;"},{"type":"DELETE","lineNumber":69,"oldContent":"                }"},{"type":"DELETE","lineNumber":70,"oldContent":"            }"},{"type":"DELETE","lineNumber":71,"oldContent":"            {"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"            }"},{"type":"DELETE","lineNumber":75,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":76,"oldContent":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"DELETE","lineNumber":77,"oldContent":"        /// Muove un'entità verso una posizione target"},{"type":"DELETE","lineNumber":78,"oldContent":"                    entity.Movement.Velocity, "},{"type":"DELETE","lineNumber":79,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":80,"oldContent":"        public bool MoveTowardsTarget(Entity entity, Vector2 targetPosition, float deltaTime, float stoppingDistance = 0f)"},{"type":"DELETE","lineNumber":81,"oldContent":"                    targetVelocity, "},{"type":"DELETE","lineNumber":82,"oldContent":"        {"},{"type":"DELETE","lineNumber":83,"oldContent":"                    acceleration * deltaTime"},{"type":"DELETE","lineNumber":84,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return false;"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"                );"},{"type":"DELETE","lineNumber":87,"oldContent":"            Vector2 direction = targetPosition - entity.Transform.Position;"},{"type":"DELETE","lineNumber":88,"oldContent":"            }"},{"type":"DELETE","lineNumber":89,"oldContent":"            float distance = direction.Length();"},{"type":"DELETE","lineNumber":90,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"            else"},{"type":"DELETE","lineNumber":92,"oldContent":"            // Controlla se abbiamo raggiunto il target"},{"type":"DELETE","lineNumber":93,"oldContent":"            {"},{"type":"DELETE","lineNumber":94,"oldContent":"            if (distance <= stoppingDistance)"},{"type":"DELETE","lineNumber":95,"oldContent":"                // Decelerazione"},{"type":"DELETE","lineNumber":96,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":97,"oldContent":"                return true; // Target raggiunto"},{"type":"DELETE","lineNumber":98,"oldContent":"                entity.Movement.Velocity = Vector2.Lerp("},{"type":"DELETE","lineNumber":99,"oldContent":"                    entity.Movement.Velocity, "},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":"                    Vector2.Zero, "},{"type":"DELETE","lineNumber":102,"oldContent":"            // Normalizza la direzione"},{"type":"DELETE","lineNumber":103,"oldContent":"            direction.Normalize();"},{"type":"DELETE","lineNumber":104,"oldContent":"                    deceleration * deltaTime"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":106,"oldContent":"                );"},{"type":"DELETE","lineNumber":107,"oldContent":"            // Muovi verso il target"},{"type":"DELETE","lineNumber":108,"oldContent":"            MoveEntity(entity, direction, deltaTime);"},{"type":"DELETE","lineNumber":109,"oldContent":"            }"},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":111,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":"            return false; // Target non ancora raggiunto"},{"type":"DELETE","lineNumber":113,"oldContent":"        }"},{"type":"DELETE","lineNumber":114,"oldContent":"            // Applica la velocità alla posizione"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"            entity.Transform.Position += entity.Movement.Velocity * deltaTime;"},{"type":"DELETE","lineNumber":117,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":118,"oldContent":""},{"type":"DELETE","lineNumber":119,"oldContent":"        /// Applica una forza di knockback a un'entità"},{"type":"DELETE","lineNumber":120,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":121,"oldContent":"            // Aggiorna lo stato di movimento"},{"type":"DELETE","lineNumber":122,"oldContent":"        public void ApplyKnockback(Entity entity, Vector2 knockbackDirection, float force, float deltaTime)"},{"type":"DELETE","lineNumber":123,"oldContent":"        {"},{"type":"DELETE","lineNumber":124,"oldContent":"            entity.Movement.IsMoving = entity.Movement.Velocity.LengthSquared() > 0.01f;"},{"type":"DELETE","lineNumber":125,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":126,"oldContent":"            "},{"type":"DELETE","lineNumber":127,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"            Vector2 knockbackMovement = knockbackDirection * force * deltaTime;"},{"type":"DELETE","lineNumber":129,"oldContent":"            if (entity.Movement.IsMoving)"},{"type":"DELETE","lineNumber":130,"oldContent":"            entity.Transform.Position += knockbackMovement;"},{"type":"DELETE","lineNumber":131,"oldContent":"            {"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":133,"oldContent":"            // Riduce gradualmente il knockback"},{"type":"DELETE","lineNumber":134,"oldContent":"                entity.Movement.LastDirection = Vector2.Normalize(entity.Movement.Velocity);"},{"type":"DELETE","lineNumber":135,"oldContent":"            entity.Movement.KnockbackForce *= 0.9f;"},{"type":"DELETE","lineNumber":136,"oldContent":"            }"},{"type":"DELETE","lineNumber":137,"oldContent":"            "},{"type":"DELETE","lineNumber":138,"oldContent":"            if (entity.Movement.KnockbackForce < 0.1f)"},{"type":"DELETE","lineNumber":139,"oldContent":"        }"},{"type":"DELETE","lineNumber":140,"oldContent":"            {"},{"type":"DELETE","lineNumber":141,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"                entity.Movement.KnockbackForce = 0f;"},{"type":"DELETE","lineNumber":143,"oldContent":"            }"},{"type":"DELETE","lineNumber":144,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":145,"oldContent":"        }"},{"type":"DELETE","lineNumber":146,"oldContent":"        /// Movimento pattuglia tra due punti"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":149,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":150,"oldContent":"        /// Movimento con accelerazione e decelerazione"},{"type":"DELETE","lineNumber":151,"oldContent":"        public void UpdatePatrolMovement(Entity entity, Vector2 pointA, Vector2 pointB, float deltaTime)"},{"type":"DELETE","lineNumber":152,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":153,"oldContent":"        public void UpdateSmoothMovement(Entity entity, Vector2 targetDirection, float deltaTime)"},{"type":"DELETE","lineNumber":154,"oldContent":"        {"},{"type":"DELETE","lineNumber":155,"oldContent":"        {"},{"type":"DELETE","lineNumber":156,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":157,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":158,"oldContent":""},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"DELETE","lineNumber":160,"oldContent":"            float acceleration = entity.Movement.Acceleration;"},{"type":"DELETE","lineNumber":161,"oldContent":"            Vector2 currentTarget = entity.Movement.PatrolTargetA ? pointA : pointB;"},{"type":"DELETE","lineNumber":162,"oldContent":"            float deceleration = entity.Movement.Deceleration;"},{"type":"DELETE","lineNumber":163,"oldContent":"            float maxSpeed = entity.Movement.Speed * entity.Movement.SpeedMultiplier;"},{"type":"DELETE","lineNumber":164,"oldContent":"            "},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"DELETE","lineNumber":166,"oldContent":"            if (MoveTowardsTarget(entity, currentTarget, deltaTime, 5f))"},{"type":"DELETE","lineNumber":167,"oldContent":"            // Calcola la velocità target"},{"type":"DELETE","lineNumber":168,"oldContent":"            Vector2 targetVelocity = targetDirection * maxSpeed;"},{"type":"DELETE","lineNumber":169,"oldContent":"            {"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"                // Cambia direzione quando raggiunge il target"},{"type":"DELETE","lineNumber":172,"oldContent":"            // Interpola verso la velocità target"},{"type":"DELETE","lineNumber":173,"oldContent":"            if (targetDirection != Vector2.Zero)"},{"type":"DELETE","lineNumber":174,"oldContent":"                entity.Movement.PatrolTargetA = !entity.Movement.PatrolTargetA;"},{"type":"DELETE","lineNumber":175,"oldContent":"            {"},{"type":"DELETE","lineNumber":176,"oldContent":"                "},{"type":"DELETE","lineNumber":177,"oldContent":"                // Accelerazione"},{"type":"DELETE","lineNumber":178,"oldContent":"                // Pausa opzionale al punto di pattuglia"},{"type":"DELETE","lineNumber":179,"oldContent":"                entity.Movement.PatrolPauseTimer = entity.Movement.PatrolPauseDuration;"},{"type":"DELETE","lineNumber":180,"oldContent":"            }"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"DELETE","lineNumber":182,"oldContent":"            // Gestisce la pausa"},{"type":"DELETE","lineNumber":183,"oldContent":"            if (entity.Movement.PatrolPauseTimer > 0)"},{"type":"DELETE","lineNumber":184,"oldContent":"            {"},{"type":"DELETE","lineNumber":185,"oldContent":"                entity.Movement.PatrolPauseTimer -= deltaTime;"},{"type":"DELETE","lineNumber":186,"oldContent":"                entity.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":187,"oldContent":"            }"},{"type":"DELETE","lineNumber":188,"oldContent":"        }"},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"DELETE","lineNumber":190,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":191,"oldContent":"        /// Movimento circolare attorno a un punto"},{"type":"DELETE","lineNumber":192,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":193,"oldContent":"        public void UpdateCircularMovement(Entity entity, Vector2 centerPoint, float radius, float angularSpeed, float deltaTime)"},{"type":"DELETE","lineNumber":194,"oldContent":"        {"},{"type":"DELETE","lineNumber":195,"oldContent":"            if (entity?.Movement == null || entity.Transform == null) return;"},{"type":"DELETE","lineNumber":196,"oldContent":""},{"type":"DELETE","lineNumber":197,"oldContent":"            // Incrementa l'angolo"},{"type":"DELETE","lineNumber":198,"oldContent":"            entity.Movement.CircularAngle += angularSpeed * deltaTime;"},{"type":"DELETE","lineNumber":199,"oldContent":""},{"type":"DELETE","lineNumber":200,"oldContent":"            // Calcola la nuova posizione"},{"type":"DELETE","lineNumber":201,"oldContent":"            Vector2 offset = new Vector2("},{"type":"DELETE","lineNumber":202,"oldContent":"                (float)System.Math.Cos(entity.Movement.CircularAngle) * radius,"},{"type":"DELETE","lineNumber":203,"oldContent":"                (float)System.Math.Sin(entity.Movement.CircularAngle) * radius"},{"type":"DELETE","lineNumber":204,"oldContent":"            );"},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":206,"oldContent":"            entity.Transform.Position = centerPoint + offset;"},{"type":"DELETE","lineNumber":207,"oldContent":"            entity.Movement.IsMoving = true;"},{"type":"DELETE","lineNumber":208,"oldContent":""},{"type":"DELETE","lineNumber":209,"oldContent":"            // Aggiorna la direzione per il rendering"},{"type":"DELETE","lineNumber":210,"oldContent":"            Vector2 tangent = new Vector2("},{"type":"DELETE","lineNumber":211,"oldContent":"                -(float)System.Math.Sin(entity.Movement.CircularAngle),"},{"type":"DELETE","lineNumber":212,"oldContent":"                (float)System.Math.Cos(entity.Movement.CircularAngle)"},{"type":"DELETE","lineNumber":213,"oldContent":"            );"},{"type":"DELETE","lineNumber":214,"oldContent":"            entity.Movement.LastDirection = tangent;"},{"type":"DELETE","lineNumber":215,"oldContent":"        }"},{"type":"DELETE","lineNumber":216,"oldContent":""},{"type":"DELETE","lineNumber":217,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":218,"oldContent":"        /// Applica attrito al movimento"},{"type":"DELETE","lineNumber":219,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":220,"oldContent":"        public void ApplyFriction(Entity entity, float frictionCoefficient, float deltaTime)"},{"type":"DELETE","lineNumber":221,"oldContent":"        {"},{"type":"DELETE","lineNumber":222,"oldContent":"            if (entity?.Movement == null) return;"},{"type":"DELETE","lineNumber":223,"oldContent":""},{"type":"DELETE","lineNumber":224,"oldContent":"            float friction = 1f - (frictionCoefficient * deltaTime);"},{"type":"DELETE","lineNumber":225,"oldContent":"            friction = MathHelper.Max(0f, friction);"},{"type":"DELETE","lineNumber":226,"oldContent":""},{"type":"DELETE","lineNumber":227,"oldContent":"            entity.Movement.Velocity *= friction;"},{"type":"DELETE","lineNumber":228,"oldContent":"        }"},{"type":"DELETE","lineNumber":229,"oldContent":""},{"type":"DELETE","lineNumber":230,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":231,"oldContent":"        /// Interpolazione angolare per rotazioni fluide"},{"type":"DELETE","lineNumber":232,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":233,"oldContent":"        private float LerpAngle(float from, float to, float t)"},{"type":"DELETE","lineNumber":234,"oldContent":"        {"},{"type":"DELETE","lineNumber":235,"oldContent":"            float difference = to - from;"},{"type":"DELETE","lineNumber":236,"oldContent":"            "},{"type":"DELETE","lineNumber":237,"oldContent":"            // Normalizza la differenza per prendere il percorso più breve"},{"type":"DELETE","lineNumber":238,"oldContent":"            while (difference > MathHelper.Pi)"},{"type":"DELETE","lineNumber":239,"oldContent":"                difference -= MathHelper.TwoPi;"},{"type":"DELETE","lineNumber":240,"oldContent":"            while (difference < -MathHelper.Pi)"},{"type":"DELETE","lineNumber":241,"oldContent":"                difference += MathHelper.TwoPi;"},{"type":"DELETE","lineNumber":242,"oldContent":""},{"type":"DELETE","lineNumber":243,"oldContent":"            return from + difference * t;"},{"type":"DELETE","lineNumber":244,"oldContent":"        }"},{"type":"DELETE","lineNumber":245,"oldContent":""},{"type":"DELETE","lineNumber":246,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":247,"oldContent":"        /// Controlla se un'entità può muoversi in una direzione (per prevenire movimenti non validi)"},{"type":"DELETE","lineNumber":248,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":249,"oldContent":"        public bool CanMove(Entity entity, Vector2 direction, float distance = 1f)"},{"type":"DELETE","lineNumber":250,"oldContent":"        {"},{"type":"DELETE","lineNumber":251,"oldContent":"            if (entity?.Transform == null) return false;"},{"type":"DELETE","lineNumber":252,"oldContent":""},{"type":"DELETE","lineNumber":253,"oldContent":"            // Calcola la posizione futura"},{"type":"DELETE","lineNumber":254,"oldContent":"            Vector2 futurePosition = entity.Transform.Position + direction * distance;"},{"type":"DELETE","lineNumber":255,"oldContent":""},{"type":"DELETE","lineNumber":256,"oldContent":"            // Qui potresti aggiungere controlli per collisioni o limiti del mondo"},{"type":"DELETE","lineNumber":257,"oldContent":"            // Per ora ritorna sempre true"},{"type":"DELETE","lineNumber":258,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":259,"oldContent":"        }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/AISystem.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/AISystem.cs","baseContent":"namespace DungeonExplorer.Systems;\n\npublic class AISystem\n{\n    \n}","baseTimestamp":1756229068084,"deltas":[{"timestamp":1756229128337,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using Microsoft.Xna.Framework;","oldContent":"namespace DungeonExplorer.Systems;"},{"type":"INSERT","lineNumber":1,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":2,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":3,"content":"using DungeonExplorer.AI;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"INSERT","lineNumber":5,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":6,"content":"using System.Linq;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class AISystem"},{"type":"INSERT","lineNumber":8,"content":"namespace DungeonExplorer.Systems"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":10,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":11,"content":"    /// Sistema AI che gestisce il comportamento intelligente dei nemici"},{"type":"INSERT","lineNumber":12,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":13,"content":"    public class AISystem"},{"type":"INSERT","lineNumber":14,"content":"    {"},{"type":"INSERT","lineNumber":15,"content":"        private AStar _pathfinder;"},{"type":"INSERT","lineNumber":16,"content":"        private Random _random;"},{"type":"INSERT","lineNumber":17,"content":"        private const float TILE_SIZE = 32f;"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"        public AISystem()"},{"type":"INSERT","lineNumber":20,"content":"        {"},{"type":"INSERT","lineNumber":21,"content":"            _pathfinder = new AStar();"},{"type":"INSERT","lineNumber":22,"content":"            _random = new Random();"},{"type":"INSERT","lineNumber":23,"content":"        }"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":26,"content":"        /// Aggiorna l'AI di un nemico"},{"type":"INSERT","lineNumber":27,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":28,"content":"        public void Update(GameTime gameTime, Enemy enemy, Player player, Dungeon dungeon)"},{"type":"INSERT","lineNumber":29,"content":"        {"},{"type":"INSERT","lineNumber":30,"content":"            if (enemy?.AI == null || enemy.Health?.CurrentHealth <= 0) return;"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":33,"content":"            "},{"type":"INSERT","lineNumber":34,"content":"            // Aggiorna i timer"},{"type":"INSERT","lineNumber":35,"content":"            UpdateTimers(enemy.AI, deltaTime);"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"            // Determina e esegui il comportamento"},{"type":"INSERT","lineNumber":38,"content":"            AIBehaviorType behavior = DetermineBehavior(enemy, player, dungeon);"},{"type":"INSERT","lineNumber":39,"content":"            ExecuteBehavior(enemy, player, dungeon, behavior, deltaTime);"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"            // Aggiorna lo stato dell'AI"},{"type":"INSERT","lineNumber":42,"content":"            UpdateAIState(enemy, player);"},{"type":"INSERT","lineNumber":43,"content":"        }"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":45,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":46,"content":"        /// Determina il comportamento appropriato per il nemico"},{"type":"INSERT","lineNumber":47,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":48,"content":"        private AIBehaviorType DetermineBehavior(Enemy enemy, Player player, Dungeon dungeon)"},{"type":"INSERT","lineNumber":49,"content":"        {"},{"type":"INSERT","lineNumber":50,"content":"            float distanceToPlayer = Vector2.Distance(enemy.Transform.Position, player.Transform.Position);"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"            // Se il giocatore è morto, torna al comportamento di pattuglia"},{"type":"INSERT","lineNumber":53,"content":"            if (player.Health.CurrentHealth <= 0)"},{"type":"INSERT","lineNumber":54,"content":"            {"},{"type":"INSERT","lineNumber":55,"content":"                return AIBehaviorType.Patrol;"},{"type":"INSERT","lineNumber":56,"content":"            }"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"            // Comportamento basato sulla distanza e visibilità"},{"type":"INSERT","lineNumber":59,"content":"            if (distanceToPlayer <= enemy.AI.AttackRange && CanSeeTarget(enemy, player, dungeon))"},{"type":"INSERT","lineNumber":60,"content":"            {"},{"type":"INSERT","lineNumber":61,"content":"                return AIBehaviorType.Attack;"},{"type":"INSERT","lineNumber":62,"content":"            }"},{"type":"INSERT","lineNumber":63,"content":"            else if (distanceToPlayer <= enemy.AI.ChaseRange && CanSeeTarget(enemy, player, dungeon))"},{"type":"INSERT","lineNumber":64,"content":"            {"},{"type":"INSERT","lineNumber":65,"content":"                return AIBehaviorType.Chase;"},{"type":"INSERT","lineNumber":66,"content":"            }"},{"type":"INSERT","lineNumber":67,"content":"            else if (enemy.AI.CurrentState == AIState.Alerted && enemy.AI.AlertTimer > 0)"},{"type":"INSERT","lineNumber":68,"content":"            {"},{"type":"INSERT","lineNumber":69,"content":"                return AIBehaviorType.Investigate;"},{"type":"INSERT","lineNumber":70,"content":"            }"},{"type":"INSERT","lineNumber":71,"content":"            else"},{"type":"INSERT","lineNumber":72,"content":"            {"},{"type":"INSERT","lineNumber":73,"content":"                return AIBehaviorType.Patrol;"},{"type":"INSERT","lineNumber":74,"content":"            }"},{"type":"INSERT","lineNumber":75,"content":"        }"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":78,"content":"        /// Esegue il comportamento specificato"},{"type":"INSERT","lineNumber":79,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":80,"content":"        private void ExecuteBehavior(Enemy enemy, Player player, Dungeon dungeon, AIBehaviorType behavior, float deltaTime)"},{"type":"INSERT","lineNumber":81,"content":"        {"},{"type":"INSERT","lineNumber":82,"content":"            switch (behavior)"},{"type":"INSERT","lineNumber":83,"content":"            {"},{"type":"INSERT","lineNumber":84,"content":"                case AIBehaviorType.Patrol:"},{"type":"INSERT","lineNumber":85,"content":"                    ExecutePatrolBehavior(enemy, dungeon, deltaTime);"},{"type":"INSERT","lineNumber":86,"content":"                    break;"},{"type":"INSERT","lineNumber":87,"content":"                    "},{"type":"INSERT","lineNumber":88,"content":"                case AIBehaviorType.Chase:"},{"type":"INSERT","lineNumber":89,"content":"                    ExecuteChaseBehavior(enemy, player, dungeon, deltaTime);"},{"type":"INSERT","lineNumber":90,"content":"                    break;"},{"type":"INSERT","lineNumber":91,"content":"                    "},{"type":"INSERT","lineNumber":92,"content":"                case AIBehaviorType.Attack:"},{"type":"INSERT","lineNumber":93,"content":"                    ExecuteAttackBehavior(enemy, player, deltaTime);"},{"type":"INSERT","lineNumber":94,"content":"                    break;"},{"type":"INSERT","lineNumber":95,"content":"                    "},{"type":"INSERT","lineNumber":96,"content":"                case AIBehaviorType.Investigate:"},{"type":"INSERT","lineNumber":97,"content":"                    ExecuteInvestigateBehavior(enemy, dungeon, deltaTime);"},{"type":"INSERT","lineNumber":98,"content":"                    break;"},{"type":"INSERT","lineNumber":99,"content":"                    "},{"type":"INSERT","lineNumber":100,"content":"                case AIBehaviorType.Flee:"},{"type":"INSERT","lineNumber":101,"content":"                    ExecuteFleeBehavior(enemy, player, dungeon, deltaTime);"},{"type":"INSERT","lineNumber":102,"content":"                    break;"},{"type":"INSERT","lineNumber":103,"content":"            }"},{"type":"INSERT","lineNumber":104,"content":"        }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"INSERT","lineNumber":106,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":107,"content":"        /// Comportamento di pattuglia"},{"type":"INSERT","lineNumber":108,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":109,"content":"        private void ExecutePatrolBehavior(Enemy enemy, Dungeon dungeon, float deltaTime)"},{"type":"INSERT","lineNumber":110,"content":"        {"},{"type":"INSERT","lineNumber":111,"content":"            // Se non ha punti di pattuglia, ne genera alcuni"},{"type":"INSERT","lineNumber":112,"content":"            if (enemy.AI.PatrolPoints.Count == 0)"},{"type":"INSERT","lineNumber":113,"content":"            {"},{"type":"INSERT","lineNumber":114,"content":"                GeneratePatrolPoints(enemy, dungeon);"},{"type":"INSERT","lineNumber":115,"content":"            }"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"            if (enemy.AI.PatrolPoints.Count > 0)"},{"type":"INSERT","lineNumber":118,"content":"            {"},{"type":"INSERT","lineNumber":119,"content":"                Vector2 targetPoint = enemy.AI.PatrolPoints[enemy.AI.CurrentPatrolIndex];"},{"type":"INSERT","lineNumber":120,"content":"                float distanceToTarget = Vector2.Distance(enemy.Transform.Position, targetPoint);"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"                if (distanceToTarget < TILE_SIZE)"},{"type":"INSERT","lineNumber":123,"content":"                {"},{"type":"INSERT","lineNumber":124,"content":"                    // Raggiunto il punto, passa al successivo dopo una pausa"},{"type":"INSERT","lineNumber":125,"content":"                    enemy.AI.PatrolPauseTimer += deltaTime;"},{"type":"INSERT","lineNumber":126,"content":"                    "},{"type":"INSERT","lineNumber":127,"content":"                    if (enemy.AI.PatrolPauseTimer >= enemy.AI.PatrolPauseDuration)"},{"type":"INSERT","lineNumber":128,"content":"                    {"},{"type":"INSERT","lineNumber":129,"content":"                        enemy.AI.CurrentPatrolIndex = (enemy.AI.CurrentPatrolIndex + 1) % enemy.AI.PatrolPoints.Count;"},{"type":"INSERT","lineNumber":130,"content":"                        enemy.AI.PatrolPauseTimer = 0f;"},{"type":"INSERT","lineNumber":131,"content":"                        enemy.AI.CurrentPath.Clear(); // Ricalcola il path"},{"type":"INSERT","lineNumber":132,"content":"                    }"},{"type":"INSERT","lineNumber":133,"content":"                }"},{"type":"INSERT","lineNumber":134,"content":"                else"},{"type":"INSERT","lineNumber":135,"content":"                {"},{"type":"INSERT","lineNumber":136,"content":"                    // Muovi verso il punto di pattuglia"},{"type":"INSERT","lineNumber":137,"content":"                    MoveTowardsTarget(enemy, targetPoint, dungeon, deltaTime, enemy.AI.PatrolSpeed);"},{"type":"INSERT","lineNumber":138,"content":"                }"},{"type":"INSERT","lineNumber":139,"content":"            }"},{"type":"INSERT","lineNumber":140,"content":"        }"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"INSERT","lineNumber":142,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":143,"content":"        /// Comportamento di inseguimento"},{"type":"INSERT","lineNumber":144,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":145,"content":"        private void ExecuteChaseBehavior(Enemy enemy, Player player, Dungeon dungeon, float deltaTime)"},{"type":"INSERT","lineNumber":146,"content":"        {"},{"type":"INSERT","lineNumber":147,"content":"            enemy.AI.CurrentState = AIState.Chasing;"},{"type":"INSERT","lineNumber":148,"content":"            enemy.AI.AlertTimer = enemy.AI.AlertDuration; // Mantiene lo stato di allerta"},{"type":"INSERT","lineNumber":149,"content":"            "},{"type":"INSERT","lineNumber":150,"content":"            Vector2 playerPos = player.Transform.Position;"},{"type":"INSERT","lineNumber":151,"content":"            MoveTowardsTarget(enemy, playerPos, dungeon, deltaTime, enemy.AI.ChaseSpeed);"},{"type":"INSERT","lineNumber":152,"content":"        }"},{"type":"INSERT","lineNumber":153,"content":""},{"type":"INSERT","lineNumber":154,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":155,"content":"        /// Comportamento di attacco"},{"type":"INSERT","lineNumber":156,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":157,"content":"        private void ExecuteAttackBehavior(Enemy enemy, Player player, float deltaTime)"},{"type":"INSERT","lineNumber":158,"content":"        {"},{"type":"INSERT","lineNumber":159,"content":"            enemy.AI.CurrentState = AIState.Attacking;"},{"type":"INSERT","lineNumber":160,"content":"            "},{"type":"INSERT","lineNumber":161,"content":"            // Ferma il movimento per attaccare"},{"type":"INSERT","lineNumber":162,"content":"            if (enemy.Movement != null)"},{"type":"INSERT","lineNumber":163,"content":"            {"},{"type":"INSERT","lineNumber":164,"content":"                enemy.Movement.IsMoving = false;"},{"type":"INSERT","lineNumber":165,"content":"            }"},{"type":"INSERT","lineNumber":166,"content":""},{"type":"INSERT","lineNumber":167,"content":"            // Gestisce il cooldown dell'attacco"},{"type":"INSERT","lineNumber":168,"content":"            if (enemy.AI.AttackCooldownTimer <= 0f)"},{"type":"INSERT","lineNumber":169,"content":"            {"},{"type":"INSERT","lineNumber":170,"content":"                PerformAttack(enemy, player);"},{"type":"INSERT","lineNumber":171,"content":"                enemy.AI.AttackCooldownTimer = enemy.AI.AttackCooldown;"},{"type":"INSERT","lineNumber":172,"content":"            }"},{"type":"INSERT","lineNumber":173,"content":"        }"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":176,"content":"        /// Comportamento di investigazione"},{"type":"INSERT","lineNumber":177,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":178,"content":"        private void ExecuteInvestigateBehavior(Enemy enemy, Dungeon dungeon, float deltaTime)"},{"type":"INSERT","lineNumber":179,"content":"        {"},{"type":"INSERT","lineNumber":180,"content":"            enemy.AI.CurrentState = AIState.Investigating;"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"            // Se non ha una posizione da investigare, usa l'ultima posizione conosciuta del giocatore"},{"type":"INSERT","lineNumber":183,"content":"            if (enemy.AI.LastKnownPlayerPosition == Vector2.Zero)"},{"type":"INSERT","lineNumber":184,"content":"            {"},{"type":"INSERT","lineNumber":185,"content":"                // Genera una posizione casuale nelle vicinanze"},{"type":"INSERT","lineNumber":186,"content":"                enemy.AI.LastKnownPlayerPosition = enemy.Transform.Position + "},{"type":"INSERT","lineNumber":187,"content":"                    new Vector2(_random.Next(-200, 200), _random.Next(-200, 200));"},{"type":"INSERT","lineNumber":188,"content":"            }"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"            float distanceToInvestigate = Vector2.Distance(enemy.Transform.Position, enemy.AI.LastKnownPlayerPosition);"},{"type":"INSERT","lineNumber":191,"content":"            "},{"type":"INSERT","lineNumber":192,"content":"            if (distanceToInvestigate < TILE_SIZE)"},{"type":"INSERT","lineNumber":193,"content":"            {"},{"type":"INSERT","lineNumber":194,"content":"                // Ha raggiunto la posizione, resta in attesa"},{"type":"INSERT","lineNumber":195,"content":"                enemy.AI.InvestigateTimer += deltaTime;"},{"type":"INSERT","lineNumber":196,"content":"                "},{"type":"INSERT","lineNumber":197,"content":"                if (enemy.AI.InvestigateTimer >= enemy.AI.InvestigateDuration)"},{"type":"INSERT","lineNumber":198,"content":"                {"},{"type":"INSERT","lineNumber":199,"content":"                    // Finito di investigare, torna alla pattuglia"},{"type":"INSERT","lineNumber":200,"content":"                    enemy.AI.CurrentState = AIState.Patrol;"},{"type":"INSERT","lineNumber":201,"content":"                    enemy.AI.AlertTimer = 0f;"},{"type":"INSERT","lineNumber":202,"content":"                    enemy.AI.InvestigateTimer = 0f;"},{"type":"INSERT","lineNumber":203,"content":"                    enemy.AI.LastKnownPlayerPosition = Vector2.Zero;"},{"type":"INSERT","lineNumber":204,"content":"                }"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":"            else"},{"type":"INSERT","lineNumber":207,"content":"            {"},{"type":"INSERT","lineNumber":208,"content":"                // Muovi verso la posizione da investigare"},{"type":"INSERT","lineNumber":209,"content":"                MoveTowardsTarget(enemy, enemy.AI.LastKnownPlayerPosition, dungeon, deltaTime, enemy.AI.PatrolSpeed);"},{"type":"INSERT","lineNumber":210,"content":"            }"},{"type":"INSERT","lineNumber":211,"content":"        }"},{"type":"INSERT","lineNumber":212,"content":""},{"type":"INSERT","lineNumber":213,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":214,"content":"        /// Comportamento di fuga"},{"type":"INSERT","lineNumber":215,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":216,"content":"        private void ExecuteFleeBehavior(Enemy enemy, Player player, Dungeon dungeon, float deltaTime)"},{"type":"INSERT","lineNumber":217,"content":"        {"},{"type":"INSERT","lineNumber":218,"content":"            enemy.AI.CurrentState = AIState.Fleeing;"},{"type":"INSERT","lineNumber":219,"content":"            "},{"type":"INSERT","lineNumber":220,"content":"            // Calcola la direzione opposta al giocatore"},{"type":"INSERT","lineNumber":221,"content":"            Vector2 directionFromPlayer = Vector2.Normalize(enemy.Transform.Position - player.Transform.Position);"},{"type":"INSERT","lineNumber":222,"content":"            Vector2 fleeTarget = enemy.Transform.Position + directionFromPlayer * 200f; // Fuggi per 200 unità"},{"type":"INSERT","lineNumber":223,"content":"            "},{"type":"INSERT","lineNumber":224,"content":"            MoveTowardsTarget(enemy, fleeTarget, dungeon, deltaTime, enemy.AI.ChaseSpeed * 1.2f);"},{"type":"INSERT","lineNumber":225,"content":"        }"},{"type":"INSERT","lineNumber":226,"content":""},{"type":"INSERT","lineNumber":227,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":228,"content":"        /// Muove un nemico verso una posizione target usando pathfinding"},{"type":"INSERT","lineNumber":229,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":230,"content":"        private void MoveTowardsTarget(Enemy enemy, Vector2 targetPosition, Dungeon dungeon, float deltaTime, float speed)"},{"type":"INSERT","lineNumber":231,"content":"        {"},{"type":"INSERT","lineNumber":232,"content":"            // Controlla se serve ricalcolare il path"},{"type":"INSERT","lineNumber":233,"content":"            if (enemy.AI.CurrentPath.Count == 0 || enemy.AI.PathRecalculateTimer <= 0f)"},{"type":"INSERT","lineNumber":234,"content":"            {"},{"type":"INSERT","lineNumber":235,"content":"                CalculatePath(enemy, targetPosition, dungeon);"},{"type":"INSERT","lineNumber":236,"content":"                enemy.AI.PathRecalculateTimer = enemy.AI.PathRecalculateInterval;"},{"type":"INSERT","lineNumber":237,"content":"            }"},{"type":"INSERT","lineNumber":238,"content":""},{"type":"INSERT","lineNumber":239,"content":"            if (enemy.AI.CurrentPath.Count > 0)"},{"type":"INSERT","lineNumber":240,"content":"            {"},{"type":"INSERT","lineNumber":241,"content":"                Vector2 nextWaypoint = enemy.AI.CurrentPath[0];"},{"type":"INSERT","lineNumber":242,"content":"                float distanceToWaypoint = Vector2.Distance(enemy.Transform.Position, nextWaypoint);"},{"type":"INSERT","lineNumber":243,"content":""},{"type":"INSERT","lineNumber":244,"content":"                if (distanceToWaypoint < TILE_SIZE * 0.5f)"},{"type":"INSERT","lineNumber":245,"content":"                {"},{"type":"INSERT","lineNumber":246,"content":"                    // Raggiunto il waypoint, passa al successivo"},{"type":"INSERT","lineNumber":247,"content":"                    enemy.AI.CurrentPath.RemoveAt(0);"},{"type":"INSERT","lineNumber":248,"content":"                }"},{"type":"INSERT","lineNumber":249,"content":"                else"},{"type":"INSERT","lineNumber":250,"content":"                {"},{"type":"INSERT","lineNumber":251,"content":"                    // Muovi verso il waypoint"},{"type":"INSERT","lineNumber":252,"content":"                    Vector2 direction = Vector2.Normalize(nextWaypoint - enemy.Transform.Position);"},{"type":"INSERT","lineNumber":253,"content":"                    Vector2 movement = direction * speed * deltaTime;"},{"type":"INSERT","lineNumber":254,"content":"                    enemy.Transform.Position += movement;"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"                    // Aggiorna componente movimento se presente"},{"type":"INSERT","lineNumber":257,"content":"                    if (enemy.Movement != null)"},{"type":"INSERT","lineNumber":258,"content":"                    {"},{"type":"INSERT","lineNumber":259,"content":"                        enemy.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":260,"content":"                        enemy.Movement.LastDirection = direction;"},{"type":"INSERT","lineNumber":261,"content":"                    }"},{"type":"INSERT","lineNumber":262,"content":"                }"},{"type":"INSERT","lineNumber":263,"content":"            }"},{"type":"INSERT","lineNumber":264,"content":"        }"},{"type":"INSERT","lineNumber":265,"content":""},{"type":"INSERT","lineNumber":266,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":267,"content":"        /// Calcola un path usando A*"},{"type":"INSERT","lineNumber":268,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":269,"content":"        private void CalculatePath(Enemy enemy, Vector2 targetPosition, Dungeon dungeon)"},{"type":"INSERT","lineNumber":270,"content":"        {"},{"type":"INSERT","lineNumber":271,"content":"            var startNode = new Node((int)(enemy.Transform.Position.X / TILE_SIZE), (int)(enemy.Transform.Position.Y / TILE_SIZE));"},{"type":"INSERT","lineNumber":272,"content":"            var endNode = new Node((int)(targetPosition.X / TILE_SIZE), (int)(targetPosition.Y / TILE_SIZE));"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"INSERT","lineNumber":274,"content":"            var pathNodes = _pathfinder.FindPath(startNode, endNode, dungeon);"},{"type":"INSERT","lineNumber":275,"content":"            "},{"type":"INSERT","lineNumber":276,"content":"            enemy.AI.CurrentPath.Clear();"},{"type":"INSERT","lineNumber":277,"content":"            "},{"type":"INSERT","lineNumber":278,"content":"            if (pathNodes != null)"},{"type":"INSERT","lineNumber":279,"content":"            {"},{"type":"INSERT","lineNumber":280,"content":"                foreach (var node in pathNodes)"},{"type":"INSERT","lineNumber":281,"content":"                {"},{"type":"INSERT","lineNumber":282,"content":"                    enemy.AI.CurrentPath.Add(new Vector2(node.X * TILE_SIZE + TILE_SIZE * 0.5f, "},{"type":"INSERT","lineNumber":283,"content":"                                                        node.Y * TILE_SIZE + TILE_SIZE * 0.5f));"},{"type":"INSERT","lineNumber":284,"content":"                }"},{"type":"INSERT","lineNumber":285,"content":"            }"},{"type":"INSERT","lineNumber":286,"content":"        }"},{"type":"INSERT","lineNumber":287,"content":""},{"type":"INSERT","lineNumber":288,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":289,"content":"        /// Controlla se un nemico può vedere il target"},{"type":"INSERT","lineNumber":290,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":291,"content":"        private bool CanSeeTarget(Enemy enemy, Entity target, Dungeon dungeon)"},{"type":"INSERT","lineNumber":292,"content":"        {"},{"type":"INSERT","lineNumber":293,"content":"            // Implementazione semplificata del line of sight"},{"type":"INSERT","lineNumber":294,"content":"            Vector2 start = enemy.Transform.Position;"},{"type":"INSERT","lineNumber":295,"content":"            Vector2 end = target.Transform.Position;"},{"type":"INSERT","lineNumber":296,"content":"            "},{"type":"INSERT","lineNumber":297,"content":"            // Usa un raycast semplificato"},{"type":"INSERT","lineNumber":298,"content":"            return !PathfindingHelper.IsLineBlocked(start, end, dungeon, TILE_SIZE);"},{"type":"INSERT","lineNumber":299,"content":"        }"},{"type":"INSERT","lineNumber":300,"content":""},{"type":"INSERT","lineNumber":301,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":302,"content":"        /// Genera punti di pattuglia per un nemico"},{"type":"INSERT","lineNumber":303,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":304,"content":"        private void GeneratePatrolPoints(Enemy enemy, Dungeon dungeon)"},{"type":"INSERT","lineNumber":305,"content":"        {"},{"type":"INSERT","lineNumber":306,"content":"            enemy.AI.PatrolPoints.Clear();"},{"type":"INSERT","lineNumber":307,"content":"            "},{"type":"INSERT","lineNumber":308,"content":"            // Trova la stanza in cui si trova il nemico"},{"type":"INSERT","lineNumber":309,"content":"            var currentRoom = dungeon.GetRoomAt(enemy.Transform.Position);"},{"type":"INSERT","lineNumber":310,"content":"            "},{"type":"INSERT","lineNumber":311,"content":"            if (currentRoom != null)"},{"type":"INSERT","lineNumber":312,"content":"            {"},{"type":"INSERT","lineNumber":313,"content":"                // Genera 2-4 punti di pattuglia nella stanza"},{"type":"INSERT","lineNumber":314,"content":"                int pointCount = _random.Next(2, 5);"},{"type":"INSERT","lineNumber":315,"content":"                "},{"type":"INSERT","lineNumber":316,"content":"                for (int i = 0; i < pointCount; i++)"},{"type":"INSERT","lineNumber":317,"content":"                {"},{"type":"INSERT","lineNumber":318,"content":"                    Vector2 point = currentRoom.GetRandomPosition() * TILE_SIZE;"},{"type":"INSERT","lineNumber":319,"content":"                    enemy.AI.PatrolPoints.Add(point);"},{"type":"INSERT","lineNumber":320,"content":"                }"},{"type":"INSERT","lineNumber":321,"content":"            }"},{"type":"INSERT","lineNumber":322,"content":"            else"},{"type":"INSERT","lineNumber":323,"content":"            {"},{"type":"INSERT","lineNumber":324,"content":"                // Se non è in una stanza, crea punti intorno alla posizione corrente"},{"type":"INSERT","lineNumber":325,"content":"                for (int i = 0; i < 4; i++)"},{"type":"INSERT","lineNumber":326,"content":"                {"},{"type":"INSERT","lineNumber":327,"content":"                    float angle = (float)(i * Math.PI * 0.5);"},{"type":"INSERT","lineNumber":328,"content":"                    Vector2 offset = new Vector2((float)Math.Cos(angle), (float)Math.Sin(angle)) * 100f;"},{"type":"INSERT","lineNumber":329,"content":"                    enemy.AI.PatrolPoints.Add(enemy.Transform.Position + offset);"},{"type":"INSERT","lineNumber":330,"content":"                }"},{"type":"INSERT","lineNumber":331,"content":"            }"},{"type":"INSERT","lineNumber":332,"content":"        }"},{"type":"INSERT","lineNumber":333,"content":""},{"type":"INSERT","lineNumber":334,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":335,"content":"        /// Esegue un attacco contro il giocatore"},{"type":"INSERT","lineNumber":336,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":337,"content":"        private void PerformAttack(Enemy enemy, Player player)"},{"type":"INSERT","lineNumber":338,"content":"        {"},{"type":"INSERT","lineNumber":339,"content":"            if (player.Health != null)"},{"type":"INSERT","lineNumber":340,"content":"            {"},{"type":"INSERT","lineNumber":341,"content":"                int damage = enemy.AI.AttackDamage;"},{"type":"INSERT","lineNumber":342,"content":"                player.Health.TakeDamage(damage);"},{"type":"INSERT","lineNumber":343,"content":"                "},{"type":"INSERT","lineNumber":344,"content":"                // Feedback visuale/audio dell'attacco potrebbe essere aggiunto qui"},{"type":"INSERT","lineNumber":345,"content":"            }"},{"type":"INSERT","lineNumber":346,"content":"        }"},{"type":"INSERT","lineNumber":347,"content":""},{"type":"INSERT","lineNumber":348,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":349,"content":"        /// Aggiorna i timer dell'AI"},{"type":"INSERT","lineNumber":350,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":351,"content":"        private void UpdateTimers(AIComponent ai, float deltaTime)"},{"type":"INSERT","lineNumber":352,"content":"        {"},{"type":"INSERT","lineNumber":353,"content":"            if (ai.AttackCooldownTimer > 0)"},{"type":"INSERT","lineNumber":354,"content":"                ai.AttackCooldownTimer -= deltaTime;"},{"type":"INSERT","lineNumber":355,"content":""},{"type":"INSERT","lineNumber":356,"content":"            if (ai.AlertTimer > 0)"},{"type":"INSERT","lineNumber":357,"content":"                ai.AlertTimer -= deltaTime;"},{"type":"INSERT","lineNumber":358,"content":""},{"type":"INSERT","lineNumber":359,"content":"            if (ai.PathRecalculateTimer > 0)"},{"type":"INSERT","lineNumber":360,"content":"                ai.PathRecalculateTimer -= deltaTime;"},{"type":"INSERT","lineNumber":361,"content":"        }"},{"type":"INSERT","lineNumber":362,"content":""},{"type":"INSERT","lineNumber":363,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":364,"content":"        /// Aggiorna lo stato generale dell'AI"},{"type":"INSERT","lineNumber":365,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":366,"content":"        private void UpdateAIState(Enemy enemy, Player player)"},{"type":"INSERT","lineNumber":367,"content":"        {"},{"type":"INSERT","lineNumber":368,"content":"            float distanceToPlayer = Vector2.Distance(enemy.Transform.Position, player.Transform.Position);"},{"type":"INSERT","lineNumber":369,"content":"            "},{"type":"INSERT","lineNumber":370,"content":"            // Aggiorna l'ultima posizione conosciuta del giocatore se è visibile"},{"type":"INSERT","lineNumber":371,"content":"            if (distanceToPlayer <= enemy.AI.SightRange && CanSeeTarget(enemy, player, null))"},{"type":"INSERT","lineNumber":372,"content":"            {"},{"type":"INSERT","lineNumber":373,"content":"                enemy.AI.LastKnownPlayerPosition = player.Transform.Position;"},{"type":"INSERT","lineNumber":374,"content":"                enemy.AI.AlertTimer = enemy.AI.AlertDuration;"},{"type":"INSERT","lineNumber":375,"content":"            }"},{"type":"INSERT","lineNumber":376,"content":"        }"},{"type":"INSERT","lineNumber":377,"content":"    }"},{"type":"INSERT","lineNumber":378,"content":""},{"type":"INSERT","lineNumber":379,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":380,"content":"    /// Tipi di comportamento AI"},{"type":"INSERT","lineNumber":381,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":382,"content":"    public enum AIBehaviorType"},{"type":"INSERT","lineNumber":383,"content":"    {"},{"type":"INSERT","lineNumber":384,"content":"        Patrol,"},{"type":"INSERT","lineNumber":385,"content":"        Chase,"},{"type":"INSERT","lineNumber":386,"content":"        Attack,"},{"type":"INSERT","lineNumber":387,"content":"        Investigate,"},{"type":"INSERT","lineNumber":388,"content":"        Flee"},{"type":"INSERT","lineNumber":389,"content":"    }"}]},{"timestamp":1756229140996,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":10,"oldContent":"    }"},{"type":"DELETE","lineNumber":11,"oldContent":"        Flee"},{"type":"INSERT","lineNumber":7,"content":"using DungeonExplorer.Components;"},{"type":"INSERT","lineNumber":8,"content":""},{"type":"DELETE","lineNumber":13,"oldContent":"        Investigate,"},{"type":"DELETE","lineNumber":14,"oldContent":"        Attack,"},{"type":"INSERT","lineNumber":10,"content":"{"},{"type":"DELETE","lineNumber":16,"oldContent":"        Chase,"},{"type":"DELETE","lineNumber":18,"oldContent":"        Patrol,"},{"type":"DELETE","lineNumber":20,"oldContent":"    {"},{"type":"DELETE","lineNumber":22,"oldContent":"    public enum AIBehaviorType"},{"type":"DELETE","lineNumber":24,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":26,"oldContent":"    /// Tipi di comportamento AI"},{"type":"DELETE","lineNumber":28,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"DELETE","lineNumber":32,"oldContent":"    }"},{"type":"DELETE","lineNumber":34,"oldContent":"        }"},{"type":"DELETE","lineNumber":36,"oldContent":"            }"},{"type":"DELETE","lineNumber":38,"oldContent":"                enemy.AI.AlertTimer = enemy.AI.AlertDuration;"},{"type":"DELETE","lineNumber":40,"oldContent":"                enemy.AI.LastKnownPlayerPosition = player.Transform.Position;"},{"type":"DELETE","lineNumber":42,"oldContent":"            {"},{"type":"DELETE","lineNumber":44,"oldContent":"            if (distanceToPlayer <= enemy.AI.SightRange && CanSeeTarget(enemy, player, null))"},{"type":"DELETE","lineNumber":46,"oldContent":"            // Aggiorna l'ultima posizione conosciuta del giocatore se è visibile"},{"type":"DELETE","lineNumber":48,"oldContent":"            "},{"type":"DELETE","lineNumber":50,"oldContent":"            float distanceToPlayer = Vector2.Distance(enemy.Transform.Position, player.Transform.Position);"},{"type":"DELETE","lineNumber":53,"oldContent":"        {"},{"type":"DELETE","lineNumber":54,"oldContent":"        private void UpdateAIState(Enemy enemy, Player player)"},{"type":"DELETE","lineNumber":56,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":58,"oldContent":"        /// Aggiorna lo stato generale dell'AI"},{"type":"DELETE","lineNumber":60,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":"        }"},{"type":"DELETE","lineNumber":66,"oldContent":"                ai.PathRecalculateTimer -= deltaTime;"},{"type":"DELETE","lineNumber":68,"oldContent":"            if (ai.PathRecalculateTimer > 0)"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"                ai.AlertTimer -= deltaTime;"},{"type":"DELETE","lineNumber":74,"oldContent":"            if (ai.AlertTimer > 0)"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"                ai.AttackCooldownTimer -= deltaTime;"},{"type":"DELETE","lineNumber":80,"oldContent":"            if (ai.AttackCooldownTimer > 0)"},{"type":"DELETE","lineNumber":82,"oldContent":"        {"},{"type":"DELETE","lineNumber":84,"oldContent":"        private void UpdateTimers(AIComponent ai, float deltaTime)"},{"type":"DELETE","lineNumber":86,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":88,"oldContent":"        /// Aggiorna i timer dell'AI"},{"type":"DELETE","lineNumber":90,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"DELETE","lineNumber":94,"oldContent":"        }"},{"type":"DELETE","lineNumber":96,"oldContent":"            }"},{"type":"DELETE","lineNumber":98,"oldContent":"                // Feedback visuale/audio dell'attacco potrebbe essere aggiunto qui"},{"type":"DELETE","lineNumber":100,"oldContent":"                "},{"type":"DELETE","lineNumber":102,"oldContent":"                player.Health.TakeDamage(damage);"},{"type":"DELETE","lineNumber":104,"oldContent":"                int damage = enemy.AI.AttackDamage;"},{"type":"DELETE","lineNumber":106,"oldContent":"            {"},{"type":"DELETE","lineNumber":108,"oldContent":"            if (player.Health != null)"},{"type":"DELETE","lineNumber":110,"oldContent":"        {"},{"type":"DELETE","lineNumber":112,"oldContent":"        private void PerformAttack(Enemy enemy, Player player)"},{"type":"DELETE","lineNumber":114,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":116,"oldContent":"        /// Esegue un attacco contro il giocatore"},{"type":"DELETE","lineNumber":118,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":120,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":"        }"},{"type":"DELETE","lineNumber":124,"oldContent":"            }"},{"type":"DELETE","lineNumber":126,"oldContent":"                }"},{"type":"DELETE","lineNumber":128,"oldContent":"                    enemy.AI.PatrolPoints.Add(enemy.Transform.Position + offset);"},{"type":"DELETE","lineNumber":130,"oldContent":"                    Vector2 offset = new Vector2((float)Math.Cos(angle), (float)Math.Sin(angle)) * 100f;"},{"type":"DELETE","lineNumber":132,"oldContent":"                    float angle = (float)(i * Math.PI * 0.5);"},{"type":"DELETE","lineNumber":134,"oldContent":"                {"},{"type":"DELETE","lineNumber":136,"oldContent":"                for (int i = 0; i < 4; i++)"},{"type":"DELETE","lineNumber":138,"oldContent":"                // Se non è in una stanza, crea punti intorno alla posizione corrente"},{"type":"DELETE","lineNumber":140,"oldContent":"            {"},{"type":"DELETE","lineNumber":142,"oldContent":"            else"},{"type":"DELETE","lineNumber":144,"oldContent":"            }"},{"type":"DELETE","lineNumber":146,"oldContent":"                }"},{"type":"DELETE","lineNumber":148,"oldContent":"                    enemy.AI.PatrolPoints.Add(point);"},{"type":"DELETE","lineNumber":150,"oldContent":"                    Vector2 point = currentRoom.GetRandomPosition() * TILE_SIZE;"},{"type":"DELETE","lineNumber":152,"oldContent":"                {"},{"type":"DELETE","lineNumber":154,"oldContent":"                for (int i = 0; i < pointCount; i++)"},{"type":"DELETE","lineNumber":156,"oldContent":"                "},{"type":"DELETE","lineNumber":158,"oldContent":"                int pointCount = _random.Next(2, 5);"},{"type":"DELETE","lineNumber":160,"oldContent":"                // Genera 2-4 punti di pattuglia nella stanza"},{"type":"DELETE","lineNumber":162,"oldContent":"            {"},{"type":"DELETE","lineNumber":164,"oldContent":"            if (currentRoom != null)"},{"type":"DELETE","lineNumber":166,"oldContent":"            "},{"type":"DELETE","lineNumber":168,"oldContent":"            var currentRoom = dungeon.GetRoomAt(enemy.Transform.Position);"},{"type":"DELETE","lineNumber":170,"oldContent":"            // Trova la stanza in cui si trova il nemico"},{"type":"DELETE","lineNumber":172,"oldContent":"            "},{"type":"DELETE","lineNumber":174,"oldContent":"            enemy.AI.PatrolPoints.Clear();"},{"type":"DELETE","lineNumber":176,"oldContent":"        {"},{"type":"DELETE","lineNumber":178,"oldContent":"        private void GeneratePatrolPoints(Enemy enemy, Dungeon dungeon)"},{"type":"DELETE","lineNumber":180,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":182,"oldContent":"        /// Genera punti di pattuglia per un nemico"},{"type":"DELETE","lineNumber":184,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":186,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"        }"},{"type":"DELETE","lineNumber":190,"oldContent":"            return !PathfindingHelper.IsLineBlocked(start, end, dungeon, TILE_SIZE);"},{"type":"DELETE","lineNumber":192,"oldContent":"            // Usa un raycast semplificato"},{"type":"DELETE","lineNumber":194,"oldContent":"            "},{"type":"DELETE","lineNumber":196,"oldContent":"            Vector2 end = target.Transform.Position;"},{"type":"DELETE","lineNumber":198,"oldContent":"            Vector2 start = enemy.Transform.Position;"},{"type":"DELETE","lineNumber":200,"oldContent":"            // Implementazione semplificata del line of sight"},{"type":"DELETE","lineNumber":202,"oldContent":"        {"},{"type":"DELETE","lineNumber":204,"oldContent":"        private bool CanSeeTarget(Enemy enemy, Entity target, Dungeon dungeon)"},{"type":"DELETE","lineNumber":206,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":208,"oldContent":"        /// Controlla se un nemico può vedere il target"},{"type":"DELETE","lineNumber":210,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":212,"oldContent":""},{"type":"DELETE","lineNumber":214,"oldContent":"        }"},{"type":"DELETE","lineNumber":216,"oldContent":"            }"},{"type":"DELETE","lineNumber":218,"oldContent":"                }"},{"type":"DELETE","lineNumber":220,"oldContent":"                                                        node.Y * TILE_SIZE + TILE_SIZE * 0.5f));"},{"type":"DELETE","lineNumber":222,"oldContent":"                    enemy.AI.CurrentPath.Add(new Vector2(node.X * TILE_SIZE + TILE_SIZE * 0.5f, "},{"type":"DELETE","lineNumber":224,"oldContent":"                {"},{"type":"DELETE","lineNumber":226,"oldContent":"                foreach (var node in pathNodes)"},{"type":"DELETE","lineNumber":228,"oldContent":"            {"},{"type":"DELETE","lineNumber":230,"oldContent":"            if (pathNodes != null)"},{"type":"DELETE","lineNumber":232,"oldContent":"            "},{"type":"DELETE","lineNumber":234,"oldContent":"            enemy.AI.CurrentPath.Clear();"},{"type":"DELETE","lineNumber":236,"oldContent":"            "},{"type":"DELETE","lineNumber":238,"oldContent":"            var pathNodes = _pathfinder.FindPath(startNode, endNode, dungeon);"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"DELETE","lineNumber":242,"oldContent":"            var endNode = new Node((int)(targetPosition.X / TILE_SIZE), (int)(targetPosition.Y / TILE_SIZE));"},{"type":"DELETE","lineNumber":244,"oldContent":"            var startNode = new Node((int)(enemy.Transform.Position.X / TILE_SIZE), (int)(enemy.Transform.Position.Y / TILE_SIZE));"},{"type":"DELETE","lineNumber":246,"oldContent":"        {"},{"type":"DELETE","lineNumber":248,"oldContent":"        private void CalculatePath(Enemy enemy, Vector2 targetPosition, Dungeon dungeon)"},{"type":"DELETE","lineNumber":250,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":252,"oldContent":"        /// Calcola un path usando A*"},{"type":"DELETE","lineNumber":254,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":256,"oldContent":""},{"type":"DELETE","lineNumber":258,"oldContent":"        }"},{"type":"DELETE","lineNumber":260,"oldContent":"            }"},{"type":"DELETE","lineNumber":262,"oldContent":"                }"},{"type":"DELETE","lineNumber":264,"oldContent":"                    }"},{"type":"DELETE","lineNumber":266,"oldContent":"                        enemy.Movement.LastDirection = direction;"},{"type":"DELETE","lineNumber":268,"oldContent":"                        enemy.Movement.IsMoving = true;"},{"type":"DELETE","lineNumber":270,"oldContent":"                    {"},{"type":"DELETE","lineNumber":272,"oldContent":"                    if (enemy.Movement != null)"},{"type":"DELETE","lineNumber":274,"oldContent":"                    // Aggiorna componente movimento se presente"},{"type":"DELETE","lineNumber":277,"oldContent":""},{"type":"DELETE","lineNumber":278,"oldContent":"                    enemy.Transform.Position += movement;"},{"type":"DELETE","lineNumber":280,"oldContent":"                    Vector2 movement = direction * speed * deltaTime;"},{"type":"DELETE","lineNumber":282,"oldContent":"                    Vector2 direction = Vector2.Normalize(nextWaypoint - enemy.Transform.Position);"},{"type":"DELETE","lineNumber":284,"oldContent":"                    // Muovi verso il waypoint"},{"type":"DELETE","lineNumber":286,"oldContent":"                {"},{"type":"DELETE","lineNumber":288,"oldContent":"                else"},{"type":"DELETE","lineNumber":290,"oldContent":"                }"},{"type":"DELETE","lineNumber":292,"oldContent":"                    enemy.AI.CurrentPath.RemoveAt(0);"},{"type":"DELETE","lineNumber":294,"oldContent":"                    // Raggiunto il waypoint, passa al successivo"},{"type":"DELETE","lineNumber":296,"oldContent":"                {"},{"type":"DELETE","lineNumber":298,"oldContent":"                if (distanceToWaypoint < TILE_SIZE * 0.5f)"},{"type":"DELETE","lineNumber":301,"oldContent":""},{"type":"DELETE","lineNumber":302,"oldContent":"                float distanceToWaypoint = Vector2.Distance(enemy.Transform.Position, nextWaypoint);"},{"type":"DELETE","lineNumber":304,"oldContent":"                Vector2 nextWaypoint = enemy.AI.CurrentPath[0];"},{"type":"DELETE","lineNumber":306,"oldContent":"            {"},{"type":"DELETE","lineNumber":308,"oldContent":"            if (enemy.AI.CurrentPath.Count > 0)"},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":312,"oldContent":"            }"},{"type":"DELETE","lineNumber":314,"oldContent":"                enemy.AI.PathRecalculateTimer = enemy.AI.PathRecalculateInterval;"},{"type":"DELETE","lineNumber":316,"oldContent":"                CalculatePath(enemy, targetPosition, dungeon);"},{"type":"DELETE","lineNumber":318,"oldContent":"            {"},{"type":"DELETE","lineNumber":320,"oldContent":"            if (enemy.AI.CurrentPath.Count == 0 || enemy.AI.PathRecalculateTimer <= 0f)"},{"type":"DELETE","lineNumber":322,"oldContent":"            // Controlla se serve ricalcolare il path"},{"type":"DELETE","lineNumber":324,"oldContent":"        {"},{"type":"DELETE","lineNumber":326,"oldContent":"        private void MoveTowardsTarget(Enemy enemy, Vector2 targetPosition, Dungeon dungeon, float deltaTime, float speed)"},{"type":"DELETE","lineNumber":328,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":330,"oldContent":"        /// Muove un nemico verso una posizione target usando pathfinding"},{"type":"DELETE","lineNumber":332,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":334,"oldContent":""},{"type":"DELETE","lineNumber":336,"oldContent":"        }"},{"type":"DELETE","lineNumber":338,"oldContent":"            MoveTowardsTarget(enemy, fleeTarget, dungeon, deltaTime, enemy.AI.ChaseSpeed * 1.2f);"},{"type":"DELETE","lineNumber":340,"oldContent":"            "},{"type":"DELETE","lineNumber":342,"oldContent":"            Vector2 fleeTarget = enemy.Transform.Position + directionFromPlayer * 200f; // Fuggi per 200 unità"},{"type":"DELETE","lineNumber":344,"oldContent":"            Vector2 directionFromPlayer = Vector2.Normalize(enemy.Transform.Position - player.Transform.Position);"},{"type":"DELETE","lineNumber":346,"oldContent":"            // Calcola la direzione opposta al giocatore"},{"type":"DELETE","lineNumber":348,"oldContent":"            "},{"type":"DELETE","lineNumber":350,"oldContent":"            enemy.AI.CurrentState = AIState.Fleeing;"},{"type":"DELETE","lineNumber":353,"oldContent":"        {"},{"type":"DELETE","lineNumber":354,"oldContent":"        private void ExecuteFleeBehavior(Enemy enemy, Player player, Dungeon dungeon, float deltaTime)"},{"type":"DELETE","lineNumber":356,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":358,"oldContent":"        /// Comportamento di fuga"},{"type":"DELETE","lineNumber":360,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":362,"oldContent":""},{"type":"DELETE","lineNumber":364,"oldContent":"        }"},{"type":"DELETE","lineNumber":366,"oldContent":"            }"},{"type":"DELETE","lineNumber":368,"oldContent":"                MoveTowardsTarget(enemy, enemy.AI.LastKnownPlayerPosition, dungeon, deltaTime, enemy.AI.PatrolSpeed);"},{"type":"DELETE","lineNumber":370,"oldContent":"                // Muovi verso la posizione da investigare"},{"type":"DELETE","lineNumber":372,"oldContent":"            {"},{"type":"DELETE","lineNumber":374,"oldContent":"            else"},{"type":"DELETE","lineNumber":376,"oldContent":"            }"},{"type":"DELETE","lineNumber":378,"oldContent":"                }"},{"type":"DELETE","lineNumber":380,"oldContent":"                    enemy.AI.LastKnownPlayerPosition = Vector2.Zero;"},{"type":"DELETE","lineNumber":382,"oldContent":"                    enemy.AI.InvestigateTimer = 0f;"},{"type":"DELETE","lineNumber":384,"oldContent":"                    enemy.AI.AlertTimer = 0f;"},{"type":"DELETE","lineNumber":386,"oldContent":"                    enemy.AI.CurrentState = AIState.Patrol;"},{"type":"DELETE","lineNumber":388,"oldContent":"                    // Finito di investigare, torna alla pattuglia"},{"type":"INSERT","lineNumber":200,"content":"                    // Finito di investigare, torna alla pattuglia"},{"type":"INSERT","lineNumber":201,"content":"                    enemy.AI.CurrentState = AIState.Patrol;"},{"type":"INSERT","lineNumber":202,"content":"                    enemy.AI.AlertTimer = 0f;"},{"type":"INSERT","lineNumber":203,"content":"                    enemy.AI.InvestigateTimer = 0f;"},{"type":"INSERT","lineNumber":204,"content":"                    enemy.AI.LastKnownPlayerPosition = Vector2.Zero;"},{"type":"INSERT","lineNumber":205,"content":"                }"},{"type":"INSERT","lineNumber":206,"content":"            }"},{"type":"INSERT","lineNumber":207,"content":"            else"},{"type":"INSERT","lineNumber":208,"content":"            {"},{"type":"INSERT","lineNumber":209,"content":"                // Muovi verso la posizione da investigare"},{"type":"INSERT","lineNumber":210,"content":"                MoveTowardsTarget(enemy, enemy.AI.LastKnownPlayerPosition, dungeon, deltaTime, enemy.AI.PatrolSpeed);"},{"type":"INSERT","lineNumber":211,"content":"            }"},{"type":"INSERT","lineNumber":212,"content":"        }"},{"type":"INSERT","lineNumber":213,"content":""},{"type":"INSERT","lineNumber":214,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":215,"content":"        /// Comportamento di fuga"},{"type":"INSERT","lineNumber":216,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":217,"content":"        private void ExecuteFleeBehavior(Enemy enemy, Player player, Dungeon dungeon, float deltaTime)"},{"type":"INSERT","lineNumber":218,"content":"        {"},{"type":"INSERT","lineNumber":219,"content":"            enemy.AI.CurrentState = AIState.Fleeing;"},{"type":"INSERT","lineNumber":220,"content":"            "},{"type":"INSERT","lineNumber":221,"content":"            // Calcola la direzione opposta al giocatore"},{"type":"INSERT","lineNumber":222,"content":"            Vector2 directionFromPlayer = Vector2.Normalize(enemy.Transform.Position - player.Transform.Position);"},{"type":"INSERT","lineNumber":223,"content":"            Vector2 fleeTarget = enemy.Transform.Position + directionFromPlayer * 200f; // Fuggi per 200 unità"},{"type":"INSERT","lineNumber":224,"content":"            "},{"type":"INSERT","lineNumber":225,"content":"            MoveTowardsTarget(enemy, fleeTarget, dungeon, deltaTime, enemy.AI.ChaseSpeed * 1.2f);"},{"type":"INSERT","lineNumber":226,"content":"        }"},{"type":"INSERT","lineNumber":227,"content":""},{"type":"INSERT","lineNumber":228,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":229,"content":"        /// Muove un nemico verso una posizione target usando pathfinding"},{"type":"INSERT","lineNumber":230,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":231,"content":"        private void MoveTowardsTarget(Enemy enemy, Vector2 targetPosition, Dungeon dungeon, float deltaTime, float speed)"},{"type":"INSERT","lineNumber":232,"content":"        {"},{"type":"INSERT","lineNumber":233,"content":"            // Controlla se serve ricalcolare il path"},{"type":"INSERT","lineNumber":234,"content":"            if (enemy.AI.CurrentPath.Count == 0 || enemy.AI.PathRecalculateTimer <= 0f)"},{"type":"INSERT","lineNumber":235,"content":"            {"},{"type":"INSERT","lineNumber":236,"content":"                CalculatePath(enemy, targetPosition, dungeon);"},{"type":"INSERT","lineNumber":237,"content":"                enemy.AI.PathRecalculateTimer = enemy.AI.PathRecalculateInterval;"},{"type":"INSERT","lineNumber":238,"content":"            }"},{"type":"INSERT","lineNumber":239,"content":""},{"type":"INSERT","lineNumber":240,"content":"            if (enemy.AI.CurrentPath.Count > 0)"},{"type":"INSERT","lineNumber":241,"content":"            {"},{"type":"INSERT","lineNumber":242,"content":"                Vector2 nextWaypoint = enemy.AI.CurrentPath[0];"},{"type":"INSERT","lineNumber":243,"content":"                float distanceToWaypoint = Vector2.Distance(enemy.Transform.Position, nextWaypoint);"},{"type":"INSERT","lineNumber":244,"content":""},{"type":"INSERT","lineNumber":245,"content":"                if (distanceToWaypoint < TILE_SIZE * 0.5f)"},{"type":"INSERT","lineNumber":246,"content":"                {"},{"type":"INSERT","lineNumber":247,"content":"                    // Raggiunto il waypoint, passa al successivo"},{"type":"INSERT","lineNumber":248,"content":"                    enemy.AI.CurrentPath.RemoveAt(0);"},{"type":"INSERT","lineNumber":249,"content":"                }"},{"type":"INSERT","lineNumber":250,"content":"                else"},{"type":"INSERT","lineNumber":251,"content":"                {"},{"type":"INSERT","lineNumber":252,"content":"                    // Muovi verso il waypoint"},{"type":"INSERT","lineNumber":253,"content":"                    Vector2 direction = Vector2.Normalize(nextWaypoint - enemy.Transform.Position);"},{"type":"INSERT","lineNumber":254,"content":"                    Vector2 movement = direction * speed * deltaTime;"},{"type":"INSERT","lineNumber":255,"content":"                    enemy.Transform.Position += movement;"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"                    // Aggiorna componente movimento se presente"},{"type":"INSERT","lineNumber":258,"content":"                    if (enemy.Movement != null)"},{"type":"INSERT","lineNumber":259,"content":"                    {"},{"type":"INSERT","lineNumber":260,"content":"                        enemy.Movement.IsMoving = true;"},{"type":"INSERT","lineNumber":261,"content":"                        enemy.Movement.LastDirection = direction;"},{"type":"INSERT","lineNumber":262,"content":"                    }"},{"type":"INSERT","lineNumber":263,"content":"                }"},{"type":"INSERT","lineNumber":264,"content":"            }"},{"type":"INSERT","lineNumber":265,"content":"        }"},{"type":"INSERT","lineNumber":266,"content":""},{"type":"INSERT","lineNumber":267,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":268,"content":"        /// Calcola un path usando A*"},{"type":"INSERT","lineNumber":269,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":270,"content":"        private void CalculatePath(Enemy enemy, Vector2 targetPosition, Dungeon dungeon)"},{"type":"INSERT","lineNumber":271,"content":"        {"},{"type":"INSERT","lineNumber":272,"content":"            var startNode = new Node((int)(enemy.Transform.Position.X / TILE_SIZE), (int)(enemy.Transform.Position.Y / TILE_SIZE));"},{"type":"INSERT","lineNumber":273,"content":"            var endNode = new Node((int)(targetPosition.X / TILE_SIZE), (int)(targetPosition.Y / TILE_SIZE));"},{"type":"INSERT","lineNumber":274,"content":""},{"type":"INSERT","lineNumber":275,"content":"            var pathNodes = _pathfinder.FindPath(startNode, endNode, dungeon);"},{"type":"INSERT","lineNumber":276,"content":"            "},{"type":"INSERT","lineNumber":277,"content":"            enemy.AI.CurrentPath.Clear();"},{"type":"INSERT","lineNumber":278,"content":"            "},{"type":"INSERT","lineNumber":279,"content":"            if (pathNodes != null)"},{"type":"INSERT","lineNumber":280,"content":"            {"},{"type":"INSERT","lineNumber":281,"content":"                foreach (var node in pathNodes)"},{"type":"INSERT","lineNumber":282,"content":"                {"},{"type":"INSERT","lineNumber":283,"content":"                    enemy.AI.CurrentPath.Add(new Vector2(node.X * TILE_SIZE + TILE_SIZE * 0.5f, "},{"type":"INSERT","lineNumber":284,"content":"                                                        node.Y * TILE_SIZE + TILE_SIZE * 0.5f));"},{"type":"INSERT","lineNumber":285,"content":"                }"},{"type":"INSERT","lineNumber":286,"content":"            }"},{"type":"INSERT","lineNumber":287,"content":"        }"},{"type":"INSERT","lineNumber":288,"content":""},{"type":"INSERT","lineNumber":289,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":290,"content":"        /// Controlla se un nemico può vedere il target"},{"type":"INSERT","lineNumber":291,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":292,"content":"        private bool CanSeeTarget(Enemy enemy, Entity target, Dungeon dungeon)"},{"type":"INSERT","lineNumber":293,"content":"        {"},{"type":"INSERT","lineNumber":294,"content":"            // Implementazione semplificata del line of sight"},{"type":"INSERT","lineNumber":295,"content":"            Vector2 start = enemy.Transform.Position;"},{"type":"INSERT","lineNumber":296,"content":"            Vector2 end = target.Transform.Position;"},{"type":"INSERT","lineNumber":297,"content":"            "},{"type":"INSERT","lineNumber":298,"content":"            // Usa un raycast semplificato"},{"type":"INSERT","lineNumber":299,"content":"            return !PathfindingHelper.IsLineBlocked(start, end, dungeon, TILE_SIZE);"},{"type":"INSERT","lineNumber":300,"content":"        }"},{"type":"INSERT","lineNumber":301,"content":""},{"type":"INSERT","lineNumber":302,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":303,"content":"        /// Genera punti di pattuglia per un nemico"},{"type":"INSERT","lineNumber":304,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":305,"content":"        private void GeneratePatrolPoints(Enemy enemy, Dungeon dungeon)"},{"type":"INSERT","lineNumber":306,"content":"        {"},{"type":"INSERT","lineNumber":307,"content":"            enemy.AI.PatrolPoints.Clear();"},{"type":"INSERT","lineNumber":308,"content":"            "},{"type":"INSERT","lineNumber":309,"content":"            // Trova la stanza in cui si trova il nemico"},{"type":"INSERT","lineNumber":310,"content":"            var currentRoom = dungeon.GetRoomAt(enemy.Transform.Position);"},{"type":"INSERT","lineNumber":311,"content":"            "},{"type":"INSERT","lineNumber":312,"content":"            if (currentRoom != null)"},{"type":"INSERT","lineNumber":313,"content":"            {"},{"type":"INSERT","lineNumber":314,"content":"                // Genera 2-4 punti di pattuglia nella stanza"},{"type":"INSERT","lineNumber":315,"content":"                int pointCount = _random.Next(2, 5);"},{"type":"INSERT","lineNumber":316,"content":"                "},{"type":"INSERT","lineNumber":317,"content":"                for (int i = 0; i < pointCount; i++)"},{"type":"INSERT","lineNumber":318,"content":"                {"},{"type":"INSERT","lineNumber":319,"content":"                    Vector2 point = currentRoom.GetRandomPosition() * TILE_SIZE;"},{"type":"INSERT","lineNumber":320,"content":"                    enemy.AI.PatrolPoints.Add(point);"},{"type":"INSERT","lineNumber":321,"content":"                }"},{"type":"INSERT","lineNumber":322,"content":"            }"},{"type":"INSERT","lineNumber":323,"content":"            else"},{"type":"INSERT","lineNumber":324,"content":"            {"},{"type":"INSERT","lineNumber":325,"content":"                // Se non è in una stanza, crea punti intorno alla posizione corrente"},{"type":"INSERT","lineNumber":326,"content":"                for (int i = 0; i < 4; i++)"},{"type":"INSERT","lineNumber":327,"content":"                {"},{"type":"INSERT","lineNumber":328,"content":"                    float angle = (float)(i * Math.PI * 0.5);"},{"type":"INSERT","lineNumber":329,"content":"                    Vector2 offset = new Vector2((float)Math.Cos(angle), (float)Math.Sin(angle)) * 100f;"},{"type":"INSERT","lineNumber":330,"content":"                    enemy.AI.PatrolPoints.Add(enemy.Transform.Position + offset);"},{"type":"INSERT","lineNumber":331,"content":"                }"},{"type":"INSERT","lineNumber":332,"content":"            }"},{"type":"INSERT","lineNumber":333,"content":"        }"},{"type":"INSERT","lineNumber":334,"content":""},{"type":"INSERT","lineNumber":335,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":336,"content":"        /// Esegue un attacco contro il giocatore"},{"type":"INSERT","lineNumber":337,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":338,"content":"        private void PerformAttack(Enemy enemy, Player player)"},{"type":"INSERT","lineNumber":339,"content":"        {"},{"type":"INSERT","lineNumber":340,"content":"            if (player.Health != null)"},{"type":"INSERT","lineNumber":341,"content":"            {"},{"type":"INSERT","lineNumber":342,"content":"                int damage = enemy.AI.AttackDamage;"},{"type":"INSERT","lineNumber":343,"content":"                player.Health.TakeDamage(damage);"},{"type":"INSERT","lineNumber":344,"content":"                "},{"type":"INSERT","lineNumber":345,"content":"                // Feedback visuale/audio dell'attacco potrebbe essere aggiunto qui"},{"type":"INSERT","lineNumber":346,"content":"            }"},{"type":"INSERT","lineNumber":347,"content":"        }"},{"type":"INSERT","lineNumber":348,"content":""},{"type":"INSERT","lineNumber":349,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":350,"content":"        /// Aggiorna i timer dell'AI"},{"type":"INSERT","lineNumber":351,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":352,"content":"        private void UpdateTimers(AIComponent ai, float deltaTime)"},{"type":"INSERT","lineNumber":353,"content":"        {"},{"type":"INSERT","lineNumber":354,"content":"            if (ai.AttackCooldownTimer > 0)"},{"type":"INSERT","lineNumber":355,"content":"                ai.AttackCooldownTimer -= deltaTime;"},{"type":"INSERT","lineNumber":356,"content":""},{"type":"INSERT","lineNumber":357,"content":"            if (ai.AlertTimer > 0)"},{"type":"INSERT","lineNumber":358,"content":"                ai.AlertTimer -= deltaTime;"},{"type":"INSERT","lineNumber":359,"content":""},{"type":"INSERT","lineNumber":360,"content":"            if (ai.PathRecalculateTimer > 0)"},{"type":"INSERT","lineNumber":361,"content":"                ai.PathRecalculateTimer -= deltaTime;"},{"type":"INSERT","lineNumber":362,"content":"        }"},{"type":"INSERT","lineNumber":363,"content":""},{"type":"INSERT","lineNumber":364,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":365,"content":"        /// Aggiorna lo stato generale dell'AI"},{"type":"INSERT","lineNumber":366,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":367,"content":"        private void UpdateAIState(Enemy enemy, Player player)"},{"type":"INSERT","lineNumber":368,"content":"        {"},{"type":"INSERT","lineNumber":369,"content":"            float distanceToPlayer = Vector2.Distance(enemy.Transform.Position, player.Transform.Position);"},{"type":"INSERT","lineNumber":370,"content":"            "},{"type":"INSERT","lineNumber":371,"content":"            // Aggiorna l'ultima posizione conosciuta del giocatore se è visibile"},{"type":"INSERT","lineNumber":372,"content":"            if (distanceToPlayer <= enemy.AI.SightRange && CanSeeTarget(enemy, player, null))"},{"type":"INSERT","lineNumber":373,"content":"            {"},{"type":"INSERT","lineNumber":374,"content":"                enemy.AI.LastKnownPlayerPosition = player.Transform.Position;"},{"type":"INSERT","lineNumber":375,"content":"                enemy.AI.AlertTimer = enemy.AI.AlertDuration;"},{"type":"INSERT","lineNumber":376,"content":"            }"},{"type":"INSERT","lineNumber":377,"content":"        }"},{"type":"INSERT","lineNumber":378,"content":"    }"},{"type":"INSERT","lineNumber":379,"content":""},{"type":"INSERT","lineNumber":380,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":381,"content":"    /// Tipi di comportamento AI"},{"type":"INSERT","lineNumber":382,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":383,"content":"    public enum AIBehaviorType"},{"type":"INSERT","lineNumber":384,"content":"    {"},{"type":"INSERT","lineNumber":385,"content":"        Patrol,"},{"type":"INSERT","lineNumber":386,"content":"        Chase,"},{"type":"INSERT","lineNumber":387,"content":"        Attack,"},{"type":"INSERT","lineNumber":388,"content":"        Investigate,"},{"type":"INSERT","lineNumber":389,"content":"        Flee"},{"type":"INSERT","lineNumber":390,"content":"    }"},{"type":"INSERT","lineNumber":391,"content":"}"}]},{"timestamp":1756230152023,"changes":[{"type":"INSERT","lineNumber":0,"content":"// ============================================"},{"type":"INSERT","lineNumber":1,"content":"// Systems/AISystem.cs"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":5,"content":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":3,"oldContent":"using DungeonExplorer.AI;"},{"type":"DELETE","lineNumber":5,"oldContent":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":6,"oldContent":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":8,"oldContent":"using System.Linq;"},{"type":"DELETE","lineNumber":9,"oldContent":"{"},{"type":"DELETE","lineNumber":11,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":12,"oldContent":"    /// Sistema AI che gestisce il comportamento intelligente dei nemici"},{"type":"DELETE","lineNumber":13,"oldContent":"    /// </summary>"},{"type":"INSERT","lineNumber":10,"content":"{"},{"type":"DELETE","lineNumber":16,"oldContent":"        private AStar _pathfinder;"},{"type":"DELETE","lineNumber":17,"oldContent":"        private Random _random;"},{"type":"DELETE","lineNumber":18,"oldContent":"        private const float TILE_SIZE = 32f;"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"        public AISystem()"},{"type":"DELETE","lineNumber":21,"oldContent":"        {"},{"type":"DELETE","lineNumber":22,"oldContent":"            _pathfinder = new AStar();"},{"type":"DELETE","lineNumber":23,"oldContent":"            _random = new Random();"},{"type":"DELETE","lineNumber":24,"oldContent":"        }"},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":27,"oldContent":"        /// Aggiorna l'AI di un nemico"},{"type":"DELETE","lineNumber":28,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":31,"oldContent":"            if (enemy?.AI == null || enemy.Health?.CurrentHealth <= 0) return;"},{"type":"INSERT","lineNumber":15,"content":"            if (enemy?.AI == null || enemy.Transform == null || enemy.Movement == null) return;"},{"type":"INSERT","lineNumber":16,"content":"            if (player?.Transform == null) return;"},{"type":"DELETE","lineNumber":33,"oldContent":"            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;"},{"type":"DELETE","lineNumber":34,"oldContent":"            "},{"type":"DELETE","lineNumber":35,"oldContent":"            // Aggiorna i timer"},{"type":"DELETE","lineNumber":36,"oldContent":"            UpdateTimers(enemy.AI, deltaTime);"},{"type":"INSERT","lineNumber":18,"content":"            var ai = enemy.AI;"},{"type":"INSERT","lineNumber":19,"content":"            var transform = enemy.Transform;"},{"type":"INSERT","lineNumber":20,"content":"            var movement = enemy.Movement;"},{"type":"DELETE","lineNumber":38,"oldContent":"            // Determina e esegui il comportamento"},{"type":"DELETE","lineNumber":39,"oldContent":"            AIBehaviorType behavior = DetermineBehavior(enemy, player, dungeon);"},{"type":"DELETE","lineNumber":40,"oldContent":"            ExecuteBehavior(enemy, player, dungeon, behavior, deltaTime);"},{"type":"INSERT","lineNumber":22,"content":"            float distanceToPlayer = Vector2.Distance(transform.Position, player.Transform.Position);"},{"type":"DELETE","lineNumber":42,"oldContent":"            // Aggiorna lo stato dell'AI"},{"type":"DELETE","lineNumber":43,"oldContent":"            UpdateAIState(enemy, player);"},{"type":"DELETE","lineNumber":44,"oldContent":"        }"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":47,"oldContent":"        /// Determina il comportamento appropriato per il nemico"},{"type":"DELETE","lineNumber":48,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":49,"oldContent":"        private AIBehaviorType DetermineBehavior(Enemy enemy, Player player, Dungeon dungeon)"},{"type":"DELETE","lineNumber":50,"oldContent":"        {"},{"type":"DELETE","lineNumber":51,"oldContent":"            float distanceToPlayer = Vector2.Distance(enemy.Transform.Position, player.Transform.Position);"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":53,"oldContent":"            // Se il giocatore è morto, torna al comportamento di pattuglia"},{"type":"DELETE","lineNumber":54,"oldContent":"            if (player.Health.CurrentHealth <= 0)"},{"type":"INSERT","lineNumber":24,"content":"            // State transitions"},{"type":"INSERT","lineNumber":25,"content":"            switch (ai.CurrentState)"},{"type":"DELETE","lineNumber":56,"oldContent":"                return AIBehaviorType.Patrol;"},{"type":"DELETE","lineNumber":57,"oldContent":"            }"},{"type":"INSERT","lineNumber":27,"content":"                case AIState.Idle:"},{"type":"INSERT","lineNumber":28,"content":"                case AIState.Patrolling:"},{"type":"INSERT","lineNumber":29,"content":"                    if (distanceToPlayer <= ai.DetectionRange)"},{"type":"INSERT","lineNumber":30,"content":"                    {"},{"type":"INSERT","lineNumber":31,"content":"                        ai.SetState(AIState.Chasing);"},{"type":"INSERT","lineNumber":32,"content":"                        ai.Target = player.Transform.Position;"},{"type":"INSERT","lineNumber":33,"content":"                    }"},{"type":"INSERT","lineNumber":34,"content":"                    else if (ai.CurrentState == AIState.Idle)"},{"type":"INSERT","lineNumber":35,"content":"                    {"},{"type":"INSERT","lineNumber":36,"content":"                        ai.SetState(AIState.Patrolling);"},{"type":"INSERT","lineNumber":37,"content":"                    }"},{"type":"INSERT","lineNumber":38,"content":"                    break;"},{"type":"DELETE","lineNumber":59,"oldContent":"            // Comportamento basato sulla distanza e visibilità"},{"type":"DELETE","lineNumber":60,"oldContent":"            if (distanceToPlayer <= enemy.AI.AttackRange && CanSeeTarget(enemy, player, dungeon))"},{"type":"DELETE","lineNumber":61,"oldContent":"            {"},{"type":"DELETE","lineNumber":62,"oldContent":"                return AIBehaviorType.Attack;"},{"type":"DELETE","lineNumber":63,"oldContent":"            }"},{"type":"DELETE","lineNumber":64,"oldContent":"            else if (distanceToPlayer <= enemy.AI.ChaseRange && CanSeeTarget(enemy, player, dungeon))"},{"type":"DELETE","lineNumber":65,"oldContent":"            {"},{"type":"DELETE","lineNumber":66,"oldContent":"                return AIBehaviorType.Chase;"},{"type":"DELETE","lineNumber":67,"oldContent":"            }"},{"type":"DELETE","lineNumber":68,"oldContent":"            else if (enemy.AI.CurrentState == AIState.Alerted && enemy.AI.AlertTimer > 0)"},{"type":"DELETE","lineNumber":69,"oldContent":"            {"},{"type":"DELETE","lineNumber":70,"oldContent":"                return AIBehaviorType.Investigate;"},{"type":"DELETE","lineNumber":71,"oldContent":"            }"},{"type":"DELETE","lineNumber":72,"oldContent":"            else"},{"type":"DELETE","lineNumber":73,"oldContent":"            {"},{"type":"DELETE","lineNumber":74,"oldContent":"                return AIBehaviorType.Patrol;"},{"type":"DELETE","lineNumber":75,"oldContent":"            }"},{"type":"DELETE","lineNumber":76,"oldContent":"        }"},{"type":"INSERT","lineNumber":40,"content":"                case AIState.Chasing:"},{"type":"INSERT","lineNumber":41,"content":"                    if (distanceToPlayer > ai.DetectionRange * 1.5f)"},{"type":"INSERT","lineNumber":42,"content":"                    {"},{"type":"INSERT","lineNumber":43,"content":"                        ai.SetState(AIState.Searching);"},{"type":"INSERT","lineNumber":44,"content":"                        ai.LastPlayerPosition = player.Transform.Position;"},{"type":"INSERT","lineNumber":45,"content":"                        ai.LastPlayerSeenTime = (float)gameTime.TotalGameTime.TotalSeconds;"},{"type":"INSERT","lineNumber":46,"content":"                    }"},{"type":"INSERT","lineNumber":47,"content":"                    else if (distanceToPlayer <= ai.AttackRange)"},{"type":"INSERT","lineNumber":48,"content":"                    {"},{"type":"INSERT","lineNumber":49,"content":"                        ai.SetState(AIState.Attacking);"},{"type":"INSERT","lineNumber":50,"content":"                    }"},{"type":"INSERT","lineNumber":51,"content":"                    else"},{"type":"INSERT","lineNumber":52,"content":"                    {"},{"type":"INSERT","lineNumber":53,"content":"                        ai.Target = player.Transform.Position;"},{"type":"INSERT","lineNumber":54,"content":"                    }"},{"type":"INSERT","lineNumber":55,"content":"                    break;"},{"type":"DELETE","lineNumber":78,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":79,"oldContent":"        /// Esegue il comportamento specificato"},{"type":"DELETE","lineNumber":80,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":81,"oldContent":"        private void ExecuteBehavior(Enemy enemy, Player player, Dungeon dungeon, AIBehaviorType behavior, float deltaTime)"},{"type":"DELETE","lineNumber":82,"oldContent":"        {"},{"type":"DELETE","lineNumber":83,"oldContent":"            switch (behavior)"},{"type":"DELETE","lineNumber":84,"oldContent":"            {"},{"type":"DELETE","lineNumber":85,"oldContent":"                case AIBehaviorType.Patrol:"},{"type":"DELETE","lineNumber":86,"oldContent":"                    ExecutePatrolBehavior(enemy, dungeon, deltaTime);"},{"type":"INSERT","lineNumber":57,"content":"                case AIState.Attacking:"},{"type":"INSERT","lineNumber":58,"content":"                    if (distanceToPlayer > ai.AttackRange)"},{"type":"INSERT","lineNumber":59,"content":"                    {"},{"type":"INSERT","lineNumber":60,"content":"                        ai.SetState(AIState.Chasing);"},{"type":"INSERT","lineNumber":61,"content":"                    }"},{"type":"DELETE","lineNumber":88,"oldContent":"                    "},{"type":"DELETE","lineNumber":89,"oldContent":"                case AIBehaviorType.Chase:"},{"type":"DELETE","lineNumber":90,"oldContent":"                    ExecuteChaseBehavior(enemy, player, dungeon, deltaTime);"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"                case AIState.Searching:"},{"type":"INSERT","lineNumber":65,"content":"                    if (distanceToPlayer <= ai.DetectionRange)"},{"type":"INSERT","lineNumber":66,"content":"                    {"},{"type":"INSERT","lineNumber":67,"content":"                        ai.SetState(AIState.Chasing);"},{"type":"INSERT","lineNumber":68,"content":"                    }"},{"type":"INSERT","lineNumber":69,"content":"                    else if (ai.StateTimer > 3f) // Search for 3 seconds"},{"type":"INSERT","lineNumber":70,"content":"                    {"},{"type":"INSERT","lineNumber":71,"content":"                        ai.SetState(AIState.Patrolling);"},{"type":"INSERT","lineNumber":72,"content":"                    }"},{"type":"DELETE","lineNumber":92,"oldContent":"                    "},{"type":"DELETE","lineNumber":93,"oldContent":"                case AIBehaviorType.Attack:"},{"type":"DELETE","lineNumber":94,"oldContent":"                    ExecuteAttackBehavior(enemy, player, deltaTime);"},{"type":"DELETE","lineNumber":95,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":96,"oldContent":"                    "},{"type":"DELETE","lineNumber":97,"oldContent":"                case AIBehaviorType.Investigate:"},{"type":"DELETE","lineNumber":98,"oldContent":"                    ExecuteInvestigateBehavior(enemy, dungeon, deltaTime);"},{"type":"DELETE","lineNumber":99,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":100,"oldContent":"                    "},{"type":"DELETE","lineNumber":101,"oldContent":"                case AIBehaviorType.Flee:"},{"type":"DELETE","lineNumber":102,"oldContent":"                    ExecuteFleeBehavior(enemy, player, dungeon, deltaTime);"},{"type":"DELETE","lineNumber":103,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":104,"oldContent":"                    // Finito di investigare, torna alla pattuglia"},{"type":"DELETE","lineNumber":105,"oldContent":"                    enemy.AI.CurrentState = AIState.Patrol;"},{"type":"DELETE","lineNumber":107,"oldContent":"                    enemy.AI.AlertTimer = 0f;"},{"type":"DELETE","lineNumber":108,"oldContent":"                    enemy.AI.InvestigateTimer = 0f;"},{"type":"DELETE","lineNumber":109,"oldContent":"        }"},{"type":"DELETE","lineNumber":110,"oldContent":"                    enemy.AI.LastKnownPlayerPosition = Vector2.Zero;"},{"type":"DELETE","lineNumber":111,"oldContent":"                }"},{"type":"DELETE","lineNumber":113,"oldContent":"            }"},{"type":"DELETE","lineNumber":114,"oldContent":"            else"},{"type":"DELETE","lineNumber":115,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":76,"content":"            // State behaviors"},{"type":"INSERT","lineNumber":77,"content":"            switch (ai.CurrentState)"},{"type":"DELETE","lineNumber":117,"oldContent":"                // Muovi verso la posizione da investigare"},{"type":"DELETE","lineNumber":118,"oldContent":"        /// Comportamento di pattuglia"},{"type":"DELETE","lineNumber":119,"oldContent":"                MoveTowardsTarget(enemy, enemy.AI.LastKnownPlayerPosition, dungeon, deltaTime, enemy.AI.PatrolSpeed);"},{"type":"DELETE","lineNumber":120,"oldContent":"            }"},{"type":"DELETE","lineNumber":121,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":122,"oldContent":"        }"},{"type":"INSERT","lineNumber":79,"content":"                case AIState.Patrolling:"},{"type":"INSERT","lineNumber":80,"content":"                    HandlePatrolling(ai, transform, movement, gameTime);"},{"type":"INSERT","lineNumber":81,"content":"                    break;"},{"type":"DELETE","lineNumber":124,"oldContent":"        private void ExecutePatrolBehavior(Enemy enemy, Dungeon dungeon, float deltaTime)"},{"type":"DELETE","lineNumber":125,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":126,"oldContent":"        /// Comportamento di fuga"},{"type":"DELETE","lineNumber":127,"oldContent":"        {"},{"type":"DELETE","lineNumber":128,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":129,"oldContent":"        private void ExecuteFleeBehavior(Enemy enemy, Player player, Dungeon dungeon, float deltaTime)"},{"type":"DELETE","lineNumber":130,"oldContent":"            // Se non ha punti di pattuglia, ne genera alcuni"},{"type":"DELETE","lineNumber":131,"oldContent":"        {"},{"type":"DELETE","lineNumber":132,"oldContent":"            enemy.AI.CurrentState = AIState.Fleeing;"},{"type":"DELETE","lineNumber":133,"oldContent":"            if (enemy.AI.PatrolPoints.Count == 0)"},{"type":"DELETE","lineNumber":134,"oldContent":"            "},{"type":"DELETE","lineNumber":135,"oldContent":"            // Calcola la direzione opposta al giocatore"},{"type":"DELETE","lineNumber":136,"oldContent":"            {"},{"type":"DELETE","lineNumber":137,"oldContent":"            Vector2 directionFromPlayer = Vector2.Normalize(enemy.Transform.Position - player.Transform.Position);"},{"type":"DELETE","lineNumber":138,"oldContent":"            Vector2 fleeTarget = enemy.Transform.Position + directionFromPlayer * 200f; // Fuggi per 200 unità"},{"type":"DELETE","lineNumber":139,"oldContent":"                GeneratePatrolPoints(enemy, dungeon);"},{"type":"DELETE","lineNumber":140,"oldContent":"            "},{"type":"DELETE","lineNumber":141,"oldContent":"            MoveTowardsTarget(enemy, fleeTarget, dungeon, deltaTime, enemy.AI.ChaseSpeed * 1.2f);"},{"type":"DELETE","lineNumber":142,"oldContent":"            }"},{"type":"DELETE","lineNumber":143,"oldContent":"        }"},{"type":"INSERT","lineNumber":83,"content":"                case AIState.Chasing:"},{"type":"INSERT","lineNumber":84,"content":"                    HandleChasing(ai, transform, movement, dungeon);"},{"type":"INSERT","lineNumber":85,"content":"                    break;"},{"type":"INSERT","lineNumber":87,"content":"                case AIState.Attacking:"},{"type":"INSERT","lineNumber":88,"content":"                    HandleAttacking(enemy, player);"},{"type":"INSERT","lineNumber":89,"content":"                    break;"},{"type":"DELETE","lineNumber":146,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":147,"oldContent":"        /// Muove un nemico verso una posizione target usando pathfinding"},{"type":"DELETE","lineNumber":148,"oldContent":"            if (enemy.AI.PatrolPoints.Count > 0)"},{"type":"DELETE","lineNumber":149,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":150,"oldContent":"        private void MoveTowardsTarget(Enemy enemy, Vector2 targetPosition, Dungeon dungeon, float deltaTime, float speed)"},{"type":"DELETE","lineNumber":151,"oldContent":"            {"},{"type":"DELETE","lineNumber":152,"oldContent":"        {"},{"type":"DELETE","lineNumber":153,"oldContent":"            // Controlla se serve ricalcolare il path"},{"type":"DELETE","lineNumber":154,"oldContent":"                Vector2 targetPoint = enemy.AI.PatrolPoints[enemy.AI.CurrentPatrolIndex];"},{"type":"DELETE","lineNumber":155,"oldContent":"            if (enemy.AI.CurrentPath.Count == 0 || enemy.AI.PathRecalculateTimer <= 0f)"},{"type":"DELETE","lineNumber":156,"oldContent":"            {"},{"type":"DELETE","lineNumber":157,"oldContent":"                float distanceToTarget = Vector2.Distance(enemy.Transform.Position, targetPoint);"},{"type":"DELETE","lineNumber":158,"oldContent":"                CalculatePath(enemy, targetPosition, dungeon);"},{"type":"DELETE","lineNumber":159,"oldContent":"                enemy.AI.PathRecalculateTimer = enemy.AI.PathRecalculateInterval;"},{"type":"DELETE","lineNumber":160,"oldContent":""},{"type":"INSERT","lineNumber":91,"content":"                case AIState.Searching:"},{"type":"INSERT","lineNumber":92,"content":"                    HandleSearching(ai, transform, movement, dungeon);"},{"type":"INSERT","lineNumber":93,"content":"                    break;"},{"type":"DELETE","lineNumber":162,"oldContent":""},{"type":"DELETE","lineNumber":163,"oldContent":"                if (distanceToTarget < TILE_SIZE)"},{"type":"DELETE","lineNumber":164,"oldContent":"            if (enemy.AI.CurrentPath.Count > 0)"},{"type":"DELETE","lineNumber":165,"oldContent":"            {"},{"type":"DELETE","lineNumber":166,"oldContent":"                {"},{"type":"DELETE","lineNumber":167,"oldContent":"                Vector2 nextWaypoint = enemy.AI.CurrentPath[0];"},{"type":"DELETE","lineNumber":168,"oldContent":"                float distanceToWaypoint = Vector2.Distance(enemy.Transform.Position, nextWaypoint);"},{"type":"DELETE","lineNumber":169,"oldContent":"                    // Raggiunto il punto, passa al successivo dopo una pausa"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"                if (distanceToWaypoint < TILE_SIZE * 0.5f)"},{"type":"DELETE","lineNumber":172,"oldContent":"                    enemy.AI.PatrolPauseTimer += deltaTime;"},{"type":"DELETE","lineNumber":173,"oldContent":"                {"},{"type":"DELETE","lineNumber":174,"oldContent":"                    // Raggiunto il waypoint, passa al successivo"},{"type":"DELETE","lineNumber":175,"oldContent":"                    "},{"type":"DELETE","lineNumber":176,"oldContent":"                    enemy.AI.CurrentPath.RemoveAt(0);"},{"type":"DELETE","lineNumber":177,"oldContent":"                }"},{"type":"DELETE","lineNumber":178,"oldContent":"                    if (enemy.AI.PatrolPauseTimer >= enemy.AI.PatrolPauseDuration)"},{"type":"DELETE","lineNumber":179,"oldContent":"                else"},{"type":"DELETE","lineNumber":180,"oldContent":"                {"},{"type":"DELETE","lineNumber":181,"oldContent":"                    {"},{"type":"DELETE","lineNumber":182,"oldContent":"                    // Muovi verso il waypoint"},{"type":"DELETE","lineNumber":183,"oldContent":"                    Vector2 direction = Vector2.Normalize(nextWaypoint - enemy.Transform.Position);"},{"type":"DELETE","lineNumber":184,"oldContent":"                        enemy.AI.CurrentPatrolIndex = (enemy.AI.CurrentPatrolIndex + 1) % enemy.AI.PatrolPoints.Count;"},{"type":"DELETE","lineNumber":185,"oldContent":"                    Vector2 movement = direction * speed * deltaTime;"},{"type":"DELETE","lineNumber":186,"oldContent":"                    enemy.Transform.Position += movement;"},{"type":"DELETE","lineNumber":187,"oldContent":"                        enemy.AI.PatrolPauseTimer = 0f;"},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"DELETE","lineNumber":189,"oldContent":"                    // Aggiorna componente movimento se presente"},{"type":"DELETE","lineNumber":190,"oldContent":"                        enemy.AI.CurrentPath.Clear(); // Ricalcola il path"},{"type":"DELETE","lineNumber":191,"oldContent":"                    if (enemy.Movement != null)"},{"type":"DELETE","lineNumber":192,"oldContent":"                    {"},{"type":"DELETE","lineNumber":193,"oldContent":"                    }"},{"type":"DELETE","lineNumber":194,"oldContent":"                        enemy.Movement.IsMoving = true;"},{"type":"DELETE","lineNumber":195,"oldContent":"                        enemy.Movement.LastDirection = direction;"},{"type":"DELETE","lineNumber":196,"oldContent":"                }"},{"type":"DELETE","lineNumber":197,"oldContent":"                    }"},{"type":"DELETE","lineNumber":198,"oldContent":"                }"},{"type":"DELETE","lineNumber":199,"oldContent":"                else"},{"type":"DELETE","lineNumber":200,"oldContent":"            }"},{"type":"DELETE","lineNumber":202,"oldContent":"                {"},{"type":"DELETE","lineNumber":204,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":205,"oldContent":"                    // Muovi verso il punto di pattuglia"},{"type":"DELETE","lineNumber":206,"oldContent":"        /// Calcola un path usando A*"},{"type":"DELETE","lineNumber":207,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":208,"oldContent":"                    MoveTowardsTarget(enemy, targetPoint, dungeon, deltaTime, enemy.AI.PatrolSpeed);"},{"type":"DELETE","lineNumber":209,"oldContent":"        private void CalculatePath(Enemy enemy, Vector2 targetPosition, Dungeon dungeon)"},{"type":"INSERT","lineNumber":97,"content":"        private void HandlePatrolling(AIComponent ai, TransformComponent transform, MovementComponent movement, GameTime gameTime)"},{"type":"DELETE","lineNumber":211,"oldContent":"                }"},{"type":"DELETE","lineNumber":212,"oldContent":"            var startNode = new Node((int)(enemy.Transform.Position.X / TILE_SIZE), (int)(enemy.Transform.Position.Y / TILE_SIZE));"},{"type":"DELETE","lineNumber":213,"oldContent":"            var endNode = new Node((int)(targetPosition.X / TILE_SIZE), (int)(targetPosition.Y / TILE_SIZE));"},{"type":"DELETE","lineNumber":214,"oldContent":"            }"},{"type":"INSERT","lineNumber":99,"content":"            if (!ai.CanPatrol()) return;"},{"type":"DELETE","lineNumber":216,"oldContent":"            var pathNodes = _pathfinder.FindPath(startNode, endNode, dungeon);"},{"type":"DELETE","lineNumber":217,"oldContent":"        }"},{"type":"DELETE","lineNumber":218,"oldContent":"            "},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":220,"oldContent":"            enemy.AI.CurrentPath.Clear();"},{"type":"DELETE","lineNumber":221,"oldContent":"            "},{"type":"DELETE","lineNumber":222,"oldContent":"            if (pathNodes != null)"},{"type":"DELETE","lineNumber":223,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":101,"content":"            if (ai.CurrentPath.Count == 0 || ai.HasReachedEndOfPath())"},{"type":"DELETE","lineNumber":225,"oldContent":"                foreach (var node in pathNodes)"},{"type":"DELETE","lineNumber":226,"oldContent":"        /// Comportamento di inseguimento"},{"type":"INSERT","lineNumber":103,"content":"                var nextPatrolPoint = ai.GetNextPatrolPoint();"},{"type":"INSERT","lineNumber":104,"content":"                if (nextPatrolPoint.HasValue)"},{"type":"DELETE","lineNumber":228,"oldContent":"                    enemy.AI.CurrentPath.Add(new Vector2(node.X * TILE_SIZE + TILE_SIZE * 0.5f, "},{"type":"DELETE","lineNumber":229,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":230,"oldContent":"                                                        node.Y * TILE_SIZE + TILE_SIZE * 0.5f));"},{"type":"INSERT","lineNumber":106,"content":"                    ai.Target = nextPatrolPoint.Value * 32; // Convert to world coordinates"},{"type":"INSERT","lineNumber":107,"content":"                    // For simplicity, just move directly (in a full implementation, use pathfinding)"},{"type":"DELETE","lineNumber":232,"oldContent":"        private void ExecuteChaseBehavior(Enemy enemy, Player player, Dungeon dungeon, float deltaTime)"},{"type":"INSERT","lineNumber":109,"content":"                ai.ResetPatrolTimer();"},{"type":"DELETE","lineNumber":234,"oldContent":"        }"},{"type":"DELETE","lineNumber":235,"oldContent":"        {"},{"type":"DELETE","lineNumber":237,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":238,"oldContent":"            enemy.AI.CurrentState = AIState.Chasing;"},{"type":"DELETE","lineNumber":239,"oldContent":"        /// Controlla se un nemico può vedere il target"},{"type":"DELETE","lineNumber":240,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":241,"oldContent":"            enemy.AI.AlertTimer = enemy.AI.AlertDuration; // Mantiene lo stato di allerta"},{"type":"DELETE","lineNumber":242,"oldContent":"        private bool CanSeeTarget(Enemy enemy, Entity target, Dungeon dungeon)"},{"type":"DELETE","lineNumber":243,"oldContent":"        {"},{"type":"DELETE","lineNumber":244,"oldContent":"            "},{"type":"DELETE","lineNumber":245,"oldContent":"            // Implementazione semplificata del line of sight"},{"type":"DELETE","lineNumber":246,"oldContent":"            Vector2 start = enemy.Transform.Position;"},{"type":"DELETE","lineNumber":247,"oldContent":"            Vector2 playerPos = player.Transform.Position;"},{"type":"DELETE","lineNumber":248,"oldContent":"            Vector2 end = target.Transform.Position;"},{"type":"DELETE","lineNumber":249,"oldContent":"            "},{"type":"DELETE","lineNumber":250,"oldContent":"            MoveTowardsTarget(enemy, playerPos, dungeon, deltaTime, enemy.AI.ChaseSpeed);"},{"type":"DELETE","lineNumber":251,"oldContent":"            // Usa un raycast semplificato"},{"type":"DELETE","lineNumber":252,"oldContent":"            return !PathfindingHelper.IsLineBlocked(start, end, dungeon, TILE_SIZE);"},{"type":"INSERT","lineNumber":112,"content":"            MoveTowardsTarget(ai, transform, movement);"},{"type":"DELETE","lineNumber":254,"oldContent":"        }"},{"type":"DELETE","lineNumber":256,"oldContent":""},{"type":"DELETE","lineNumber":257,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":258,"oldContent":"        /// Genera punti di pattuglia per un nemico"},{"type":"DELETE","lineNumber":259,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":260,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":261,"oldContent":"        private void GeneratePatrolPoints(Enemy enemy, Dungeon dungeon)"},{"type":"DELETE","lineNumber":262,"oldContent":"        /// Comportamento di attacco"},{"type":"INSERT","lineNumber":115,"content":"        private void HandleChasing(AIComponent ai, TransformComponent transform, MovementComponent movement, Dungeon dungeon)"},{"type":"DELETE","lineNumber":264,"oldContent":"            enemy.AI.PatrolPoints.Clear();"},{"type":"DELETE","lineNumber":265,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":266,"oldContent":"            "},{"type":"DELETE","lineNumber":267,"oldContent":"            // Trova la stanza in cui si trova il nemico"},{"type":"DELETE","lineNumber":268,"oldContent":"        private void ExecuteAttackBehavior(Enemy enemy, Player player, float deltaTime)"},{"type":"DELETE","lineNumber":269,"oldContent":"            var currentRoom = dungeon.GetRoomAt(enemy.Transform.Position);"},{"type":"DELETE","lineNumber":270,"oldContent":"            "},{"type":"DELETE","lineNumber":271,"oldContent":"        {"},{"type":"DELETE","lineNumber":272,"oldContent":"            if (currentRoom != null)"},{"type":"INSERT","lineNumber":117,"content":"            // Find path to player"},{"type":"INSERT","lineNumber":118,"content":"            if (ai.FindPath(transform.Position, ai.Target, dungeon))"},{"type":"DELETE","lineNumber":274,"oldContent":"            enemy.AI.CurrentState = AIState.Attacking;"},{"type":"DELETE","lineNumber":275,"oldContent":"                // Genera 2-4 punti di pattuglia nella stanza"},{"type":"DELETE","lineNumber":276,"oldContent":"                int pointCount = _random.Next(2, 5);"},{"type":"DELETE","lineNumber":277,"oldContent":"            "},{"type":"DELETE","lineNumber":278,"oldContent":"                "},{"type":"DELETE","lineNumber":279,"oldContent":"                for (int i = 0; i < pointCount; i++)"},{"type":"DELETE","lineNumber":280,"oldContent":"            // Ferma il movimento per attaccare"},{"type":"DELETE","lineNumber":281,"oldContent":"                {"},{"type":"DELETE","lineNumber":282,"oldContent":"                    Vector2 point = currentRoom.GetRandomPosition() * TILE_SIZE;"},{"type":"DELETE","lineNumber":283,"oldContent":"            if (enemy.Movement != null)"},{"type":"DELETE","lineNumber":284,"oldContent":"                    enemy.AI.PatrolPoints.Add(point);"},{"type":"DELETE","lineNumber":285,"oldContent":"                }"},{"type":"DELETE","lineNumber":286,"oldContent":"            {"},{"type":"INSERT","lineNumber":120,"content":"                MoveAlongPath(ai, transform, movement);"},{"type":"DELETE","lineNumber":289,"oldContent":"                enemy.Movement.IsMoving = false;"},{"type":"DELETE","lineNumber":291,"oldContent":"                // Se non è in una stanza, crea punti intorno alla posizione corrente"},{"type":"INSERT","lineNumber":124,"content":"                // Direct movement if pathfinding fails"},{"type":"INSERT","lineNumber":125,"content":"                MoveTowardsTarget(ai, transform, movement);"},{"type":"DELETE","lineNumber":293,"oldContent":"                for (int i = 0; i < 4; i++)"},{"type":"DELETE","lineNumber":294,"oldContent":"                {"},{"type":"DELETE","lineNumber":295,"oldContent":""},{"type":"DELETE","lineNumber":296,"oldContent":"                    float angle = (float)(i * Math.PI * 0.5);"},{"type":"DELETE","lineNumber":297,"oldContent":"                    Vector2 offset = new Vector2((float)Math.Cos(angle), (float)Math.Sin(angle)) * 100f;"},{"type":"DELETE","lineNumber":298,"oldContent":"            // Gestisce il cooldown dell'attacco"},{"type":"DELETE","lineNumber":299,"oldContent":"                    enemy.AI.PatrolPoints.Add(enemy.Transform.Position + offset);"},{"type":"DELETE","lineNumber":300,"oldContent":"                }"},{"type":"DELETE","lineNumber":301,"oldContent":"            if (enemy.AI.AttackCooldownTimer <= 0f)"},{"type":"DELETE","lineNumber":302,"oldContent":"            }"},{"type":"DELETE","lineNumber":304,"oldContent":"            {"},{"type":"DELETE","lineNumber":306,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":307,"oldContent":"                PerformAttack(enemy, player);"},{"type":"DELETE","lineNumber":308,"oldContent":"        /// Esegue un attacco contro il giocatore"},{"type":"DELETE","lineNumber":309,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":310,"oldContent":"                enemy.AI.AttackCooldownTimer = enemy.AI.AttackCooldown;"},{"type":"DELETE","lineNumber":311,"oldContent":"        private void PerformAttack(Enemy enemy, Player player)"},{"type":"INSERT","lineNumber":129,"content":"        private void HandleAttacking(Enemy enemy, Player player)"},{"type":"DELETE","lineNumber":313,"oldContent":"            }"},{"type":"DELETE","lineNumber":314,"oldContent":"            if (player.Health != null)"},{"type":"INSERT","lineNumber":131,"content":"            if (enemy.CanAttack())"},{"type":"DELETE","lineNumber":316,"oldContent":"        }"},{"type":"DELETE","lineNumber":317,"oldContent":"                int damage = enemy.AI.AttackDamage;"},{"type":"DELETE","lineNumber":318,"oldContent":"                player.Health.TakeDamage(damage);"},{"type":"DELETE","lineNumber":319,"oldContent":""},{"type":"DELETE","lineNumber":320,"oldContent":"                "},{"type":"DELETE","lineNumber":321,"oldContent":"                // Feedback visuale/audio dell'attacco potrebbe essere aggiunto qui"},{"type":"DELETE","lineNumber":322,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":133,"content":"                enemy.Attack();"},{"type":"INSERT","lineNumber":134,"content":"                // Damage would be handled by combat system"},{"type":"DELETE","lineNumber":325,"oldContent":"        /// Comportamento di investigazione"},{"type":"DELETE","lineNumber":327,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":328,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":329,"oldContent":"        /// Aggiorna i timer dell'AI"},{"type":"DELETE","lineNumber":330,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":331,"oldContent":"        private void ExecuteInvestigateBehavior(Enemy enemy, Dungeon dungeon, float deltaTime)"},{"type":"DELETE","lineNumber":332,"oldContent":"        private void UpdateTimers(AIComponent ai, float deltaTime)"},{"type":"INSERT","lineNumber":138,"content":"        private void HandleSearching(AIComponent ai, TransformComponent transform, MovementComponent movement, Dungeon dungeon)"},{"type":"DELETE","lineNumber":334,"oldContent":"        {"},{"type":"DELETE","lineNumber":335,"oldContent":"            if (ai.AttackCooldownTimer > 0)"},{"type":"DELETE","lineNumber":336,"oldContent":"                ai.AttackCooldownTimer -= deltaTime;"},{"type":"DELETE","lineNumber":337,"oldContent":"            enemy.AI.CurrentState = AIState.Investigating;"},{"type":"DELETE","lineNumber":338,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":"            if (ai.AlertTimer > 0)"},{"type":"DELETE","lineNumber":340,"oldContent":""},{"type":"DELETE","lineNumber":341,"oldContent":"                ai.AlertTimer -= deltaTime;"},{"type":"DELETE","lineNumber":342,"oldContent":""},{"type":"DELETE","lineNumber":343,"oldContent":"            // Se non ha una posizione da investigare, usa l'ultima posizione conosciuta del giocatore"},{"type":"DELETE","lineNumber":344,"oldContent":"            if (ai.PathRecalculateTimer > 0)"},{"type":"DELETE","lineNumber":345,"oldContent":"                ai.PathRecalculateTimer -= deltaTime;"},{"type":"DELETE","lineNumber":346,"oldContent":"            if (enemy.AI.LastKnownPlayerPosition == Vector2.Zero)"},{"type":"INSERT","lineNumber":140,"content":"            // Move towards last known player position"},{"type":"INSERT","lineNumber":141,"content":"            ai.Target = ai.LastPlayerPosition;"},{"type":"INSERT","lineNumber":142,"content":"            MoveTowardsTarget(ai, transform, movement);"},{"type":"DELETE","lineNumber":349,"oldContent":"            {"},{"type":"DELETE","lineNumber":350,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":351,"oldContent":"        /// Aggiorna lo stato generale dell'AI"},{"type":"DELETE","lineNumber":352,"oldContent":"                // Genera una posizione casuale nelle vicinanze"},{"type":"DELETE","lineNumber":353,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":354,"oldContent":"        private void UpdateAIState(Enemy enemy, Player player)"},{"type":"DELETE","lineNumber":355,"oldContent":"                enemy.AI.LastKnownPlayerPosition = enemy.Transform.Position + "},{"type":"INSERT","lineNumber":145,"content":"        private void MoveTowardsTarget(AIComponent ai, TransformComponent transform, MovementComponent movement)"},{"type":"DELETE","lineNumber":357,"oldContent":"            float distanceToPlayer = Vector2.Distance(enemy.Transform.Position, player.Transform.Position);"},{"type":"DELETE","lineNumber":358,"oldContent":"                    new Vector2(_random.Next(-200, 200), _random.Next(-200, 200));"},{"type":"DELETE","lineNumber":359,"oldContent":"            "},{"type":"DELETE","lineNumber":360,"oldContent":"            // Aggiorna l'ultima posizione conosciuta del giocatore se è visibile"},{"type":"DELETE","lineNumber":361,"oldContent":"            }"},{"type":"DELETE","lineNumber":362,"oldContent":"            if (distanceToPlayer <= enemy.AI.SightRange && CanSeeTarget(enemy, player, null))"},{"type":"INSERT","lineNumber":147,"content":"            var direction = ai.Target - transform.Position;"},{"type":"INSERT","lineNumber":148,"content":"            if (direction.Length() > 5f) // Close enough threshold"},{"type":"DELETE","lineNumber":364,"oldContent":""},{"type":"DELETE","lineNumber":365,"oldContent":"                enemy.AI.LastKnownPlayerPosition = player.Transform.Position;"},{"type":"DELETE","lineNumber":366,"oldContent":"                enemy.AI.AlertTimer = enemy.AI.AlertDuration;"},{"type":"DELETE","lineNumber":367,"oldContent":"            float distanceToInvestigate = Vector2.Distance(enemy.Transform.Position, enemy.AI.LastKnownPlayerPosition);"},{"type":"INSERT","lineNumber":150,"content":"                direction.Normalize();"},{"type":"INSERT","lineNumber":151,"content":"                movement.AddForce(direction * ai.MoveSpeed * 10f);"},{"type":"DELETE","lineNumber":370,"oldContent":"            "},{"type":"DELETE","lineNumber":371,"oldContent":"    }"},{"type":"DELETE","lineNumber":373,"oldContent":"            if (distanceToInvestigate < TILE_SIZE)"},{"type":"DELETE","lineNumber":374,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":375,"oldContent":"    /// Tipi di comportamento AI"},{"type":"INSERT","lineNumber":155,"content":"        private void MoveAlongPath(AIComponent ai, TransformComponent transform, MovementComponent movement)"},{"type":"INSERT","lineNumber":156,"content":"        {"},{"type":"INSERT","lineNumber":157,"content":"            var nextPoint = ai.GetNextPathPoint();"},{"type":"INSERT","lineNumber":158,"content":"            if (nextPoint.HasValue)"},{"type":"DELETE","lineNumber":377,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":378,"oldContent":"    public enum AIBehaviorType"},{"type":"DELETE","lineNumber":379,"oldContent":"                // Ha raggiunto la posizione, resta in attesa"},{"type":"DELETE","lineNumber":380,"oldContent":"    {"},{"type":"DELETE","lineNumber":381,"oldContent":"        Patrol,"},{"type":"DELETE","lineNumber":382,"oldContent":"                enemy.AI.InvestigateTimer += deltaTime;"},{"type":"DELETE","lineNumber":383,"oldContent":"        Chase,"},{"type":"DELETE","lineNumber":384,"oldContent":"        Attack,"},{"type":"DELETE","lineNumber":385,"oldContent":"                "},{"type":"DELETE","lineNumber":386,"oldContent":"        Investigate,"},{"type":"DELETE","lineNumber":387,"oldContent":"        Flee"},{"type":"DELETE","lineNumber":388,"oldContent":"                if (enemy.AI.InvestigateTimer >= enemy.AI.InvestigateDuration)"},{"type":"DELETE","lineNumber":389,"oldContent":"    }"},{"type":"INSERT","lineNumber":160,"content":"                var direction = nextPoint.Value - transform.Position;"},{"type":"INSERT","lineNumber":161,"content":"                if (direction.Length() < 16f) // Close enough to waypoint"},{"type":"INSERT","lineNumber":163,"content":"                    ai.AdvanceToNextPathPoint();"},{"type":"INSERT","lineNumber":164,"content":"                }"},{"type":"INSERT","lineNumber":165,"content":"                else"},{"type":"INSERT","lineNumber":166,"content":"                {"},{"type":"INSERT","lineNumber":167,"content":"                    direction.Normalize();"},{"type":"INSERT","lineNumber":168,"content":"                    movement.AddForce(direction * ai.MoveSpeed * 10f);"},{"type":"INSERT","lineNumber":169,"content":"                }"},{"type":"INSERT","lineNumber":170,"content":"            }"},{"type":"INSERT","lineNumber":171,"content":"        }"},{"type":"INSERT","lineNumber":172,"content":"    }"},{"type":"INSERT","lineNumber":174,"content":""}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/CollisionSystem.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Systems/CollisionSystem.cs","baseContent":"namespace DungeonExplorer.Systems;\n\npublic class CollisionSystem\n{\n    \n}","baseTimestamp":1756229224844,"deltas":[{"timestamp":1756229269344,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using Microsoft.Xna.Framework;","oldContent":"namespace DungeonExplorer.Systems;"},{"type":"INSERT","lineNumber":1,"content":"using DungeonExplorer.Entities;"},{"type":"INSERT","lineNumber":2,"content":"using DungeonExplorer.World;"},{"type":"INSERT","lineNumber":3,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":4,"content":"using System.Linq;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class CollisionSystem"},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.Systems"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Sistema responsabile della gestione delle collisioni"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public class CollisionSystem"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        private const float TILE_SIZE = 32f;"},{"type":"INSERT","lineNumber":14,"content":""},{"type":"INSERT","lineNumber":15,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":16,"content":"        /// Controlla le collisioni tra il giocatore e i nemici"},{"type":"INSERT","lineNumber":17,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":18,"content":"        public void CheckPlayerEnemyCollisions(Player player, List<Enemy> enemies)"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            if (player?.Health == null || player.Health.CurrentHealth <= 0) return;"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":22,"content":"            var playerBounds = player.GetBounds();"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"            for (int i = enemies.Count - 1; i >= 0; i--)"},{"type":"INSERT","lineNumber":25,"content":"            {"},{"type":"INSERT","lineNumber":26,"content":"                var enemy = enemies[i];"},{"type":"INSERT","lineNumber":27,"content":"                if (enemy?.Health == null || enemy.Health.CurrentHealth <= 0) continue;"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"                var enemyBounds = enemy.GetBounds();"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":"                if (playerBounds.Intersects(enemyBounds))"},{"type":"INSERT","lineNumber":32,"content":"                {"},{"type":"INSERT","lineNumber":33,"content":"                    HandlePlayerEnemyCollision(player, enemy);"},{"type":"INSERT","lineNumber":34,"content":"                }"},{"type":"INSERT","lineNumber":35,"content":"            }"},{"type":"INSERT","lineNumber":36,"content":"        }"},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":39,"content":"        /// Controlla le collisioni tra il giocatore e i tesori"},{"type":"INSERT","lineNumber":40,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":41,"content":"        public void CheckPlayerTreasureCollisions(Player player, List<Treasure> treasures)"},{"type":"INSERT","lineNumber":42,"content":"        {"},{"type":"INSERT","lineNumber":43,"content":"            if (player?.Health == null || player.Health.CurrentHealth <= 0) return;"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":45,"content":"            var playerBounds = player.GetBounds();"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"            for (int i = treasures.Count - 1; i >= 0; i--)"},{"type":"INSERT","lineNumber":48,"content":"            {"},{"type":"INSERT","lineNumber":49,"content":"                var treasure = treasures[i];"},{"type":"INSERT","lineNumber":50,"content":"                if (treasure == null) continue;"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"                var treasureBounds = treasure.GetBounds();"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"INSERT","lineNumber":54,"content":"                if (playerBounds.Intersects(treasureBounds))"},{"type":"INSERT","lineNumber":55,"content":"                {"},{"type":"INSERT","lineNumber":56,"content":"                    HandlePlayerTreasureCollision(player, treasure, treasures, i);"},{"type":"INSERT","lineNumber":57,"content":"                }"},{"type":"INSERT","lineNumber":58,"content":"            }"},{"type":"INSERT","lineNumber":59,"content":"        }"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":62,"content":"        /// Controlla le collisioni tra un'entità e il mondo (muri)"},{"type":"INSERT","lineNumber":63,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":64,"content":"        public void CheckWorldCollisions(Entity entity, Dungeon dungeon)"},{"type":"INSERT","lineNumber":65,"content":"        {"},{"type":"INSERT","lineNumber":66,"content":"            if (entity?.Transform == null || dungeon?.Tiles == null) return;"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"            var entityBounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":69,"content":"            var originalPosition = entity.Transform.Position;"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"            // Calcola le tile che l'entità occupa"},{"type":"INSERT","lineNumber":72,"content":"            int leftTile = (int)(entityBounds.Left / TILE_SIZE);"},{"type":"INSERT","lineNumber":73,"content":"            int rightTile = (int)(entityBounds.Right / TILE_SIZE);"},{"type":"INSERT","lineNumber":74,"content":"            int topTile = (int)(entityBounds.Top / TILE_SIZE);"},{"type":"INSERT","lineNumber":75,"content":"            int bottomTile = (int)(entityBounds.Bottom / TILE_SIZE);"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"            // Assicurati che i valori siano nei limiti del dungeon"},{"type":"INSERT","lineNumber":78,"content":"            leftTile = MathHelper.Clamp(leftTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":79,"content":"            rightTile = MathHelper.Clamp(rightTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":80,"content":"            topTile = MathHelper.Clamp(topTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":81,"content":"            bottomTile = MathHelper.Clamp(bottomTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"            bool collisionDetected = false;"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"INSERT","lineNumber":85,"content":"            // Controlla tutte le tile che l'entità occupa"},{"type":"INSERT","lineNumber":86,"content":"            for (int x = leftTile; x <= rightTile; x++)"},{"type":"INSERT","lineNumber":87,"content":"            {"},{"type":"INSERT","lineNumber":88,"content":"                for (int y = topTile; y <= bottomTile; y++)"},{"type":"INSERT","lineNumber":89,"content":"                {"},{"type":"INSERT","lineNumber":90,"content":"                    var tile = dungeon.Tiles[x, y];"},{"type":"INSERT","lineNumber":91,"content":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"INSERT","lineNumber":92,"content":"                    {"},{"type":"INSERT","lineNumber":93,"content":"                        var tileBounds = new Rectangle("},{"type":"INSERT","lineNumber":94,"content":"                            x * (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":95,"content":"                            y * (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":96,"content":"                            (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":97,"content":"                            (int)TILE_SIZE"},{"type":"INSERT","lineNumber":98,"content":"                        );"},{"type":"INSERT","lineNumber":99,"content":""},{"type":"INSERT","lineNumber":100,"content":"                        if (entityBounds.Intersects(tileBounds))"},{"type":"INSERT","lineNumber":101,"content":"                        {"},{"type":"INSERT","lineNumber":102,"content":"                            collisionDetected = true;"},{"type":"INSERT","lineNumber":103,"content":"                            ResolveWorldCollision(entity, tileBounds, originalPosition);"},{"type":"INSERT","lineNumber":104,"content":"                            break;"},{"type":"INSERT","lineNumber":105,"content":"                        }"},{"type":"INSERT","lineNumber":106,"content":"                    }"},{"type":"INSERT","lineNumber":107,"content":"                }"},{"type":"INSERT","lineNumber":108,"content":"                if (collisionDetected) break;"},{"type":"INSERT","lineNumber":109,"content":"            }"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"            // Controlla i limiti del mondo"},{"type":"INSERT","lineNumber":112,"content":"            CheckWorldBounds(entity, dungeon);"},{"type":"INSERT","lineNumber":113,"content":"        }"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"INSERT","lineNumber":115,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":116,"content":"        /// Controlla le collisioni tra entità (generico)"},{"type":"INSERT","lineNumber":117,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":118,"content":"        public bool CheckEntityCollision(Entity entityA, Entity entityB)"},{"type":"INSERT","lineNumber":119,"content":"        {"},{"type":"INSERT","lineNumber":120,"content":"            if (entityA?.Transform == null || entityB?.Transform == null) return false;"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"            var boundsA = entityA.GetBounds();"},{"type":"INSERT","lineNumber":123,"content":"            var boundsB = entityB.GetBounds();"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"INSERT","lineNumber":125,"content":"            return boundsA.Intersects(boundsB);"},{"type":"INSERT","lineNumber":126,"content":"        }"},{"type":"INSERT","lineNumber":127,"content":""},{"type":"INSERT","lineNumber":128,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":129,"content":"        /// Controlla le collisioni in un'area circolare"},{"type":"INSERT","lineNumber":130,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":131,"content":"        public List<Entity> GetEntitiesInRadius(Vector2 center, float radius, List<Entity> entities)"},{"type":"INSERT","lineNumber":132,"content":"        {"},{"type":"INSERT","lineNumber":133,"content":"            var entitiesInRadius = new List<Entity>();"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"            foreach (var entity in entities)"},{"type":"INSERT","lineNumber":136,"content":"            {"},{"type":"INSERT","lineNumber":137,"content":"                if (entity?.Transform == null) continue;"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"INSERT","lineNumber":139,"content":"                float distance = Vector2.Distance(center, entity.Transform.Position);"},{"type":"INSERT","lineNumber":140,"content":"                if (distance <= radius)"},{"type":"INSERT","lineNumber":141,"content":"                {"},{"type":"INSERT","lineNumber":142,"content":"                    entitiesInRadius.Add(entity);"},{"type":"INSERT","lineNumber":143,"content":"                }"},{"type":"INSERT","lineNumber":144,"content":"            }"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"INSERT","lineNumber":146,"content":"            return entitiesInRadius;"},{"type":"INSERT","lineNumber":147,"content":"        }"},{"type":"INSERT","lineNumber":148,"content":""},{"type":"INSERT","lineNumber":149,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":150,"content":"        /// Gestisce la collisione tra giocatore e nemico"},{"type":"INSERT","lineNumber":151,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":152,"content":"        private void HandlePlayerEnemyCollision(Player player, Enemy enemy)"},{"type":"INSERT","lineNumber":153,"content":"        {"},{"type":"INSERT","lineNumber":154,"content":"            if (player.Health == null || enemy.Health == null) return;"},{"type":"INSERT","lineNumber":155,"content":""},{"type":"INSERT","lineNumber":156,"content":"            // Calcola la direzione del knockback"},{"type":"INSERT","lineNumber":157,"content":"            Vector2 knockbackDirection = Vector2.Normalize(player.Transform.Position - enemy.Transform.Position);"},{"type":"INSERT","lineNumber":158,"content":"            if (knockbackDirection == Vector2.Zero)"},{"type":"INSERT","lineNumber":159,"content":"                knockbackDirection = Vector2.UnitX; // Default direction"},{"type":"INSERT","lineNumber":160,"content":""},{"type":"INSERT","lineNumber":161,"content":"            // Applica danno al giocatore"},{"type":"INSERT","lineNumber":162,"content":"            int damage = enemy.AI?.AttackDamage ?? 10;"},{"type":"INSERT","lineNumber":163,"content":"            player.Health.TakeDamage(damage);"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"INSERT","lineNumber":165,"content":"            // Applica knockback al giocatore"},{"type":"INSERT","lineNumber":166,"content":"            if (player.Movement != null)"},{"type":"INSERT","lineNumber":167,"content":"            {"},{"type":"INSERT","lineNumber":168,"content":"                player.Movement.KnockbackForce = 200f;"},{"type":"INSERT","lineNumber":169,"content":"                player.Transform.Position += knockbackDirection * 20f; // Knockback immediato"},{"type":"INSERT","lineNumber":170,"content":"            }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"            // Feedback visuale (se implementato)"},{"type":"INSERT","lineNumber":173,"content":"            if (player.Render != null)"},{"type":"INSERT","lineNumber":174,"content":"            {"},{"type":"INSERT","lineNumber":175,"content":"                player.Render.FlashTimer = 0.2f; // Flash rosso per indicare danno"},{"type":"INSERT","lineNumber":176,"content":"            }"},{"type":"INSERT","lineNumber":177,"content":""},{"type":"INSERT","lineNumber":178,"content":"            // Il nemico può anche subire un piccolo knockback"},{"type":"INSERT","lineNumber":179,"content":"            if (enemy.Movement != null)"},{"type":"INSERT","lineNumber":180,"content":"            {"},{"type":"INSERT","lineNumber":181,"content":"                enemy.Transform.Position -= knockbackDirection * 10f;"},{"type":"INSERT","lineNumber":182,"content":"            }"},{"type":"INSERT","lineNumber":183,"content":"        }"},{"type":"INSERT","lineNumber":184,"content":""},{"type":"INSERT","lineNumber":185,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":186,"content":"        /// Gestisce la collisione tra giocatore e tesoro"},{"type":"INSERT","lineNumber":187,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":188,"content":"        private void HandlePlayerTreasureCollision(Player player, Treasure treasure, List<Treasure> treasures, int index)"},{"type":"INSERT","lineNumber":189,"content":"        {"},{"type":"INSERT","lineNumber":190,"content":"            // Rimuovi il tesoro dalla lista"},{"type":"INSERT","lineNumber":191,"content":"            treasures.RemoveAt(index);"},{"type":"INSERT","lineNumber":192,"content":""},{"type":"INSERT","lineNumber":193,"content":"            // Aggiungi punti (questo dovrebbe probabilmente essere gestito dal GameManager)"},{"type":"INSERT","lineNumber":194,"content":"            // Per ora assumiamo che il treasure abbia un valore"},{"type":"INSERT","lineNumber":195,"content":"            int value = treasure.Value ?? 100;"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"            // Qui potresti emettere un evento o chiamare direttamente il GameManager"},{"type":"INSERT","lineNumber":198,"content":"            // GameManager.CollectTreasure(value);"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"            // Feedback visuale/audio per la raccolta del tesoro"},{"type":"INSERT","lineNumber":201,"content":"            // SpawnParticleEffect(treasure.Transform.Position, ParticleType.TreasureCollect);"},{"type":"INSERT","lineNumber":202,"content":"        }"},{"type":"INSERT","lineNumber":203,"content":""},{"type":"INSERT","lineNumber":204,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":205,"content":"        /// Risolve la collisione tra un'entità e un muro"},{"type":"INSERT","lineNumber":206,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":207,"content":"        private void ResolveWorldCollision(Entity entity, Rectangle wallBounds, Vector2 originalPosition)"},{"type":"INSERT","lineNumber":208,"content":"        {"},{"type":"INSERT","lineNumber":209,"content":"            var entityBounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":210,"content":"            "},{"type":"INSERT","lineNumber":211,"content":"            // Calcola la sovrapposizione in ogni direzione"},{"type":"INSERT","lineNumber":212,"content":"            float overlapLeft = (entityBounds.Right - wallBounds.Left);"},{"type":"INSERT","lineNumber":213,"content":"            float overlapRight = (wallBounds.Right - entityBounds.Left);"},{"type":"INSERT","lineNumber":214,"content":"            float overlapTop = (entityBounds.Bottom - wallBounds.Top);"},{"type":"INSERT","lineNumber":215,"content":"            float overlapBottom = (wallBounds.Bottom - entityBounds.Top);"},{"type":"INSERT","lineNumber":216,"content":""},{"type":"INSERT","lineNumber":217,"content":"            // Trova la direzione con la minima sovrapposizione per la risoluzione"},{"type":"INSERT","lineNumber":218,"content":"            float minOverlapX = Math.Min(overlapLeft, overlapRight);"},{"type":"INSERT","lineNumber":219,"content":"            float minOverlapY = Math.Min(overlapTop, overlapBottom);"},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":"            if (minOverlapX < minOverlapY)"},{"type":"INSERT","lineNumber":222,"content":"            {"},{"type":"INSERT","lineNumber":223,"content":"                // Risolvi la collisione orizzontale"},{"type":"INSERT","lineNumber":224,"content":"                if (overlapLeft < overlapRight)"},{"type":"INSERT","lineNumber":225,"content":"                {"},{"type":"INSERT","lineNumber":226,"content":"                    // Sposta a sinistra"},{"type":"INSERT","lineNumber":227,"content":"                    entity.Transform.Position.X = wallBounds.Left - entityBounds.Width * 0.5f;"},{"type":"INSERT","lineNumber":228,"content":"                }"},{"type":"INSERT","lineNumber":229,"content":"                else"},{"type":"INSERT","lineNumber":230,"content":"                {"},{"type":"INSERT","lineNumber":231,"content":"                    // Sposta a destra"},{"type":"INSERT","lineNumber":232,"content":"                    entity.Transform.Position.X = wallBounds.Right + entityBounds.Width * 0.5f;"},{"type":"INSERT","lineNumber":233,"content":"                }"},{"type":"INSERT","lineNumber":234,"content":"            }"},{"type":"INSERT","lineNumber":235,"content":"            else"},{"type":"INSERT","lineNumber":236,"content":"            {"},{"type":"INSERT","lineNumber":237,"content":"                // Risolvi la collisione verticale"},{"type":"INSERT","lineNumber":238,"content":"                if (overlapTop < overlapBottom)"},{"type":"INSERT","lineNumber":239,"content":"                {"},{"type":"INSERT","lineNumber":240,"content":"                    // Sposta in alto"},{"type":"INSERT","lineNumber":241,"content":"                    entity.Transform.Position.Y = wallBounds.Top - entityBounds.Height * 0.5f;"},{"type":"INSERT","lineNumber":242,"content":"                }"},{"type":"INSERT","lineNumber":243,"content":"                else"},{"type":"INSERT","lineNumber":244,"content":"                {"},{"type":"INSERT","lineNumber":245,"content":"                    // Sposta in basso"},{"type":"INSERT","lineNumber":246,"content":"                    entity.Transform.Position.Y = wallBounds.Bottom + entityBounds.Height * 0.5f;"},{"type":"INSERT","lineNumber":247,"content":"                }"},{"type":"INSERT","lineNumber":248,"content":"            }"},{"type":"INSERT","lineNumber":249,"content":""},{"type":"INSERT","lineNumber":250,"content":"            // Ferma il movimento se l'entità ha un componente movimento"},{"type":"INSERT","lineNumber":251,"content":"            if (entity.Movement != null)"},{"type":"INSERT","lineNumber":252,"content":"            {"},{"type":"INSERT","lineNumber":253,"content":"                entity.Movement.Velocity = Vector2.Zero;"},{"type":"INSERT","lineNumber":254,"content":"            }"},{"type":"INSERT","lineNumber":255,"content":"        }"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":258,"content":"        /// Controlla che l'entità rimanga nei limiti del mondo"},{"type":"INSERT","lineNumber":259,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":260,"content":"        private void CheckWorldBounds(Entity entity, Dungeon dungeon)"},{"type":"INSERT","lineNumber":261,"content":"        {"},{"type":"INSERT","lineNumber":262,"content":"            var bounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":263,"content":"            var worldBounds = new Rectangle(0, 0, dungeon.Width * (int)TILE_SIZE, dungeon.Height * (int)TILE_SIZE);"},{"type":"INSERT","lineNumber":264,"content":""},{"type":"INSERT","lineNumber":265,"content":"            Vector2 newPosition = entity.Transform.Position;"},{"type":"INSERT","lineNumber":266,"content":""},{"type":"INSERT","lineNumber":267,"content":"            // Limiti orizzontali"},{"type":"INSERT","lineNumber":268,"content":"            if (bounds.Left < worldBounds.Left)"},{"type":"INSERT","lineNumber":269,"content":"            {"},{"type":"INSERT","lineNumber":270,"content":"                newPosition.X = bounds.Width * 0.5f;"},{"type":"INSERT","lineNumber":271,"content":"            }"},{"type":"INSERT","lineNumber":272,"content":"            else if (bounds.Right > worldBounds.Right)"},{"type":"INSERT","lineNumber":273,"content":"            {"},{"type":"INSERT","lineNumber":274,"content":"                newPosition.X = worldBounds.Right - bounds.Width * 0.5f;"},{"type":"INSERT","lineNumber":275,"content":"            }"},{"type":"INSERT","lineNumber":276,"content":""},{"type":"INSERT","lineNumber":277,"content":"            // Limiti verticali"},{"type":"INSERT","lineNumber":278,"content":"            if (bounds.Top < worldBounds.Top)"},{"type":"INSERT","lineNumber":279,"content":"            {"},{"type":"INSERT","lineNumber":280,"content":"                newPosition.Y = bounds.Height * 0.5f;"},{"type":"INSERT","lineNumber":281,"content":"            }"},{"type":"INSERT","lineNumber":282,"content":"            else if (bounds.Bottom > worldBounds.Bottom)"},{"type":"INSERT","lineNumber":283,"content":"            {"},{"type":"INSERT","lineNumber":284,"content":"                newPosition.Y = worldBounds.Bottom - bounds.Height * 0.5f;"},{"type":"INSERT","lineNumber":285,"content":"            }"},{"type":"INSERT","lineNumber":286,"content":""},{"type":"INSERT","lineNumber":287,"content":"            entity.Transform.Position = newPosition;"},{"type":"INSERT","lineNumber":288,"content":"        }"},{"type":"INSERT","lineNumber":289,"content":""},{"type":"INSERT","lineNumber":290,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":291,"content":"        /// Controlla se una posizione è libera da collisioni"},{"type":"INSERT","lineNumber":292,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":293,"content":"        public bool IsPositionFree(Vector2 position, Vector2 size, Dungeon dungeon, List<Entity> entitiesToIgnore = null)"},{"type":"INSERT","lineNumber":294,"content":"        {"},{"type":"INSERT","lineNumber":295,"content":"            var testBounds = new Rectangle("},{"type":"INSERT","lineNumber":296,"content":"                (int)(position.X - size.X * 0.5f),"},{"type":"INSERT","lineNumber":297,"content":"                (int)(position.Y - size.Y * 0.5f),"},{"type":"INSERT","lineNumber":298,"content":"                (int)size.X,"},{"type":"INSERT","lineNumber":299,"content":"                (int)size.Y"},{"type":"INSERT","lineNumber":300,"content":"            );"},{"type":"INSERT","lineNumber":301,"content":""},{"type":"INSERT","lineNumber":302,"content":"            // Controlla collisioni con il mondo"},{"type":"INSERT","lineNumber":303,"content":"            int leftTile = (int)(testBounds.Left / TILE_SIZE);"},{"type":"INSERT","lineNumber":304,"content":"            int rightTile = (int)(testBounds.Right / TILE_SIZE);"},{"type":"INSERT","lineNumber":305,"content":"            int topTile = (int)(testBounds.Top / TILE_SIZE);"},{"type":"INSERT","lineNumber":306,"content":"            int bottomTile = (int)(testBounds.Bottom / TILE_SIZE);"},{"type":"INSERT","lineNumber":307,"content":""},{"type":"INSERT","lineNumber":308,"content":"            leftTile = MathHelper.Clamp(leftTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":309,"content":"            rightTile = MathHelper.Clamp(rightTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":310,"content":"            topTile = MathHelper.Clamp(topTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":311,"content":"            bottomTile = MathHelper.Clamp(bottomTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":312,"content":""},{"type":"INSERT","lineNumber":313,"content":"            for (int x = leftTile; x <= rightTile; x++)"},{"type":"INSERT","lineNumber":314,"content":"            {"},{"type":"INSERT","lineNumber":315,"content":"                for (int y = topTile; y <= bottomTile; y++)"},{"type":"INSERT","lineNumber":316,"content":"                {"},{"type":"INSERT","lineNumber":317,"content":"                    var tile = dungeon.Tiles[x, y];"},{"type":"INSERT","lineNumber":318,"content":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"INSERT","lineNumber":319,"content":"                    {"},{"type":"INSERT","lineNumber":320,"content":"                        var tileBounds = new Rectangle("},{"type":"INSERT","lineNumber":321,"content":"                            x * (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":322,"content":"                            y * (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":323,"content":"                            (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":324,"content":"                            (int)TILE_SIZE"},{"type":"INSERT","lineNumber":325,"content":"                        );"},{"type":"INSERT","lineNumber":326,"content":""},{"type":"INSERT","lineNumber":327,"content":"                        if (testBounds.Intersects(tileBounds))"},{"type":"INSERT","lineNumber":328,"content":"                        {"},{"type":"INSERT","lineNumber":329,"content":"                            return false;"},{"type":"INSERT","lineNumber":330,"content":"                        }"},{"type":"INSERT","lineNumber":331,"content":"                    }"},{"type":"INSERT","lineNumber":332,"content":"                }"},{"type":"INSERT","lineNumber":333,"content":"            }"},{"type":"INSERT","lineNumber":334,"content":""},{"type":"INSERT","lineNumber":335,"content":"            return true;"},{"type":"INSERT","lineNumber":336,"content":"        }"},{"type":"INSERT","lineNumber":337,"content":""},{"type":"INSERT","lineNumber":338,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":339,"content":"        /// Raycast semplificato per controlli di visibilità"},{"type":"INSERT","lineNumber":340,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":341,"content":"        public bool Raycast(Vector2 start, Vector2 end, Dungeon dungeon, out Vector2 hitPoint)"},{"type":"INSERT","lineNumber":342,"content":"        {"},{"type":"INSERT","lineNumber":343,"content":"            hitPoint = end;"},{"type":"INSERT","lineNumber":344,"content":""},{"type":"INSERT","lineNumber":345,"content":"            Vector2 direction = end - start;"},{"type":"INSERT","lineNumber":346,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":347,"content":"            direction.Normalize();"},{"type":"INSERT","lineNumber":348,"content":""},{"type":"INSERT","lineNumber":349,"content":"            float stepSize = TILE_SIZE * 0.5f;"},{"type":"INSERT","lineNumber":350,"content":"            int steps = (int)(distance / stepSize);"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"INSERT","lineNumber":352,"content":"            for (int i = 0; i <= steps; i++)"},{"type":"INSERT","lineNumber":353,"content":"            {"},{"type":"INSERT","lineNumber":354,"content":"                Vector2 currentPoint = start + direction * (i * stepSize);"},{"type":"INSERT","lineNumber":355,"content":"                "},{"type":"INSERT","lineNumber":356,"content":"                int tileX = (int)(currentPoint.X / TILE_SIZE);"},{"type":"INSERT","lineNumber":357,"content":"                int tileY = (int)(currentPoint.Y / TILE_SIZE);"},{"type":"INSERT","lineNumber":358,"content":""},{"type":"INSERT","lineNumber":359,"content":"                if (tileX >= 0 && tileX < dungeon.Width && tileY >= 0 && tileY < dungeon.Height)"},{"type":"INSERT","lineNumber":360,"content":"                {"},{"type":"INSERT","lineNumber":361,"content":"                    var tile = dungeon.Tiles[tileX, tileY];"},{"type":"INSERT","lineNumber":362,"content":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"INSERT","lineNumber":363,"content":"                    {"},{"type":"INSERT","lineNumber":364,"content":"                        hitPoint = currentPoint;"},{"type":"INSERT","lineNumber":365,"content":"                        return true; // Hit detected"},{"type":"INSERT","lineNumber":366,"content":"                    }"},{"type":"INSERT","lineNumber":367,"content":"                }"},{"type":"INSERT","lineNumber":368,"content":"            }"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"            return false; // No hit"},{"type":"INSERT","lineNumber":371,"content":"        }"},{"type":"INSERT","lineNumber":372,"content":""},{"type":"INSERT","lineNumber":373,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":374,"content":"        /// Controlla collisioni future per prevenire movimenti non validi"},{"type":"INSERT","lineNumber":375,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":376,"content":"        public bool WouldCollideWithWorld(Entity entity, Vector2 futurePosition, Dungeon dungeon)"},{"type":"INSERT","lineNumber":377,"content":"        {"},{"type":"INSERT","lineNumber":378,"content":"            Vector2 originalPosition = entity.Transform.Position;"},{"type":"INSERT","lineNumber":379,"content":"            entity.Transform.Position = futurePosition;"},{"type":"INSERT","lineNumber":380,"content":""},{"type":"INSERT","lineNumber":381,"content":"            var futureBounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":382,"content":"            bool wouldCollide = false;"},{"type":"INSERT","lineNumber":383,"content":""},{"type":"INSERT","lineNumber":384,"content":"            int leftTile = (int)(futureBounds.Left / TILE_SIZE);"},{"type":"INSERT","lineNumber":385,"content":"            int rightTile = (int)(futureBounds.Right / TILE_SIZE);"},{"type":"INSERT","lineNumber":386,"content":"            int topTile = (int)(futureBounds.Top / TILE_SIZE);"},{"type":"INSERT","lineNumber":387,"content":"            int bottomTile = (int)(futureBounds.Bottom / TILE_SIZE);"},{"type":"INSERT","lineNumber":388,"content":""},{"type":"INSERT","lineNumber":389,"content":"            leftTile = MathHelper.Clamp(leftTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":390,"content":"            rightTile = MathHelper.Clamp(rightTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":391,"content":"            topTile = MathHelper.Clamp(topTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":392,"content":"            bottomTile = MathHelper.Clamp(bottomTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":393,"content":""},{"type":"INSERT","lineNumber":394,"content":"            for (int x = leftTile; x <= rightTile && !wouldCollide; x++)"},{"type":"INSERT","lineNumber":395,"content":"            {"},{"type":"INSERT","lineNumber":396,"content":"                for (int y = topTile; y <= bottomTile && !wouldCollide; y++)"},{"type":"INSERT","lineNumber":397,"content":"                {"},{"type":"INSERT","lineNumber":398,"content":"                    var tile = dungeon.Tiles[x, y];"},{"type":"INSERT","lineNumber":399,"content":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"INSERT","lineNumber":400,"content":"                    {"},{"type":"INSERT","lineNumber":401,"content":"                        var tileBounds = new Rectangle("},{"type":"INSERT","lineNumber":402,"content":"                            x * (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":403,"content":"                            y * (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":404,"content":"                            (int)TILE_SIZE,"},{"type":"INSERT","lineNumber":405,"content":"                            (int)TILE_SIZE"},{"type":"INSERT","lineNumber":406,"content":"                        );"},{"type":"INSERT","lineNumber":407,"content":""},{"type":"INSERT","lineNumber":408,"content":"                        if (futureBounds.Intersects(tileBounds))"},{"type":"INSERT","lineNumber":409,"content":"                        {"},{"type":"INSERT","lineNumber":410,"content":"                            wouldCollide = true;"},{"type":"INSERT","lineNumber":411,"content":"                        }"},{"type":"INSERT","lineNumber":412,"content":"                    }"},{"type":"INSERT","lineNumber":413,"content":"                }"},{"type":"INSERT","lineNumber":414,"content":"            }"},{"type":"INSERT","lineNumber":415,"content":""},{"type":"INSERT","lineNumber":416,"content":"            // Ripristina la posizione originale"},{"type":"INSERT","lineNumber":417,"content":"            entity.Transform.Position = originalPosition;"},{"type":"INSERT","lineNumber":418,"content":"            return wouldCollide;"},{"type":"INSERT","lineNumber":419,"content":"        }"},{"type":"INSERT","lineNumber":420,"content":"    }"}]},{"timestamp":1756231085382,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":3,"content":"using DungeonExplorer.Components;"},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":7,"oldContent":"}"},{"type":"INSERT","lineNumber":6,"content":"using System;"},{"type":"INSERT","lineNumber":7,"content":""},{"type":"DELETE","lineNumber":9,"oldContent":"    }"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"INSERT","lineNumber":9,"content":"{"},{"type":"DELETE","lineNumber":12,"oldContent":"            return wouldCollide;"},{"type":"DELETE","lineNumber":14,"oldContent":"            entity.Transform.Position = originalPosition;"},{"type":"DELETE","lineNumber":16,"oldContent":"            // Ripristina la posizione originale"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"            }"},{"type":"DELETE","lineNumber":22,"oldContent":"                }"},{"type":"DELETE","lineNumber":24,"oldContent":"                    }"},{"type":"DELETE","lineNumber":26,"oldContent":"                        }"},{"type":"DELETE","lineNumber":28,"oldContent":"                            wouldCollide = true;"},{"type":"DELETE","lineNumber":30,"oldContent":"                        {"},{"type":"DELETE","lineNumber":32,"oldContent":"                        if (futureBounds.Intersects(tileBounds))"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"                        );"},{"type":"DELETE","lineNumber":38,"oldContent":"                            (int)TILE_SIZE"},{"type":"DELETE","lineNumber":40,"oldContent":"                            (int)TILE_SIZE,"},{"type":"DELETE","lineNumber":42,"oldContent":"                            y * (int)TILE_SIZE,"},{"type":"DELETE","lineNumber":44,"oldContent":"                            x * (int)TILE_SIZE,"},{"type":"DELETE","lineNumber":46,"oldContent":"                        var tileBounds = new Rectangle("},{"type":"DELETE","lineNumber":48,"oldContent":"                    {"},{"type":"DELETE","lineNumber":49,"oldContent":"                if (enemy?.Health == null || enemy.Health.CurrentHealth <= 0) continue;"},{"type":"DELETE","lineNumber":50,"oldContent":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"INSERT","lineNumber":29,"content":"                if (enemy?.Health == null || enemy.Health.CurrentHealth <= 0) "},{"type":"INSERT","lineNumber":30,"content":"                {"},{"type":"INSERT","lineNumber":31,"content":"                    enemies.RemoveAt(i);"},{"type":"INSERT","lineNumber":32,"content":"                    continue;"},{"type":"INSERT","lineNumber":33,"content":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"                    var tile = dungeon.Tiles[x, y];"},{"type":"DELETE","lineNumber":54,"oldContent":"                {"},{"type":"DELETE","lineNumber":56,"oldContent":"                for (int y = topTile; y <= bottomTile && !wouldCollide; y++)"},{"type":"DELETE","lineNumber":58,"oldContent":"            {"},{"type":"DELETE","lineNumber":60,"oldContent":"            for (int x = leftTile; x <= rightTile && !wouldCollide; x++)"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":"            bottomTile = MathHelper.Clamp(bottomTile, 0, dungeon.Height - 1);"},{"type":"DELETE","lineNumber":66,"oldContent":"            topTile = MathHelper.Clamp(topTile, 0, dungeon.Height - 1);"},{"type":"DELETE","lineNumber":68,"oldContent":"            rightTile = MathHelper.Clamp(rightTile, 0, dungeon.Width - 1);"},{"type":"DELETE","lineNumber":70,"oldContent":"            leftTile = MathHelper.Clamp(leftTile, 0, dungeon.Width - 1);"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"            int bottomTile = (int)(futureBounds.Bottom / TILE_SIZE);"},{"type":"DELETE","lineNumber":76,"oldContent":"            int topTile = (int)(futureBounds.Top / TILE_SIZE);"},{"type":"DELETE","lineNumber":78,"oldContent":"            int rightTile = (int)(futureBounds.Right / TILE_SIZE);"},{"type":"DELETE","lineNumber":80,"oldContent":"            int leftTile = (int)(futureBounds.Left / TILE_SIZE);"},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"DELETE","lineNumber":84,"oldContent":"            bool wouldCollide = false;"},{"type":"DELETE","lineNumber":86,"oldContent":"            var futureBounds = entity.GetBounds();"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":90,"oldContent":"            entity.Transform.Position = futurePosition;"},{"type":"DELETE","lineNumber":92,"oldContent":"            Vector2 originalPosition = entity.Transform.Position;"},{"type":"DELETE","lineNumber":94,"oldContent":"        {"},{"type":"DELETE","lineNumber":95,"oldContent":"                if (treasure == null) continue;"},{"type":"DELETE","lineNumber":96,"oldContent":"        public bool WouldCollideWithWorld(Entity entity, Vector2 futurePosition, Dungeon dungeon)"},{"type":"INSERT","lineNumber":56,"content":"                if (treasure == null || treasure.IsCollected) "},{"type":"INSERT","lineNumber":57,"content":"                {"},{"type":"INSERT","lineNumber":58,"content":"                    treasures.RemoveAt(i);"},{"type":"INSERT","lineNumber":59,"content":"                    continue;"},{"type":"INSERT","lineNumber":60,"content":"                }"},{"type":"DELETE","lineNumber":98,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":100,"oldContent":"        /// Controlla collisioni future per prevenire movimenti non validi"},{"type":"DELETE","lineNumber":102,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":106,"oldContent":"        }"},{"type":"DELETE","lineNumber":108,"oldContent":"            return false; // No hit"},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":"            }"},{"type":"DELETE","lineNumber":114,"oldContent":"                }"},{"type":"DELETE","lineNumber":116,"oldContent":"                    }"},{"type":"DELETE","lineNumber":118,"oldContent":"                        return true; // Hit detected"},{"type":"DELETE","lineNumber":120,"oldContent":"                        hitPoint = currentPoint;"},{"type":"DELETE","lineNumber":122,"oldContent":"                    {"},{"type":"DELETE","lineNumber":124,"oldContent":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"DELETE","lineNumber":126,"oldContent":"                    var tile = dungeon.Tiles[tileX, tileY];"},{"type":"DELETE","lineNumber":127,"oldContent":"            if (entity?.Transform == null || dungeon?.Tiles == null) return;"},{"type":"DELETE","lineNumber":128,"oldContent":"                {"},{"type":"INSERT","lineNumber":76,"content":"            if (entity?.Transform == null || dungeon == null) return;"},{"type":"DELETE","lineNumber":130,"oldContent":"                if (tileX >= 0 && tileX < dungeon.Width && tileY >= 0 && tileY < dungeon.Height)"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":134,"oldContent":"                int tileY = (int)(currentPoint.Y / TILE_SIZE);"},{"type":"DELETE","lineNumber":136,"oldContent":"                int tileX = (int)(currentPoint.X / TILE_SIZE);"},{"type":"DELETE","lineNumber":138,"oldContent":"                "},{"type":"DELETE","lineNumber":140,"oldContent":"                Vector2 currentPoint = start + direction * (i * stepSize);"},{"type":"DELETE","lineNumber":142,"oldContent":"            {"},{"type":"DELETE","lineNumber":144,"oldContent":"            for (int i = 0; i <= steps; i++)"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":"            int steps = (int)(distance / stepSize);"},{"type":"DELETE","lineNumber":150,"oldContent":"            float stepSize = TILE_SIZE * 0.5f;"},{"type":"DELETE","lineNumber":152,"oldContent":""},{"type":"DELETE","lineNumber":154,"oldContent":"            direction.Normalize();"},{"type":"DELETE","lineNumber":156,"oldContent":"            float distance = direction.Length();"},{"type":"DELETE","lineNumber":158,"oldContent":"            Vector2 direction = end - start;"},{"type":"DELETE","lineNumber":160,"oldContent":""},{"type":"DELETE","lineNumber":162,"oldContent":"            hitPoint = end;"},{"type":"DELETE","lineNumber":164,"oldContent":"        {"},{"type":"DELETE","lineNumber":166,"oldContent":"        public bool Raycast(Vector2 start, Vector2 end, Dungeon dungeon, out Vector2 hitPoint)"},{"type":"DELETE","lineNumber":168,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":170,"oldContent":"        /// Raycast semplificato per controlli di visibilità"},{"type":"DELETE","lineNumber":172,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":174,"oldContent":""},{"type":"DELETE","lineNumber":175,"oldContent":"                    var tile = dungeon.Tiles[x, y];"},{"type":"DELETE","lineNumber":176,"oldContent":"        }"},{"type":"DELETE","lineNumber":177,"oldContent":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"DELETE","lineNumber":178,"oldContent":"            return true;"},{"type":"INSERT","lineNumber":100,"content":"                    if (dungeon.IsWalkable(x, y) == false) // Use dungeon's IsWalkable method"},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"DELETE","lineNumber":182,"oldContent":"            }"},{"type":"DELETE","lineNumber":184,"oldContent":"                }"},{"type":"DELETE","lineNumber":186,"oldContent":"                    }"},{"type":"DELETE","lineNumber":188,"oldContent":"                        }"},{"type":"DELETE","lineNumber":190,"oldContent":"                            return false;"},{"type":"DELETE","lineNumber":192,"oldContent":"                        {"},{"type":"DELETE","lineNumber":194,"oldContent":"                        if (testBounds.Intersects(tileBounds))"},{"type":"DELETE","lineNumber":196,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"                        );"},{"type":"DELETE","lineNumber":200,"oldContent":"                            (int)TILE_SIZE"},{"type":"DELETE","lineNumber":202,"oldContent":"                            (int)TILE_SIZE,"},{"type":"DELETE","lineNumber":204,"oldContent":"                            y * (int)TILE_SIZE,"},{"type":"DELETE","lineNumber":206,"oldContent":"                            x * (int)TILE_SIZE,"},{"type":"DELETE","lineNumber":208,"oldContent":"                        var tileBounds = new Rectangle("},{"type":"DELETE","lineNumber":210,"oldContent":"                    {"},{"type":"DELETE","lineNumber":212,"oldContent":"                    if (tile != null && tile.Type == TileType.Wall)"},{"type":"DELETE","lineNumber":214,"oldContent":"                    var tile = dungeon.Tiles[x, y];"},{"type":"DELETE","lineNumber":216,"oldContent":"                {"},{"type":"DELETE","lineNumber":218,"oldContent":"                for (int y = topTile; y <= bottomTile; y++)"},{"type":"DELETE","lineNumber":220,"oldContent":"            {"},{"type":"DELETE","lineNumber":222,"oldContent":"            for (int x = leftTile; x <= rightTile; x++)"},{"type":"DELETE","lineNumber":224,"oldContent":""},{"type":"DELETE","lineNumber":226,"oldContent":"            bottomTile = MathHelper.Clamp(bottomTile, 0, dungeon.Height - 1);"},{"type":"DELETE","lineNumber":228,"oldContent":"            topTile = MathHelper.Clamp(topTile, 0, dungeon.Height - 1);"},{"type":"DELETE","lineNumber":230,"oldContent":"            rightTile = MathHelper.Clamp(rightTile, 0, dungeon.Width - 1);"},{"type":"DELETE","lineNumber":232,"oldContent":"            leftTile = MathHelper.Clamp(leftTile, 0, dungeon.Width - 1);"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"DELETE","lineNumber":236,"oldContent":"            int bottomTile = (int)(testBounds.Bottom / TILE_SIZE);"},{"type":"DELETE","lineNumber":238,"oldContent":"            int topTile = (int)(testBounds.Top / TILE_SIZE);"},{"type":"DELETE","lineNumber":240,"oldContent":"            int rightTile = (int)(testBounds.Right / TILE_SIZE);"},{"type":"DELETE","lineNumber":242,"oldContent":"            int leftTile = (int)(testBounds.Left / TILE_SIZE);"},{"type":"DELETE","lineNumber":244,"oldContent":"            // Controlla collisioni con il mondo"},{"type":"DELETE","lineNumber":246,"oldContent":""},{"type":"DELETE","lineNumber":248,"oldContent":"            );"},{"type":"DELETE","lineNumber":250,"oldContent":"                (int)size.Y"},{"type":"DELETE","lineNumber":252,"oldContent":"                (int)size.X,"},{"type":"DELETE","lineNumber":254,"oldContent":"                (int)(position.Y - size.Y * 0.5f),"},{"type":"DELETE","lineNumber":256,"oldContent":"                (int)(position.X - size.X * 0.5f),"},{"type":"DELETE","lineNumber":258,"oldContent":"            var testBounds = new Rectangle("},{"type":"DELETE","lineNumber":260,"oldContent":"        {"},{"type":"DELETE","lineNumber":262,"oldContent":"        public bool IsPositionFree(Vector2 position, Vector2 size, Dungeon dungeon, List<Entity> entitiesToIgnore = null)"},{"type":"DELETE","lineNumber":264,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":266,"oldContent":"        /// Controlla se una posizione è libera da collisioni"},{"type":"DELETE","lineNumber":268,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":271,"oldContent":""},{"type":"DELETE","lineNumber":272,"oldContent":"        }"},{"type":"DELETE","lineNumber":274,"oldContent":"            entity.Transform.Position = newPosition;"},{"type":"DELETE","lineNumber":276,"oldContent":""},{"type":"DELETE","lineNumber":278,"oldContent":"            }"},{"type":"DELETE","lineNumber":280,"oldContent":"                newPosition.Y = worldBounds.Bottom - bounds.Height * 0.5f;"},{"type":"DELETE","lineNumber":282,"oldContent":"            {"},{"type":"DELETE","lineNumber":284,"oldContent":"            else if (bounds.Bottom > worldBounds.Bottom)"},{"type":"DELETE","lineNumber":286,"oldContent":"            }"},{"type":"DELETE","lineNumber":288,"oldContent":"                newPosition.Y = bounds.Height * 0.5f;"},{"type":"DELETE","lineNumber":290,"oldContent":"            {"},{"type":"DELETE","lineNumber":292,"oldContent":"            if (bounds.Top < worldBounds.Top)"},{"type":"DELETE","lineNumber":294,"oldContent":"            // Limiti verticali"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"DELETE","lineNumber":298,"oldContent":"            }"},{"type":"DELETE","lineNumber":300,"oldContent":"                newPosition.X = worldBounds.Right - bounds.Width * 0.5f;"},{"type":"DELETE","lineNumber":302,"oldContent":"            {"},{"type":"DELETE","lineNumber":304,"oldContent":"            else if (bounds.Right > worldBounds.Right)"},{"type":"DELETE","lineNumber":306,"oldContent":"            }"},{"type":"DELETE","lineNumber":308,"oldContent":"                newPosition.X = bounds.Width * 0.5f;"},{"type":"DELETE","lineNumber":310,"oldContent":"            {"},{"type":"DELETE","lineNumber":312,"oldContent":"            if (bounds.Left < worldBounds.Left)"},{"type":"DELETE","lineNumber":314,"oldContent":"            // Limiti orizzontali"},{"type":"DELETE","lineNumber":316,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"            Vector2 newPosition = entity.Transform.Position;"},{"type":"DELETE","lineNumber":319,"oldContent":"            int damage = enemy.AI?.AttackDamage ?? 10;"},{"type":"INSERT","lineNumber":171,"content":"            int damage = enemy.Damage;"},{"type":"INSERT","lineNumber":172,"content":"            bool playerDied = player.Health.TakeDamage(damage);"},{"type":"DELETE","lineNumber":321,"oldContent":"            player.Health.TakeDamage(damage);"},{"type":"DELETE","lineNumber":322,"oldContent":"            var worldBounds = new Rectangle(0, 0, dungeon.Width * (int)TILE_SIZE, dungeon.Height * (int)TILE_SIZE);"},{"type":"DELETE","lineNumber":323,"oldContent":""},{"type":"DELETE","lineNumber":324,"oldContent":"            var bounds = entity.GetBounds();"},{"type":"DELETE","lineNumber":326,"oldContent":"        {"},{"type":"DELETE","lineNumber":328,"oldContent":"        private void CheckWorldBounds(Entity entity, Dungeon dungeon)"},{"type":"DELETE","lineNumber":330,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":331,"oldContent":"                player.Movement.KnockbackForce = 200f;"},{"type":"DELETE","lineNumber":332,"oldContent":"        /// Controlla che l'entità rimanga nei limiti del mondo"},{"type":"DELETE","lineNumber":334,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":337,"oldContent":""},{"type":"DELETE","lineNumber":338,"oldContent":"        }"},{"type":"DELETE","lineNumber":339,"oldContent":"            // Feedback visuale (se implementato)"},{"type":"DELETE","lineNumber":340,"oldContent":"            }"},{"type":"DELETE","lineNumber":341,"oldContent":"            if (player.Render != null)"},{"type":"DELETE","lineNumber":342,"oldContent":"                entity.Movement.Velocity = Vector2.Zero;"},{"type":"DELETE","lineNumber":343,"oldContent":"            {"},{"type":"DELETE","lineNumber":344,"oldContent":"            {"},{"type":"DELETE","lineNumber":345,"oldContent":"                player.Render.FlashTimer = 0.2f; // Flash rosso per indicare danno"},{"type":"DELETE","lineNumber":346,"oldContent":"            if (entity.Movement != null)"},{"type":"DELETE","lineNumber":347,"oldContent":"            }"},{"type":"DELETE","lineNumber":348,"oldContent":"            // Ferma il movimento se l'entità ha un componente movimento"},{"type":"DELETE","lineNumber":349,"oldContent":""},{"type":"DELETE","lineNumber":350,"oldContent":""},{"type":"DELETE","lineNumber":352,"oldContent":"            }"},{"type":"DELETE","lineNumber":354,"oldContent":"                }"},{"type":"DELETE","lineNumber":356,"oldContent":"                    entity.Transform.Position.Y = wallBounds.Bottom + entityBounds.Height * 0.5f;"},{"type":"DELETE","lineNumber":358,"oldContent":"                    // Sposta in basso"},{"type":"DELETE","lineNumber":360,"oldContent":"                {"},{"type":"DELETE","lineNumber":362,"oldContent":"                else"},{"type":"DELETE","lineNumber":364,"oldContent":"                }"},{"type":"DELETE","lineNumber":366,"oldContent":"                    entity.Transform.Position.Y = wallBounds.Top - entityBounds.Height * 0.5f;"},{"type":"DELETE","lineNumber":368,"oldContent":"                    // Sposta in alto"},{"type":"DELETE","lineNumber":370,"oldContent":"                {"},{"type":"DELETE","lineNumber":372,"oldContent":"                if (overlapTop < overlapBottom)"},{"type":"DELETE","lineNumber":374,"oldContent":"                // Risolvi la collisione verticale"},{"type":"DELETE","lineNumber":375,"oldContent":"            // Rimuovi il tesoro dalla lista"},{"type":"DELETE","lineNumber":376,"oldContent":"            {"},{"type":"INSERT","lineNumber":192,"content":"            // Colleziona il tesoro"},{"type":"INSERT","lineNumber":193,"content":"            treasure.Collect();"},{"type":"INSERT","lineNumber":194,"content":"            "},{"type":"INSERT","lineNumber":195,"content":"            // Aggiungi al punteggio del giocatore"},{"type":"INSERT","lineNumber":196,"content":"            player.CollectTreasure(treasure.Value);"},{"type":"INSERT","lineNumber":197,"content":"            "},{"type":"INSERT","lineNumber":198,"content":"            // Rimuovi dalla lista"},{"type":"DELETE","lineNumber":378,"oldContent":"            else"},{"type":"INSERT","lineNumber":200,"content":"        }"},{"type":"DELETE","lineNumber":380,"oldContent":"            }"},{"type":"DELETE","lineNumber":381,"oldContent":"            // Aggiungi punti (questo dovrebbe probabilmente essere gestito dal GameManager)"},{"type":"INSERT","lineNumber":202,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":203,"content":"        /// Risolve la collisione tra un'entità e un muro"},{"type":"INSERT","lineNumber":204,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":205,"content":"        private void ResolveWorldCollision(Entity entity, Rectangle wallBounds, Vector2 originalPosition)"},{"type":"INSERT","lineNumber":206,"content":"        {"},{"type":"INSERT","lineNumber":207,"content":"            var entityBounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":208,"content":"            "},{"type":"INSERT","lineNumber":209,"content":"            // Calcola la sovrapposizione in ogni direzione"},{"type":"INSERT","lineNumber":210,"content":"            float overlapLeft = (entityBounds.Right - wallBounds.Left);"},{"type":"INSERT","lineNumber":211,"content":"            float overlapRight = (wallBounds.Right - entityBounds.Left);"},{"type":"INSERT","lineNumber":212,"content":"            float overlapTop = (entityBounds.Bottom - wallBounds.Top);"},{"type":"INSERT","lineNumber":213,"content":"            float overlapBottom = (wallBounds.Bottom - entityBounds.Top);"},{"type":"INSERT","lineNumber":214,"content":""},{"type":"INSERT","lineNumber":215,"content":"            // Trova la direzione con la minima sovrapposizione per la risoluzione"},{"type":"INSERT","lineNumber":216,"content":"            float minOverlapX = Math.Min(overlapLeft, overlapRight);"},{"type":"INSERT","lineNumber":217,"content":"            float minOverlapY = Math.Min(overlapTop, overlapBottom);"},{"type":"INSERT","lineNumber":218,"content":""},{"type":"INSERT","lineNumber":219,"content":"            if (minOverlapX < minOverlapY)"},{"type":"INSERT","lineNumber":220,"content":"            {"},{"type":"INSERT","lineNumber":221,"content":"                // Risolvi la collisione orizzontale"},{"type":"INSERT","lineNumber":222,"content":"                if (overlapLeft < overlapRight)"},{"type":"INSERT","lineNumber":223,"content":"                {"},{"type":"INSERT","lineNumber":224,"content":"                    // Sposta a sinistra"},{"type":"INSERT","lineNumber":225,"content":"                    entity.Transform.Position = new Vector2(wallBounds.Left - entityBounds.Width * 0.5f, entity.Transform.Position.Y);"},{"type":"DELETE","lineNumber":383,"oldContent":"            // Per ora assumiamo che il treasure abbia un valore"},{"type":"DELETE","lineNumber":384,"oldContent":"                    entity.Transform.Position.X = wallBounds.Right + entityBounds.Width * 0.5f;"},{"type":"DELETE","lineNumber":385,"oldContent":"            int value = treasure.Value ?? 100;"},{"type":"INSERT","lineNumber":227,"content":"                else"},{"type":"INSERT","lineNumber":228,"content":"                {"},{"type":"DELETE","lineNumber":387,"oldContent":""},{"type":"INSERT","lineNumber":230,"content":"                    entity.Transform.Position = new Vector2(wallBounds.Right + entityBounds.Width * 0.5f, entity.Transform.Position.Y);"},{"type":"INSERT","lineNumber":231,"content":"                }"},{"type":"INSERT","lineNumber":232,"content":"            }"},{"type":"INSERT","lineNumber":233,"content":"            else"},{"type":"INSERT","lineNumber":234,"content":"            {"},{"type":"INSERT","lineNumber":235,"content":"                // Risolvi la collisione verticale"},{"type":"INSERT","lineNumber":236,"content":"                if (overlapTop < overlapBottom)"},{"type":"DELETE","lineNumber":389,"oldContent":"            // Qui potresti emettere un evento o chiamare direttamente il GameManager"},{"type":"INSERT","lineNumber":238,"content":"                    // Sposta in alto"},{"type":"INSERT","lineNumber":239,"content":"                    entity.Transform.Position = new Vector2(entity.Transform.Position.X, wallBounds.Top - entityBounds.Height * 0.5f);"},{"type":"INSERT","lineNumber":240,"content":"                }"},{"type":"DELETE","lineNumber":391,"oldContent":"            // GameManager.CollectTreasure(value);"},{"type":"INSERT","lineNumber":242,"content":"                {"},{"type":"INSERT","lineNumber":243,"content":"                    // Sposta in basso"},{"type":"INSERT","lineNumber":244,"content":"                    entity.Transform.Position = new Vector2(entity.Transform.Position.X, wallBounds.Bottom + entityBounds.Height * 0.5f);"},{"type":"INSERT","lineNumber":246,"content":"            }"},{"type":"DELETE","lineNumber":394,"oldContent":"                    entity.Transform.Position.X = wallBounds.Left - entityBounds.Width * 0.5f;"},{"type":"DELETE","lineNumber":395,"oldContent":"            // Feedback visuale/audio per la raccolta del tesoro"},{"type":"DELETE","lineNumber":396,"oldContent":"                    // Sposta a sinistra"},{"type":"DELETE","lineNumber":397,"oldContent":"            // SpawnParticleEffect(treasure.Transform.Position, ParticleType.TreasureCollect);"},{"type":"DELETE","lineNumber":398,"oldContent":"                {"},{"type":"INSERT","lineNumber":248,"content":"            // Ferma il movimento se l'entità ha un componente movimento"},{"type":"INSERT","lineNumber":249,"content":"            if (entity.Movement != null)"},{"type":"INSERT","lineNumber":250,"content":"            {"},{"type":"INSERT","lineNumber":251,"content":"                entity.Movement.Velocity = Vector2.Zero;"},{"type":"INSERT","lineNumber":252,"content":"            }"},{"type":"DELETE","lineNumber":400,"oldContent":"                if (overlapLeft < overlapRight)"},{"type":"DELETE","lineNumber":402,"oldContent":"                // Risolvi la collisione orizzontale"},{"type":"INSERT","lineNumber":256,"content":"        /// Controlla che l'entità rimanga nei limiti del mondo"},{"type":"INSERT","lineNumber":257,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":258,"content":"        private void CheckWorldBounds(Entity entity, Dungeon dungeon)"},{"type":"INSERT","lineNumber":259,"content":"        {"},{"type":"INSERT","lineNumber":260,"content":"            var bounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":261,"content":"            var worldBounds = new Rectangle(0, 0, dungeon.Width * (int)TILE_SIZE, dungeon.Height * (int)TILE_SIZE);"},{"type":"INSERT","lineNumber":262,"content":""},{"type":"INSERT","lineNumber":263,"content":"            Vector2 newPosition = entity.Transform.Position;"},{"type":"INSERT","lineNumber":264,"content":""},{"type":"INSERT","lineNumber":265,"content":"            // Limiti orizzontali"},{"type":"INSERT","lineNumber":266,"content":"            if (bounds.Left < worldBounds.Left)"},{"type":"DELETE","lineNumber":405,"oldContent":"        /// Risolve la collisione tra un'entità e un muro"},{"type":"DELETE","lineNumber":406,"oldContent":"            if (minOverlapX < minOverlapY)"},{"type":"INSERT","lineNumber":268,"content":"                newPosition.X = bounds.Width * 0.5f;"},{"type":"INSERT","lineNumber":269,"content":"            }"},{"type":"INSERT","lineNumber":270,"content":"            else if (bounds.Right > worldBounds.Right)"},{"type":"INSERT","lineNumber":271,"content":"            {"},{"type":"INSERT","lineNumber":272,"content":"                newPosition.X = worldBounds.Right - bounds.Width * 0.5f;"},{"type":"INSERT","lineNumber":273,"content":"            }"},{"type":"INSERT","lineNumber":274,"content":""},{"type":"INSERT","lineNumber":275,"content":"            // Limiti verticali"},{"type":"INSERT","lineNumber":276,"content":"            if (bounds.Top < worldBounds.Top)"},{"type":"INSERT","lineNumber":277,"content":"            {"},{"type":"INSERT","lineNumber":278,"content":"                newPosition.Y = bounds.Height * 0.5f;"},{"type":"INSERT","lineNumber":279,"content":"            }"},{"type":"INSERT","lineNumber":280,"content":"            else if (bounds.Bottom > worldBounds.Bottom)"},{"type":"INSERT","lineNumber":281,"content":"            {"},{"type":"INSERT","lineNumber":282,"content":"                newPosition.Y = worldBounds.Bottom - bounds.Height * 0.5f;"},{"type":"INSERT","lineNumber":283,"content":"            }"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":285,"content":"            entity.Transform.Position = newPosition;"},{"type":"INSERT","lineNumber":286,"content":"        }"},{"type":"INSERT","lineNumber":287,"content":""},{"type":"INSERT","lineNumber":288,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":289,"content":"        /// Controlla se una posizione è libera da collisioni"},{"type":"INSERT","lineNumber":291,"content":"        public bool IsPositionFree(Vector2 position, Vector2 size, Dungeon dungeon, List<Entity> entitiesToIgnore = null)"},{"type":"INSERT","lineNumber":292,"content":"        {"},{"type":"INSERT","lineNumber":293,"content":"            var testBounds = new Rectangle("},{"type":"INSERT","lineNumber":294,"content":"                (int)(position.X - size.X * 0.5f),"},{"type":"INSERT","lineNumber":295,"content":"                (int)(position.Y - size.Y * 0.5f),"},{"type":"INSERT","lineNumber":296,"content":"                (int)size.X,"},{"type":"INSERT","lineNumber":297,"content":"                (int)size.Y"},{"type":"INSERT","lineNumber":298,"content":"            );"},{"type":"DELETE","lineNumber":409,"oldContent":"        private void ResolveWorldCollision(Entity entity, Rectangle wallBounds, Vector2 originalPosition)"},{"type":"DELETE","lineNumber":410,"oldContent":"            float minOverlapY = Math.Min(overlapTop, overlapBottom);"},{"type":"INSERT","lineNumber":300,"content":"            // Controlla collisioni con il mondo"},{"type":"INSERT","lineNumber":301,"content":"            int leftTile = (int)(testBounds.Left / TILE_SIZE);"},{"type":"INSERT","lineNumber":302,"content":"            int rightTile = (int)(testBounds.Right / TILE_SIZE);"},{"type":"INSERT","lineNumber":303,"content":"            int topTile = (int)(testBounds.Top / TILE_SIZE);"},{"type":"INSERT","lineNumber":304,"content":"            int bottomTile = (int)(testBounds.Bottom / TILE_SIZE);"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"INSERT","lineNumber":306,"content":"            leftTile = MathHelper.Clamp(leftTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":307,"content":"            rightTile = MathHelper.Clamp(rightTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":308,"content":"            topTile = MathHelper.Clamp(topTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":309,"content":"            bottomTile = MathHelper.Clamp(bottomTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"INSERT","lineNumber":311,"content":"            for (int x = leftTile; x <= rightTile; x++)"},{"type":"INSERT","lineNumber":312,"content":"            {"},{"type":"INSERT","lineNumber":313,"content":"                for (int y = topTile; y <= bottomTile; y++)"},{"type":"INSERT","lineNumber":314,"content":"                {"},{"type":"INSERT","lineNumber":315,"content":"                    if (!dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":316,"content":"                    {"},{"type":"INSERT","lineNumber":317,"content":"                        return false;"},{"type":"INSERT","lineNumber":318,"content":"                    }"},{"type":"INSERT","lineNumber":319,"content":"                }"},{"type":"INSERT","lineNumber":320,"content":"            }"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"            return true;"},{"type":"INSERT","lineNumber":323,"content":"        }"},{"type":"INSERT","lineNumber":324,"content":""},{"type":"INSERT","lineNumber":325,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":326,"content":"        /// Raycast semplificato per controlli di visibilità"},{"type":"INSERT","lineNumber":327,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":328,"content":"        public bool Raycast(Vector2 start, Vector2 end, Dungeon dungeon, out Vector2 hitPoint)"},{"type":"DELETE","lineNumber":412,"oldContent":"            float minOverlapX = Math.Min(overlapLeft, overlapRight);"},{"type":"DELETE","lineNumber":413,"oldContent":"            var entityBounds = entity.GetBounds();"},{"type":"DELETE","lineNumber":414,"oldContent":"            // Trova la direzione con la minima sovrapposizione per la risoluzione"},{"type":"DELETE","lineNumber":415,"oldContent":"            "},{"type":"INSERT","lineNumber":330,"content":"            hitPoint = end;"},{"type":"DELETE","lineNumber":417,"oldContent":"            // Calcola la sovrapposizione in ogni direzione"},{"type":"DELETE","lineNumber":418,"oldContent":"            float overlapBottom = (wallBounds.Bottom - entityBounds.Top);"},{"type":"DELETE","lineNumber":419,"oldContent":"            float overlapLeft = (entityBounds.Right - wallBounds.Left);"},{"type":"DELETE","lineNumber":420,"oldContent":"            float overlapTop = (entityBounds.Bottom - wallBounds.Top);"},{"type":"DELETE","lineNumber":421,"oldContent":"            float overlapRight = (wallBounds.Right - entityBounds.Left);"},{"type":"INSERT","lineNumber":332,"content":"            Vector2 direction = end - start;"},{"type":"INSERT","lineNumber":333,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":334,"content":"            direction.Normalize();"},{"type":"INSERT","lineNumber":335,"content":""},{"type":"INSERT","lineNumber":336,"content":"            float stepSize = TILE_SIZE * 0.5f;"},{"type":"INSERT","lineNumber":337,"content":"            int steps = (int)(distance / stepSize);"},{"type":"INSERT","lineNumber":338,"content":""},{"type":"INSERT","lineNumber":339,"content":"            for (int i = 0; i <= steps; i++)"},{"type":"INSERT","lineNumber":340,"content":"            {"},{"type":"INSERT","lineNumber":341,"content":"                Vector2 currentPoint = start + direction * (i * stepSize);"},{"type":"INSERT","lineNumber":342,"content":"                "},{"type":"INSERT","lineNumber":343,"content":"                int tileX = (int)(currentPoint.X / TILE_SIZE);"},{"type":"INSERT","lineNumber":344,"content":"                int tileY = (int)(currentPoint.Y / TILE_SIZE);"},{"type":"INSERT","lineNumber":345,"content":""},{"type":"INSERT","lineNumber":346,"content":"                if (tileX >= 0 && tileX < dungeon.Width && tileY >= 0 && tileY < dungeon.Height)"},{"type":"INSERT","lineNumber":347,"content":"                {"},{"type":"INSERT","lineNumber":348,"content":"                    if (!dungeon.IsWalkable(tileX, tileY))"},{"type":"INSERT","lineNumber":349,"content":"                    {"},{"type":"INSERT","lineNumber":350,"content":"                        hitPoint = currentPoint;"},{"type":"INSERT","lineNumber":351,"content":"                        return true; // Hit detected"},{"type":"INSERT","lineNumber":352,"content":"                    }"},{"type":"INSERT","lineNumber":353,"content":"                }"},{"type":"INSERT","lineNumber":354,"content":"            }"},{"type":"INSERT","lineNumber":355,"content":""},{"type":"INSERT","lineNumber":356,"content":"            return false; // No hit"},{"type":"INSERT","lineNumber":357,"content":"        }"},{"type":"INSERT","lineNumber":358,"content":""},{"type":"INSERT","lineNumber":359,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":360,"content":"        /// Controlla collisioni future per prevenire movimenti non validi"},{"type":"INSERT","lineNumber":361,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":362,"content":"        public bool WouldCollideWithWorld(Entity entity, Vector2 futurePosition, Dungeon dungeon)"},{"type":"INSERT","lineNumber":363,"content":"        {"},{"type":"INSERT","lineNumber":364,"content":"            Vector2 originalPosition = entity.Transform.Position;"},{"type":"INSERT","lineNumber":365,"content":"            entity.Transform.Position = futurePosition;"},{"type":"INSERT","lineNumber":366,"content":""},{"type":"INSERT","lineNumber":367,"content":"            var futureBounds = entity.GetBounds();"},{"type":"INSERT","lineNumber":368,"content":"            bool wouldCollide = false;"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"            int leftTile = (int)(futureBounds.Left / TILE_SIZE);"},{"type":"INSERT","lineNumber":371,"content":"            int rightTile = (int)(futureBounds.Right / TILE_SIZE);"},{"type":"INSERT","lineNumber":372,"content":"            int topTile = (int)(futureBounds.Top / TILE_SIZE);"},{"type":"INSERT","lineNumber":373,"content":"            int bottomTile = (int)(futureBounds.Bottom / TILE_SIZE);"},{"type":"INSERT","lineNumber":374,"content":""},{"type":"INSERT","lineNumber":375,"content":"            leftTile = MathHelper.Clamp(leftTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":376,"content":"            rightTile = MathHelper.Clamp(rightTile, 0, dungeon.Width - 1);"},{"type":"INSERT","lineNumber":377,"content":"            topTile = MathHelper.Clamp(topTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":378,"content":"            bottomTile = MathHelper.Clamp(bottomTile, 0, dungeon.Height - 1);"},{"type":"INSERT","lineNumber":379,"content":""},{"type":"INSERT","lineNumber":380,"content":"            for (int x = leftTile; x <= rightTile && !wouldCollide; x++)"},{"type":"INSERT","lineNumber":381,"content":"            {"},{"type":"INSERT","lineNumber":382,"content":"                for (int y = topTile; y <= bottomTile && !wouldCollide; y++)"},{"type":"INSERT","lineNumber":383,"content":"                {"},{"type":"INSERT","lineNumber":384,"content":"                    if (!dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":385,"content":"                    {"},{"type":"INSERT","lineNumber":386,"content":"                        wouldCollide = true;"},{"type":"INSERT","lineNumber":387,"content":"                    }"},{"type":"INSERT","lineNumber":388,"content":"                }"},{"type":"INSERT","lineNumber":389,"content":"            }"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"INSERT","lineNumber":391,"content":"            // Ripristina la posizione originale"},{"type":"INSERT","lineNumber":392,"content":"            entity.Transform.Position = originalPosition;"},{"type":"INSERT","lineNumber":393,"content":"            return wouldCollide;"},{"type":"INSERT","lineNumber":394,"content":"        }"},{"type":"INSERT","lineNumber":395,"content":"    }"},{"type":"INSERT","lineNumber":396,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/World/Dungeon.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/World/Dungeon.cs","baseContent":"namespace DungeonExplorer.World;\n\npublic class Dungeon\n{\n    \n}","baseTimestamp":1756229282342,"deltas":[{"timestamp":1756229334712,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using Microsoft.Xna.Framework;","oldContent":"namespace DungeonExplorer.World;"},{"type":"INSERT","lineNumber":1,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":2,"content":"using System.Linq;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Dungeon"},{"type":"INSERT","lineNumber":4,"content":"namespace DungeonExplorer.World"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":6,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":7,"content":"    /// Rappresenta un dungeon completo con stanze, corridoi e tile"},{"type":"INSERT","lineNumber":8,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":9,"content":"    public class Dungeon"},{"type":"INSERT","lineNumber":10,"content":"    {"},{"type":"INSERT","lineNumber":11,"content":"        public int Width { get; private set; }"},{"type":"INSERT","lineNumber":12,"content":"        public int Height { get; private set; }"},{"type":"INSERT","lineNumber":13,"content":"        public Tile[,] Tiles { get; private set; }"},{"type":"INSERT","lineNumber":14,"content":"        public List<Room> Rooms { get; private set; }"},{"type":"INSERT","lineNumber":15,"content":"        public Vector2 StartPosition { get; private set; }"},{"type":"INSERT","lineNumber":16,"content":"        public Vector2 EndPosition { get; private set; }"},{"type":"INSERT","lineNumber":17,"content":"        public bool ShowDebugInfo { get; set; } = false;"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"        public Dungeon(int width, int height)"},{"type":"INSERT","lineNumber":20,"content":"        {"},{"type":"INSERT","lineNumber":21,"content":"            Width = width;"},{"type":"INSERT","lineNumber":22,"content":"            Height = height;"},{"type":"INSERT","lineNumber":23,"content":"            Tiles = new Tile[width, height];"},{"type":"INSERT","lineNumber":24,"content":"            Rooms = new List<Room>();"},{"type":"INSERT","lineNumber":25,"content":"            "},{"type":"INSERT","lineNumber":26,"content":"            // Inizializza tutte le tile come muri"},{"type":"INSERT","lineNumber":27,"content":"            InitializeTiles();"},{"type":"INSERT","lineNumber":28,"content":"        }"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":31,"content":"        /// Inizializza tutte le tile come muri"},{"type":"INSERT","lineNumber":32,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":33,"content":"        private void InitializeTiles()"},{"type":"INSERT","lineNumber":34,"content":"        {"},{"type":"INSERT","lineNumber":35,"content":"            for (int x = 0; x < Width; x++)"},{"type":"INSERT","lineNumber":36,"content":"            {"},{"type":"INSERT","lineNumber":37,"content":"                for (int y = 0; y < Height; y++)"},{"type":"INSERT","lineNumber":38,"content":"                {"},{"type":"INSERT","lineNumber":39,"content":"                    Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":40,"content":"                }"},{"type":"INSERT","lineNumber":41,"content":"            }"},{"type":"INSERT","lineNumber":42,"content":"        }"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":45,"content":"        /// Aggiunge una stanza al dungeon"},{"type":"INSERT","lineNumber":46,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":47,"content":"        public void AddRoom(Room room)"},{"type":"INSERT","lineNumber":48,"content":"        {"},{"type":"INSERT","lineNumber":49,"content":"            if (room == null) return;"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":51,"content":"            Rooms.Add(room);"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":53,"content":"            // Crea le tile del pavimento per la stanza"},{"type":"INSERT","lineNumber":54,"content":"            for (int x = room.X; x < room.X + room.Width; x++)"},{"type":"INSERT","lineNumber":55,"content":"            {"},{"type":"INSERT","lineNumber":56,"content":"                for (int y = room.Y; y < room.Y + room.Height; y++)"},{"type":"INSERT","lineNumber":57,"content":"                {"},{"type":"INSERT","lineNumber":58,"content":"                    if (IsValidPosition(x, y))"},{"type":"INSERT","lineNumber":59,"content":"                    {"},{"type":"INSERT","lineNumber":60,"content":"                        Tiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":61,"content":"                        Tiles[x, y].RoomId = room.Id;"},{"type":"INSERT","lineNumber":62,"content":"                    }"},{"type":"INSERT","lineNumber":63,"content":"                }"},{"type":"INSERT","lineNumber":64,"content":"            }"},{"type":"INSERT","lineNumber":65,"content":"        }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":68,"content":"        /// Crea un corridoio tra due punti"},{"type":"INSERT","lineNumber":69,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":70,"content":"        public void CreateCorridor(Vector2 start, Vector2 end)"},{"type":"INSERT","lineNumber":71,"content":"        {"},{"type":"INSERT","lineNumber":72,"content":"            CreateCorridorBetweenPoints((int)start.X, (int)start.Y, (int)end.X, (int)end.Y);"},{"type":"INSERT","lineNumber":73,"content":"        }"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":76,"content":"        /// Crea un corridoio a forma di L tra due punti"},{"type":"INSERT","lineNumber":77,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":78,"content":"        public void CreateCorridorBetweenPoints(int x1, int y1, int x2, int y2)"},{"type":"INSERT","lineNumber":79,"content":"        {"},{"type":"INSERT","lineNumber":80,"content":"            // Corridoio orizzontale"},{"type":"INSERT","lineNumber":81,"content":"            int startX = System.Math.Min(x1, x2);"},{"type":"INSERT","lineNumber":82,"content":"            int endX = System.Math.Max(x1, x2);"},{"type":"INSERT","lineNumber":83,"content":"            "},{"type":"INSERT","lineNumber":84,"content":"            for (int x = startX; x <= endX; x++)"},{"type":"INSERT","lineNumber":85,"content":"            {"},{"type":"INSERT","lineNumber":86,"content":"                if (IsValidPosition(x, y1))"},{"type":"INSERT","lineNumber":87,"content":"                {"},{"type":"INSERT","lineNumber":88,"content":"                    Tiles[x, y1] = new Tile(TileType.Floor, x, y1);"},{"type":"INSERT","lineNumber":89,"content":"                }"},{"type":"INSERT","lineNumber":90,"content":"            }"},{"type":"INSERT","lineNumber":91,"content":""},{"type":"INSERT","lineNumber":92,"content":"            // Corridoio verticale"},{"type":"INSERT","lineNumber":93,"content":"            int startY = System.Math.Min(y1, y2);"},{"type":"INSERT","lineNumber":94,"content":"            int endY = System.Math.Max(y1, y2);"},{"type":"INSERT","lineNumber":95,"content":"            "},{"type":"INSERT","lineNumber":96,"content":"            for (int y = startY; y <= endY; y++)"},{"type":"INSERT","lineNumber":97,"content":"            {"},{"type":"INSERT","lineNumber":98,"content":"                if (IsValidPosition(x2, y))"},{"type":"INSERT","lineNumber":99,"content":"                {"},{"type":"INSERT","lineNumber":100,"content":"                    Tiles[x2, y] = new Tile(TileType.Floor, x2, y);"},{"type":"INSERT","lineNumber":101,"content":"                }"},{"type":"INSERT","lineNumber":102,"content":"            }"},{"type":"INSERT","lineNumber":103,"content":"        }"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":106,"content":"        /// Imposta la posizione di inizio del dungeon"},{"type":"INSERT","lineNumber":107,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":108,"content":"        public void SetStartPosition(Vector2 position)"},{"type":"INSERT","lineNumber":109,"content":"        {"},{"type":"INSERT","lineNumber":110,"content":"            StartPosition = position;"},{"type":"INSERT","lineNumber":111,"content":"            "},{"type":"INSERT","lineNumber":112,"content":"            if (IsValidPosition((int)position.X, (int)position.Y))"},{"type":"INSERT","lineNumber":113,"content":"            {"},{"type":"INSERT","lineNumber":114,"content":"                Tiles[(int)position.X, (int)position.Y].IsStartPosition = true;"},{"type":"INSERT","lineNumber":115,"content":"            }"},{"type":"INSERT","lineNumber":116,"content":"        }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":119,"content":"        /// Imposta la posizione finale del dungeon"},{"type":"INSERT","lineNumber":120,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":121,"content":"        public void SetEndPosition(Vector2 position)"},{"type":"INSERT","lineNumber":122,"content":"        {"},{"type":"INSERT","lineNumber":123,"content":"            EndPosition = position;"},{"type":"INSERT","lineNumber":124,"content":"            "},{"type":"INSERT","lineNumber":125,"content":"            if (IsValidPosition((int)position.X, (int)position.Y))"},{"type":"INSERT","lineNumber":126,"content":"            {"},{"type":"INSERT","lineNumber":127,"content":"                Tiles[(int)position.X, (int)position.Y].IsEndPosition = true;"},{"type":"INSERT","lineNumber":128,"content":"            }"},{"type":"INSERT","lineNumber":129,"content":"        }"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"INSERT","lineNumber":131,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":132,"content":"        /// Ottiene la posizione di inizio in coordinate mondo"},{"type":"INSERT","lineNumber":133,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":134,"content":"        public Vector2 GetStartPosition()"},{"type":"INSERT","lineNumber":135,"content":"        {"},{"type":"INSERT","lineNumber":136,"content":"            return StartPosition;"},{"type":"INSERT","lineNumber":137,"content":"        }"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"INSERT","lineNumber":139,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":140,"content":"        /// Ottiene tutte le stanze del dungeon"},{"type":"INSERT","lineNumber":141,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":142,"content":"        public List<Room> GetRooms()"},{"type":"INSERT","lineNumber":143,"content":"        {"},{"type":"INSERT","lineNumber":144,"content":"            return new List<Room>(Rooms);"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":148,"content":"        /// Ottiene la stanza che contiene una specifica posizione"},{"type":"INSERT","lineNumber":149,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":150,"content":"        public Room GetRoomAt(Vector2 worldPosition)"},{"type":"INSERT","lineNumber":151,"content":"        {"},{"type":"INSERT","lineNumber":152,"content":"            int tileX = (int)(worldPosition.X / 32); // TILE_SIZE"},{"type":"INSERT","lineNumber":153,"content":"            int tileY = (int)(worldPosition.Y / 32);"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"            return GetRoomAt(tileX, tileY);"},{"type":"INSERT","lineNumber":156,"content":"        }"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"INSERT","lineNumber":158,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":159,"content":"        /// Ottiene la stanza che contiene una specifica posizione in coordinate tile"},{"type":"INSERT","lineNumber":160,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":161,"content":"        public Room GetRoomAt(int tileX, int tileY)"},{"type":"INSERT","lineNumber":162,"content":"        {"},{"type":"INSERT","lineNumber":163,"content":"            foreach (var room in Rooms)"},{"type":"INSERT","lineNumber":164,"content":"            {"},{"type":"INSERT","lineNumber":165,"content":"                if (room.Contains(tileX, tileY))"},{"type":"INSERT","lineNumber":166,"content":"                {"},{"type":"INSERT","lineNumber":167,"content":"                    return room;"},{"type":"INSERT","lineNumber":168,"content":"                }"},{"type":"INSERT","lineNumber":169,"content":"            }"},{"type":"INSERT","lineNumber":170,"content":"            return null;"},{"type":"INSERT","lineNumber":171,"content":"        }"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":174,"content":"        /// Controlla se una posizione è valida nel dungeon"},{"type":"INSERT","lineNumber":175,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":176,"content":"        public bool IsValidPosition(int x, int y)"},{"type":"INSERT","lineNumber":177,"content":"        {"},{"type":"INSERT","lineNumber":178,"content":"            return x >= 0 && x < Width && y >= 0 && y < Height;"},{"type":"INSERT","lineNumber":179,"content":"        }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":182,"content":"        /// Controlla se una tile è camminabile"},{"type":"INSERT","lineNumber":183,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":184,"content":"        public bool IsWalkable(int x, int y)"},{"type":"INSERT","lineNumber":185,"content":"        {"},{"type":"INSERT","lineNumber":186,"content":"            if (!IsValidPosition(x, y)) return false;"},{"type":"INSERT","lineNumber":187,"content":"            "},{"type":"INSERT","lineNumber":188,"content":"            var tile = Tiles[x, y];"},{"type":"INSERT","lineNumber":189,"content":"            return tile != null && (tile.Type == TileType.Floor || tile.Type == TileType.Door);"},{"type":"INSERT","lineNumber":190,"content":"        }"},{"type":"INSERT","lineNumber":191,"content":""},{"type":"INSERT","lineNumber":192,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":193,"content":"        /// Ottiene la tile in una specifica posizione"},{"type":"INSERT","lineNumber":194,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":195,"content":"        public Tile GetTile(int x, int y)"},{"type":"INSERT","lineNumber":196,"content":"        {"},{"type":"INSERT","lineNumber":197,"content":"            if (!IsValidPosition(x, y)) return null;"},{"type":"INSERT","lineNumber":198,"content":"            return Tiles[x, y];"},{"type":"INSERT","lineNumber":199,"content":"        }"},{"type":"INSERT","lineNumber":200,"content":""},{"type":"INSERT","lineNumber":201,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":202,"content":"        /// Ottiene la tile in una posizione mondiale"},{"type":"INSERT","lineNumber":203,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":204,"content":"        public Tile GetTileAtWorldPosition(Vector2 worldPosition)"},{"type":"INSERT","lineNumber":205,"content":"        {"},{"type":"INSERT","lineNumber":206,"content":"            int tileX = (int)(worldPosition.X / 32);"},{"type":"INSERT","lineNumber":207,"content":"            int tileY = (int)(worldPosition.Y / 32);"},{"type":"INSERT","lineNumber":208,"content":"            return GetTile(tileX, tileY);"},{"type":"INSERT","lineNumber":209,"content":"        }"},{"type":"INSERT","lineNumber":210,"content":""},{"type":"INSERT","lineNumber":211,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":212,"content":"        /// Ottiene tutti i vicini camminabili di una tile"},{"type":"INSERT","lineNumber":213,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":214,"content":"        public List<Tile> GetWalkableNeighbors(int x, int y)"},{"type":"INSERT","lineNumber":215,"content":"        {"},{"type":"INSERT","lineNumber":216,"content":"            var neighbors = new List<Tile>();"},{"type":"INSERT","lineNumber":217,"content":"            "},{"type":"INSERT","lineNumber":218,"content":"            // Controlla le 4 direzioni principali"},{"type":"INSERT","lineNumber":219,"content":"            int[] dx = { 0, 1, 0, -1 };"},{"type":"INSERT","lineNumber":220,"content":"            int[] dy = { -1, 0, 1, 0 };"},{"type":"INSERT","lineNumber":221,"content":"            "},{"type":"INSERT","lineNumber":222,"content":"            for (int i = 0; i < 4; i++)"},{"type":"INSERT","lineNumber":223,"content":"            {"},{"type":"INSERT","lineNumber":224,"content":"                int nx = x + dx[i];"},{"type":"INSERT","lineNumber":225,"content":"                int ny = y + dy[i];"},{"type":"INSERT","lineNumber":226,"content":"                "},{"type":"INSERT","lineNumber":227,"content":"                if (IsWalkable(nx, ny))"},{"type":"INSERT","lineNumber":228,"content":"                {"},{"type":"INSERT","lineNumber":229,"content":"                    neighbors.Add(Tiles[nx, ny]);"},{"type":"INSERT","lineNumber":230,"content":"                }"},{"type":"INSERT","lineNumber":231,"content":"            }"},{"type":"INSERT","lineNumber":232,"content":"            "},{"type":"INSERT","lineNumber":233,"content":"            return neighbors;"},{"type":"INSERT","lineNumber":234,"content":"        }"},{"type":"INSERT","lineNumber":235,"content":""},{"type":"INSERT","lineNumber":236,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":237,"content":"        /// Ottiene tutti i vicini di una tile (inclusi i muri)"},{"type":"INSERT","lineNumber":238,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":239,"content":"        public List<Tile> GetAllNeighbors(int x, int y)"},{"type":"INSERT","lineNumber":240,"content":"        {"},{"type":"INSERT","lineNumber":241,"content":"            var neighbors = new List<Tile>();"},{"type":"INSERT","lineNumber":242,"content":"            "},{"type":"INSERT","lineNumber":243,"content":"            for (int dx = -1; dx <= 1; dx++)"},{"type":"INSERT","lineNumber":244,"content":"            {"},{"type":"INSERT","lineNumber":245,"content":"                for (int dy = -1; dy <= 1; dy++)"},{"type":"INSERT","lineNumber":246,"content":"                {"},{"type":"INSERT","lineNumber":247,"content":"                    if (dx == 0 && dy == 0) continue; // Skip la tile centrale"},{"type":"INSERT","lineNumber":248,"content":"                    "},{"type":"INSERT","lineNumber":249,"content":"                    int nx = x + dx;"},{"type":"INSERT","lineNumber":250,"content":"                    int ny = y + dy;"},{"type":"INSERT","lineNumber":251,"content":"                    "},{"type":"INSERT","lineNumber":252,"content":"                    if (IsValidPosition(nx, ny))"},{"type":"INSERT","lineNumber":253,"content":"                    {"},{"type":"INSERT","lineNumber":254,"content":"                        neighbors.Add(Tiles[nx, ny]);"},{"type":"INSERT","lineNumber":255,"content":"                    }"},{"type":"INSERT","lineNumber":256,"content":"                }"},{"type":"INSERT","lineNumber":257,"content":"            }"},{"type":"INSERT","lineNumber":258,"content":"            "},{"type":"INSERT","lineNumber":259,"content":"            return neighbors;"},{"type":"INSERT","lineNumber":260,"content":"        }"},{"type":"INSERT","lineNumber":261,"content":""},{"type":"INSERT","lineNumber":262,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":263,"content":"        /// Trova il percorso più breve tra due stanze"},{"type":"INSERT","lineNumber":264,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":265,"content":"        public List<Vector2> FindPathBetweenRooms(Room roomA, Room roomB)"},{"type":"INSERT","lineNumber":266,"content":"        {"},{"type":"INSERT","lineNumber":267,"content":"            if (roomA == null || roomB == null) return new List<Vector2>();"},{"type":"INSERT","lineNumber":268,"content":""},{"type":"INSERT","lineNumber":269,"content":"            // Usa i centri delle stanze come punti di partenza e arrivo"},{"type":"INSERT","lineNumber":270,"content":"            Vector2 startPoint = roomA.GetCenter();"},{"type":"INSERT","lineNumber":271,"content":"            Vector2 endPoint = roomB.GetCenter();"},{"type":"INSERT","lineNumber":272,"content":""},{"type":"INSERT","lineNumber":273,"content":"            // Implementazione semplificata - in una versione completa useresti A*"},{"type":"INSERT","lineNumber":274,"content":"            var path = new List<Vector2> { startPoint, endPoint };"},{"type":"INSERT","lineNumber":275,"content":"            return path;"},{"type":"INSERT","lineNumber":276,"content":"        }"},{"type":"INSERT","lineNumber":277,"content":""},{"type":"INSERT","lineNumber":278,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":279,"content":"        /// Ottiene una posizione casuale camminabile nel dungeon"},{"type":"INSERT","lineNumber":280,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":281,"content":"        public Vector2? GetRandomWalkablePosition()"},{"type":"INSERT","lineNumber":282,"content":"        {"},{"type":"INSERT","lineNumber":283,"content":"            var walkablePositions = new List<Vector2>();"},{"type":"INSERT","lineNumber":284,"content":"            "},{"type":"INSERT","lineNumber":285,"content":"            for (int x = 0; x < Width; x++)"},{"type":"INSERT","lineNumber":286,"content":"            {"},{"type":"INSERT","lineNumber":287,"content":"                for (int y = 0; y < Height; y++)"},{"type":"INSERT","lineNumber":288,"content":"                {"},{"type":"INSERT","lineNumber":289,"content":"                    if (IsWalkable(x, y))"},{"type":"INSERT","lineNumber":290,"content":"                    {"},{"type":"INSERT","lineNumber":291,"content":"                        walkablePositions.Add(new Vector2(x, y));"},{"type":"INSERT","lineNumber":292,"content":"                    }"},{"type":"INSERT","lineNumber":293,"content":"                }"},{"type":"INSERT","lineNumber":294,"content":"            }"},{"type":"INSERT","lineNumber":295,"content":"            "},{"type":"INSERT","lineNumber":296,"content":"            if (walkablePositions.Count > 0)"},{"type":"INSERT","lineNumber":297,"content":"            {"},{"type":"INSERT","lineNumber":298,"content":"                var random = new System.Random();"},{"type":"INSERT","lineNumber":299,"content":"                return walkablePositions[random.Next(walkablePositions.Count)];"},{"type":"INSERT","lineNumber":300,"content":"            }"},{"type":"INSERT","lineNumber":301,"content":"            "},{"type":"INSERT","lineNumber":302,"content":"            return null;"},{"type":"INSERT","lineNumber":303,"content":"        }"},{"type":"INSERT","lineNumber":304,"content":""},{"type":"INSERT","lineNumber":305,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":306,"content":"        /// Ottiene tutte le posizioni camminabili in una stanza specifica"},{"type":"INSERT","lineNumber":307,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":308,"content":"        public List<Vector2> GetWalkablePositionsInRoom(Room room)"},{"type":"INSERT","lineNumber":309,"content":"        {"},{"type":"INSERT","lineNumber":310,"content":"            var positions = new List<Vector2>();"},{"type":"INSERT","lineNumber":311,"content":"            "},{"type":"INSERT","lineNumber":312,"content":"            if (room == null) return positions;"},{"type":"INSERT","lineNumber":313,"content":"            "},{"type":"INSERT","lineNumber":314,"content":"            for (int x = room.X; x < room.X + room.Width; x++)"},{"type":"INSERT","lineNumber":315,"content":"            {"},{"type":"INSERT","lineNumber":316,"content":"                for (int y = room.Y; y < room.Y + room.Height; y++)"},{"type":"INSERT","lineNumber":317,"content":"                {"},{"type":"INSERT","lineNumber":318,"content":"                    if (IsWalkable(x, y))"},{"type":"INSERT","lineNumber":319,"content":"                    {"},{"type":"INSERT","lineNumber":320,"content":"                        positions.Add(new Vector2(x, y));"},{"type":"INSERT","lineNumber":321,"content":"                    }"},{"type":"INSERT","lineNumber":322,"content":"                }"},{"type":"INSERT","lineNumber":323,"content":"            }"},{"type":"INSERT","lineNumber":324,"content":"            "},{"type":"INSERT","lineNumber":325,"content":"            return positions;"},{"type":"INSERT","lineNumber":326,"content":"        }"},{"type":"INSERT","lineNumber":327,"content":""},{"type":"INSERT","lineNumber":328,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":329,"content":"        /// Controlla se due stanze sono connesse da corridoi"},{"type":"INSERT","lineNumber":330,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":331,"content":"        public bool AreRoomsConnected(Room roomA, Room roomB)"},{"type":"INSERT","lineNumber":332,"content":"        {"},{"type":"INSERT","lineNumber":333,"content":"            // Implementazione semplificata"},{"type":"INSERT","lineNumber":334,"content":"            // In una versione completa, potresti usare un algoritmo di flood-fill"},{"type":"INSERT","lineNumber":335,"content":"            // o controllare se esiste un percorso tra le stanze"},{"type":"INSERT","lineNumber":336,"content":"            "},{"type":"INSERT","lineNumber":337,"content":"            var pathA = FindPathBetweenRooms(roomA, roomB);"},{"type":"INSERT","lineNumber":338,"content":"            return pathA.Count > 0;"},{"type":"INSERT","lineNumber":339,"content":"        }"},{"type":"INSERT","lineNumber":340,"content":""},{"type":"INSERT","lineNumber":341,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":342,"content":"        /// Aggiunge porte tra stanze e corridoi"},{"type":"INSERT","lineNumber":343,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":344,"content":"        public void AddDoors()"},{"type":"INSERT","lineNumber":345,"content":"        {"},{"type":"INSERT","lineNumber":346,"content":"            foreach (var room in Rooms)"},{"type":"INSERT","lineNumber":347,"content":"            {"},{"type":"INSERT","lineNumber":348,"content":"                // Trova i punti dove la stanza si connette ai corridoi"},{"type":"INSERT","lineNumber":349,"content":"                var doorPositions = FindPotentialDoorPositions(room);"},{"type":"INSERT","lineNumber":350,"content":"                "},{"type":"INSERT","lineNumber":351,"content":"                foreach (var doorPos in doorPositions)"},{"type":"INSERT","lineNumber":352,"content":"                {"},{"type":"INSERT","lineNumber":353,"content":"                    if (IsValidPosition(doorPos.X, doorPos.Y))"},{"type":"INSERT","lineNumber":354,"content":"                    {"},{"type":"INSERT","lineNumber":355,"content":"                        Tiles[doorPos.X, doorPos.Y].Type = TileType.Door;"},{"type":"INSERT","lineNumber":356,"content":"                    }"},{"type":"INSERT","lineNumber":357,"content":"                }"},{"type":"INSERT","lineNumber":358,"content":"            }"},{"type":"INSERT","lineNumber":359,"content":"        }"},{"type":"INSERT","lineNumber":360,"content":""},{"type":"INSERT","lineNumber":361,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":362,"content":"        /// Trova le posizioni potenziali per le porte di una stanza"},{"type":"INSERT","lineNumber":363,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":364,"content":"        private List<Point> FindPotentialDoorPositions(Room room)"},{"type":"INSERT","lineNumber":365,"content":"        {"},{"type":"INSERT","lineNumber":366,"content":"            var doorPositions = new List<Point>();"},{"type":"INSERT","lineNumber":367,"content":"            "},{"type":"INSERT","lineNumber":368,"content":"            // Controlla i bordi della stanza"},{"type":"INSERT","lineNumber":369,"content":"            for (int x = room.X; x < room.X + room.Width; x++)"},{"type":"INSERT","lineNumber":370,"content":"            {"},{"type":"INSERT","lineNumber":371,"content":"                // Bordo superiore"},{"type":"INSERT","lineNumber":372,"content":"                if (room.Y > 0 && IsWalkable(x, room.Y - 1))"},{"type":"INSERT","lineNumber":373,"content":"                {"},{"type":"INSERT","lineNumber":374,"content":"                    doorPositions.Add(new Point(x, room.Y));"},{"type":"INSERT","lineNumber":375,"content":"                }"},{"type":"INSERT","lineNumber":376,"content":"                "},{"type":"INSERT","lineNumber":377,"content":"                // Bordo inferiore"},{"type":"INSERT","lineNumber":378,"content":"                if (room.Y + room.Height < Height && IsWalkable(x, room.Y + room.Height))"},{"type":"INSERT","lineNumber":379,"content":"                {"},{"type":"INSERT","lineNumber":380,"content":"                    doorPositions.Add(new Point(x, room.Y + room.Height - 1));"},{"type":"INSERT","lineNumber":381,"content":"                }"},{"type":"INSERT","lineNumber":382,"content":"            }"},{"type":"INSERT","lineNumber":383,"content":"            "},{"type":"INSERT","lineNumber":384,"content":"            for (int y = room.Y; y < room.Y + room.Height; y++)"},{"type":"INSERT","lineNumber":385,"content":"            {"},{"type":"INSERT","lineNumber":386,"content":"                // Bordo sinistro"},{"type":"INSERT","lineNumber":387,"content":"                if (room.X > 0 && IsWalkable(room.X - 1, y))"},{"type":"INSERT","lineNumber":388,"content":"                {"},{"type":"INSERT","lineNumber":389,"content":"                    doorPositions.Add(new Point(room.X, y));"},{"type":"INSERT","lineNumber":390,"content":"                }"},{"type":"INSERT","lineNumber":391,"content":"                "},{"type":"INSERT","lineNumber":392,"content":"                // Bordo destro"},{"type":"INSERT","lineNumber":393,"content":"                if (room.X + room.Width < Width && IsWalkable(room.X + room.Width, y))"},{"type":"INSERT","lineNumber":394,"content":"                {"},{"type":"INSERT","lineNumber":395,"content":"                    doorPositions.Add(new Point(room.X + room.Width - 1, y));"},{"type":"INSERT","lineNumber":396,"content":"                }"},{"type":"INSERT","lineNumber":397,"content":"            }"},{"type":"INSERT","lineNumber":398,"content":"            "},{"type":"INSERT","lineNumber":399,"content":"            return doorPositions;"},{"type":"INSERT","lineNumber":400,"content":"        }"},{"type":"INSERT","lineNumber":401,"content":""},{"type":"INSERT","lineNumber":402,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":403,"content":"        /// Ottiene statistiche del dungeon per debug"},{"type":"INSERT","lineNumber":404,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":405,"content":"        public DungeonStats GetStats()"},{"type":"INSERT","lineNumber":406,"content":"        {"},{"type":"INSERT","lineNumber":407,"content":"            int floorTiles = 0;"},{"type":"INSERT","lineNumber":408,"content":"            int wallTiles = 0;"},{"type":"INSERT","lineNumber":409,"content":"            int doorTiles = 0;"},{"type":"INSERT","lineNumber":410,"content":"            "},{"type":"INSERT","lineNumber":411,"content":"            for (int x = 0; x < Width; x++)"},{"type":"INSERT","lineNumber":412,"content":"            {"},{"type":"INSERT","lineNumber":413,"content":"                for (int y = 0; y < Height; y++)"},{"type":"INSERT","lineNumber":414,"content":"                {"},{"type":"INSERT","lineNumber":415,"content":"                    switch (Tiles[x, y].Type)"},{"type":"INSERT","lineNumber":416,"content":"                    {"},{"type":"INSERT","lineNumber":417,"content":"                        case TileType.Floor:"},{"type":"INSERT","lineNumber":418,"content":"                            floorTiles++;"},{"type":"INSERT","lineNumber":419,"content":"                            break;"},{"type":"INSERT","lineNumber":420,"content":"                        case TileType.Wall:"},{"type":"INSERT","lineNumber":421,"content":"                            wallTiles++;"},{"type":"INSERT","lineNumber":422,"content":"                            break;"},{"type":"INSERT","lineNumber":423,"content":"                        case TileType.Door:"},{"type":"INSERT","lineNumber":424,"content":"                            doorTiles++;"},{"type":"INSERT","lineNumber":425,"content":"                            break;"},{"type":"INSERT","lineNumber":426,"content":"                    }"},{"type":"INSERT","lineNumber":427,"content":"                }"},{"type":"INSERT","lineNumber":428,"content":"            }"},{"type":"INSERT","lineNumber":429,"content":"            "},{"type":"INSERT","lineNumber":430,"content":"            return new DungeonStats"},{"type":"INSERT","lineNumber":431,"content":"            {"},{"type":"INSERT","lineNumber":432,"content":"                TotalRooms = Rooms.Count,"},{"type":"INSERT","lineNumber":433,"content":"                FloorTiles = floorTiles,"},{"type":"INSERT","lineNumber":434,"content":"                WallTiles = wallTiles,"},{"type":"INSERT","lineNumber":435,"content":"                DoorTiles = doorTiles,"},{"type":"INSERT","lineNumber":436,"content":"                TotalTiles = Width * Height,"},{"type":"INSERT","lineNumber":437,"content":"                FloorPercentage = (float)floorTiles / (Width * Height) * 100f"},{"type":"INSERT","lineNumber":438,"content":"            };"},{"type":"INSERT","lineNumber":439,"content":"        }"},{"type":"INSERT","lineNumber":440,"content":"    }"},{"type":"INSERT","lineNumber":441,"content":""},{"type":"INSERT","lineNumber":442,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":443,"content":"    /// Struttura per le statistiche del dungeon"},{"type":"INSERT","lineNumber":444,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":445,"content":"    public struct DungeonStats"},{"type":"INSERT","lineNumber":446,"content":"    {"},{"type":"INSERT","lineNumber":447,"content":"        public int TotalRooms;"},{"type":"INSERT","lineNumber":448,"content":"        public int FloorTiles;"},{"type":"INSERT","lineNumber":449,"content":"        public int WallTiles;"},{"type":"INSERT","lineNumber":450,"content":"        public int DoorTiles;"},{"type":"INSERT","lineNumber":451,"content":"        public int TotalTiles;"},{"type":"INSERT","lineNumber":452,"content":"        public float FloorPercentage;"},{"type":"INSERT","lineNumber":453,"content":"    }"}]},{"timestamp":1756230197206,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"{"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":6,"oldContent":"}"},{"type":"INSERT","lineNumber":5,"content":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"    }"},{"type":"DELETE","lineNumber":10,"oldContent":"        public float FloorPercentage;"},{"type":"DELETE","lineNumber":12,"oldContent":"        public int TotalTiles;"},{"type":"DELETE","lineNumber":14,"oldContent":"        public int DoorTiles;"},{"type":"DELETE","lineNumber":16,"oldContent":"        public int WallTiles;"},{"type":"DELETE","lineNumber":18,"oldContent":"        public int FloorTiles;"},{"type":"DELETE","lineNumber":20,"oldContent":"        public int TotalRooms;"},{"type":"DELETE","lineNumber":22,"oldContent":"    {"},{"type":"DELETE","lineNumber":24,"oldContent":"    public struct DungeonStats"},{"type":"DELETE","lineNumber":26,"oldContent":"    /// </summary>"},{"type":"DELETE","lineNumber":28,"oldContent":"    /// Struttura per le statistiche del dungeon"},{"type":"DELETE","lineNumber":30,"oldContent":"    /// <summary>"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":"    }"},{"type":"DELETE","lineNumber":36,"oldContent":"        }"},{"type":"DELETE","lineNumber":38,"oldContent":"            };"},{"type":"DELETE","lineNumber":40,"oldContent":"                FloorPercentage = (float)floorTiles / (Width * Height) * 100f"},{"type":"DELETE","lineNumber":42,"oldContent":"                TotalTiles = Width * Height,"},{"type":"DELETE","lineNumber":44,"oldContent":"                DoorTiles = doorTiles,"},{"type":"DELETE","lineNumber":46,"oldContent":"                WallTiles = wallTiles,"},{"type":"DELETE","lineNumber":48,"oldContent":"                FloorTiles = floorTiles,"},{"type":"DELETE","lineNumber":50,"oldContent":"                TotalRooms = Rooms.Count,"},{"type":"DELETE","lineNumber":52,"oldContent":"            {"},{"type":"DELETE","lineNumber":54,"oldContent":"            return new DungeonStats"},{"type":"DELETE","lineNumber":56,"oldContent":"            "},{"type":"DELETE","lineNumber":58,"oldContent":"            }"},{"type":"DELETE","lineNumber":60,"oldContent":"                }"},{"type":"DELETE","lineNumber":62,"oldContent":"                    }"},{"type":"DELETE","lineNumber":64,"oldContent":"                            break;"},{"type":"DELETE","lineNumber":66,"oldContent":"                            doorTiles++;"},{"type":"DELETE","lineNumber":68,"oldContent":"                        case TileType.Door:"},{"type":"DELETE","lineNumber":70,"oldContent":"                            break;"},{"type":"DELETE","lineNumber":72,"oldContent":"                            wallTiles++;"},{"type":"DELETE","lineNumber":74,"oldContent":"                        case TileType.Wall:"},{"type":"DELETE","lineNumber":76,"oldContent":"                            break;"},{"type":"DELETE","lineNumber":78,"oldContent":"                            floorTiles++;"},{"type":"DELETE","lineNumber":80,"oldContent":"                        case TileType.Floor:"},{"type":"DELETE","lineNumber":82,"oldContent":"                    {"},{"type":"DELETE","lineNumber":84,"oldContent":"                    switch (Tiles[x, y].Type)"},{"type":"DELETE","lineNumber":86,"oldContent":"                {"},{"type":"DELETE","lineNumber":88,"oldContent":"                for (int y = 0; y < Height; y++)"},{"type":"DELETE","lineNumber":90,"oldContent":"            {"},{"type":"DELETE","lineNumber":92,"oldContent":"            for (int x = 0; x < Width; x++)"},{"type":"DELETE","lineNumber":94,"oldContent":"            "},{"type":"DELETE","lineNumber":96,"oldContent":"            int doorTiles = 0;"},{"type":"DELETE","lineNumber":98,"oldContent":"            int wallTiles = 0;"},{"type":"DELETE","lineNumber":100,"oldContent":"            int floorTiles = 0;"},{"type":"DELETE","lineNumber":102,"oldContent":"        {"},{"type":"DELETE","lineNumber":104,"oldContent":"        public DungeonStats GetStats()"},{"type":"DELETE","lineNumber":106,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":108,"oldContent":"        /// Ottiene statistiche del dungeon per debug"},{"type":"DELETE","lineNumber":110,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":116,"oldContent":"            return doorPositions;"},{"type":"DELETE","lineNumber":118,"oldContent":"            "},{"type":"DELETE","lineNumber":120,"oldContent":"            }"},{"type":"DELETE","lineNumber":122,"oldContent":"                }"},{"type":"DELETE","lineNumber":124,"oldContent":"                    doorPositions.Add(new Point(room.X + room.Width - 1, y));"},{"type":"DELETE","lineNumber":126,"oldContent":"                {"},{"type":"DELETE","lineNumber":128,"oldContent":"                if (room.X + room.Width < Width && IsWalkable(room.X + room.Width, y))"},{"type":"DELETE","lineNumber":130,"oldContent":"                // Bordo destro"},{"type":"DELETE","lineNumber":132,"oldContent":"                "},{"type":"DELETE","lineNumber":134,"oldContent":"                }"},{"type":"DELETE","lineNumber":136,"oldContent":"                    doorPositions.Add(new Point(room.X, y));"},{"type":"DELETE","lineNumber":138,"oldContent":"                {"},{"type":"DELETE","lineNumber":140,"oldContent":"                if (room.X > 0 && IsWalkable(room.X - 1, y))"},{"type":"DELETE","lineNumber":142,"oldContent":"                // Bordo sinistro"},{"type":"DELETE","lineNumber":144,"oldContent":"            {"},{"type":"DELETE","lineNumber":146,"oldContent":"            for (int y = room.Y; y < room.Y + room.Height; y++)"},{"type":"DELETE","lineNumber":148,"oldContent":"            "},{"type":"DELETE","lineNumber":150,"oldContent":"            }"},{"type":"DELETE","lineNumber":152,"oldContent":"                }"},{"type":"DELETE","lineNumber":154,"oldContent":"                    doorPositions.Add(new Point(x, room.Y + room.Height - 1));"},{"type":"DELETE","lineNumber":156,"oldContent":"                {"},{"type":"DELETE","lineNumber":158,"oldContent":"                if (room.Y + room.Height < Height && IsWalkable(x, room.Y + room.Height))"},{"type":"DELETE","lineNumber":160,"oldContent":"                // Bordo inferiore"},{"type":"DELETE","lineNumber":162,"oldContent":"                "},{"type":"DELETE","lineNumber":164,"oldContent":"                }"},{"type":"DELETE","lineNumber":166,"oldContent":"                    doorPositions.Add(new Point(x, room.Y));"},{"type":"DELETE","lineNumber":169,"oldContent":"                {"},{"type":"DELETE","lineNumber":170,"oldContent":"                if (room.Y > 0 && IsWalkable(x, room.Y - 1))"},{"type":"DELETE","lineNumber":172,"oldContent":"                // Bordo superiore"},{"type":"DELETE","lineNumber":174,"oldContent":"            {"},{"type":"DELETE","lineNumber":176,"oldContent":"            for (int x = room.X; x < room.X + room.Width; x++)"},{"type":"DELETE","lineNumber":178,"oldContent":"            // Controlla i bordi della stanza"},{"type":"DELETE","lineNumber":180,"oldContent":"            "},{"type":"DELETE","lineNumber":182,"oldContent":"            var doorPositions = new List<Point>();"},{"type":"DELETE","lineNumber":184,"oldContent":"        {"},{"type":"DELETE","lineNumber":186,"oldContent":"        private List<Point> FindPotentialDoorPositions(Room room)"},{"type":"DELETE","lineNumber":188,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":190,"oldContent":"        /// Trova le posizioni potenziali per le porte di una stanza"},{"type":"DELETE","lineNumber":192,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":194,"oldContent":""},{"type":"DELETE","lineNumber":196,"oldContent":"        }"},{"type":"DELETE","lineNumber":199,"oldContent":"            }"},{"type":"DELETE","lineNumber":200,"oldContent":"                }"},{"type":"DELETE","lineNumber":202,"oldContent":"                    }"},{"type":"DELETE","lineNumber":204,"oldContent":"                        Tiles[doorPos.X, doorPos.Y].Type = TileType.Door;"},{"type":"DELETE","lineNumber":206,"oldContent":"                    {"},{"type":"DELETE","lineNumber":208,"oldContent":"                    if (IsValidPosition(doorPos.X, doorPos.Y))"},{"type":"DELETE","lineNumber":210,"oldContent":"                {"},{"type":"DELETE","lineNumber":212,"oldContent":"                foreach (var doorPos in doorPositions)"},{"type":"DELETE","lineNumber":214,"oldContent":"                "},{"type":"DELETE","lineNumber":216,"oldContent":"                var doorPositions = FindPotentialDoorPositions(room);"},{"type":"DELETE","lineNumber":218,"oldContent":"                // Trova i punti dove la stanza si connette ai corridoi"},{"type":"DELETE","lineNumber":221,"oldContent":"            {"},{"type":"DELETE","lineNumber":222,"oldContent":"            foreach (var room in Rooms)"},{"type":"DELETE","lineNumber":224,"oldContent":"        {"},{"type":"DELETE","lineNumber":226,"oldContent":"        public void AddDoors()"},{"type":"DELETE","lineNumber":228,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":230,"oldContent":"        /// Aggiunge porte tra stanze e corridoi"},{"type":"DELETE","lineNumber":232,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"DELETE","lineNumber":236,"oldContent":"        }"},{"type":"DELETE","lineNumber":238,"oldContent":"            return pathA.Count > 0;"},{"type":"DELETE","lineNumber":240,"oldContent":"            var pathA = FindPathBetweenRooms(roomA, roomB);"},{"type":"DELETE","lineNumber":243,"oldContent":"            "},{"type":"DELETE","lineNumber":244,"oldContent":"            // o controllare se esiste un percorso tra le stanze"},{"type":"DELETE","lineNumber":246,"oldContent":"            // In una versione completa, potresti usare un algoritmo di flood-fill"},{"type":"DELETE","lineNumber":248,"oldContent":"            // Implementazione semplificata"},{"type":"DELETE","lineNumber":250,"oldContent":"        {"},{"type":"DELETE","lineNumber":252,"oldContent":"        public bool AreRoomsConnected(Room roomA, Room roomB)"},{"type":"DELETE","lineNumber":254,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":256,"oldContent":"        /// Controlla se due stanze sono connesse da corridoi"},{"type":"DELETE","lineNumber":258,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":260,"oldContent":""},{"type":"DELETE","lineNumber":262,"oldContent":"        }"},{"type":"DELETE","lineNumber":264,"oldContent":"            return positions;"},{"type":"DELETE","lineNumber":266,"oldContent":"            "},{"type":"DELETE","lineNumber":268,"oldContent":"            }"},{"type":"DELETE","lineNumber":270,"oldContent":"                }"},{"type":"DELETE","lineNumber":272,"oldContent":"                    }"},{"type":"DELETE","lineNumber":274,"oldContent":"                        positions.Add(new Vector2(x, y));"},{"type":"DELETE","lineNumber":276,"oldContent":"                    {"},{"type":"DELETE","lineNumber":278,"oldContent":"                    if (IsWalkable(x, y))"},{"type":"DELETE","lineNumber":280,"oldContent":"                {"},{"type":"DELETE","lineNumber":282,"oldContent":"                for (int y = room.Y; y < room.Y + room.Height; y++)"},{"type":"DELETE","lineNumber":284,"oldContent":"            {"},{"type":"DELETE","lineNumber":286,"oldContent":"            for (int x = room.X; x < room.X + room.Width; x++)"},{"type":"DELETE","lineNumber":288,"oldContent":"            "},{"type":"DELETE","lineNumber":290,"oldContent":"            if (room == null) return positions;"},{"type":"DELETE","lineNumber":292,"oldContent":"            "},{"type":"DELETE","lineNumber":294,"oldContent":"            var positions = new List<Vector2>();"},{"type":"DELETE","lineNumber":297,"oldContent":"        {"},{"type":"DELETE","lineNumber":298,"oldContent":"        public List<Vector2> GetWalkablePositionsInRoom(Room room)"},{"type":"DELETE","lineNumber":300,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":302,"oldContent":"        /// Ottiene tutte le posizioni camminabili in una stanza specifica"},{"type":"DELETE","lineNumber":304,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":306,"oldContent":""},{"type":"DELETE","lineNumber":308,"oldContent":"        }"},{"type":"DELETE","lineNumber":310,"oldContent":"            return null;"},{"type":"DELETE","lineNumber":312,"oldContent":"            "},{"type":"DELETE","lineNumber":314,"oldContent":"            }"},{"type":"DELETE","lineNumber":316,"oldContent":"                return walkablePositions[random.Next(walkablePositions.Count)];"},{"type":"DELETE","lineNumber":318,"oldContent":"                var random = new System.Random();"},{"type":"DELETE","lineNumber":320,"oldContent":"            {"},{"type":"DELETE","lineNumber":322,"oldContent":"            if (walkablePositions.Count > 0)"},{"type":"DELETE","lineNumber":324,"oldContent":"            "},{"type":"DELETE","lineNumber":326,"oldContent":"            }"},{"type":"DELETE","lineNumber":328,"oldContent":"                }"},{"type":"DELETE","lineNumber":330,"oldContent":"                    }"},{"type":"DELETE","lineNumber":332,"oldContent":"                        walkablePositions.Add(new Vector2(x, y));"},{"type":"DELETE","lineNumber":334,"oldContent":"                    {"},{"type":"DELETE","lineNumber":336,"oldContent":"                    if (IsWalkable(x, y))"},{"type":"DELETE","lineNumber":338,"oldContent":"                {"},{"type":"DELETE","lineNumber":340,"oldContent":"                for (int y = 0; y < Height; y++)"},{"type":"DELETE","lineNumber":342,"oldContent":"            {"},{"type":"DELETE","lineNumber":344,"oldContent":"            for (int x = 0; x < Width; x++)"},{"type":"DELETE","lineNumber":346,"oldContent":"            "},{"type":"DELETE","lineNumber":348,"oldContent":"            var walkablePositions = new List<Vector2>();"},{"type":"DELETE","lineNumber":350,"oldContent":"        {"},{"type":"DELETE","lineNumber":352,"oldContent":"        public Vector2? GetRandomWalkablePosition()"},{"type":"DELETE","lineNumber":354,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":356,"oldContent":"        /// Ottiene una posizione casuale camminabile nel dungeon"},{"type":"DELETE","lineNumber":358,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":360,"oldContent":""},{"type":"DELETE","lineNumber":362,"oldContent":"        }"},{"type":"DELETE","lineNumber":364,"oldContent":"            return path;"},{"type":"DELETE","lineNumber":366,"oldContent":"            var path = new List<Vector2> { startPoint, endPoint };"},{"type":"DELETE","lineNumber":368,"oldContent":"            // Implementazione semplificata - in una versione completa useresti A*"},{"type":"DELETE","lineNumber":370,"oldContent":""},{"type":"DELETE","lineNumber":372,"oldContent":"            Vector2 endPoint = roomB.GetCenter();"},{"type":"DELETE","lineNumber":374,"oldContent":"            Vector2 startPoint = roomA.GetCenter();"},{"type":"DELETE","lineNumber":376,"oldContent":"            // Usa i centri delle stanze come punti di partenza e arrivo"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"DELETE","lineNumber":380,"oldContent":"            if (roomA == null || roomB == null) return new List<Vector2>();"},{"type":"DELETE","lineNumber":382,"oldContent":"        {"},{"type":"DELETE","lineNumber":384,"oldContent":"        public List<Vector2> FindPathBetweenRooms(Room roomA, Room roomB)"},{"type":"DELETE","lineNumber":386,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":388,"oldContent":"        /// Trova il percorso più breve tra due stanze"},{"type":"DELETE","lineNumber":390,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":392,"oldContent":""},{"type":"DELETE","lineNumber":394,"oldContent":"        }"},{"type":"DELETE","lineNumber":396,"oldContent":"            return neighbors;"},{"type":"DELETE","lineNumber":398,"oldContent":"            "},{"type":"DELETE","lineNumber":400,"oldContent":"            }"},{"type":"DELETE","lineNumber":402,"oldContent":"                }"},{"type":"DELETE","lineNumber":404,"oldContent":"                    }"},{"type":"DELETE","lineNumber":406,"oldContent":"                        neighbors.Add(Tiles[nx, ny]);"},{"type":"DELETE","lineNumber":408,"oldContent":"                    {"},{"type":"DELETE","lineNumber":410,"oldContent":"                    if (IsValidPosition(nx, ny))"},{"type":"DELETE","lineNumber":412,"oldContent":"                    "},{"type":"DELETE","lineNumber":414,"oldContent":"                    int ny = y + dy;"},{"type":"DELETE","lineNumber":416,"oldContent":"                    int nx = x + dx;"},{"type":"DELETE","lineNumber":418,"oldContent":"                    "},{"type":"DELETE","lineNumber":420,"oldContent":"                    if (dx == 0 && dy == 0) continue; // Skip la tile centrale"},{"type":"DELETE","lineNumber":422,"oldContent":"                {"},{"type":"DELETE","lineNumber":424,"oldContent":"                for (int dy = -1; dy <= 1; dy++)"},{"type":"DELETE","lineNumber":426,"oldContent":"            {"},{"type":"DELETE","lineNumber":428,"oldContent":"            for (int dx = -1; dx <= 1; dx++)"},{"type":"DELETE","lineNumber":430,"oldContent":"            "},{"type":"DELETE","lineNumber":432,"oldContent":"            var neighbors = new List<Tile>();"},{"type":"DELETE","lineNumber":434,"oldContent":"        {"},{"type":"DELETE","lineNumber":436,"oldContent":"        public List<Tile> GetAllNeighbors(int x, int y)"},{"type":"DELETE","lineNumber":438,"oldContent":"        /// </summary>"},{"type":"INSERT","lineNumber":223,"content":"            {"},{"type":"INSERT","lineNumber":224,"content":"                int nx = x + dx[i];"},{"type":"INSERT","lineNumber":225,"content":"                int ny = y + dy[i];"},{"type":"INSERT","lineNumber":226,"content":"                "},{"type":"INSERT","lineNumber":227,"content":"                if (IsWalkable(nx, ny))"},{"type":"INSERT","lineNumber":228,"content":"                {"},{"type":"INSERT","lineNumber":229,"content":"                    neighbors.Add(Tiles[nx, ny]);"},{"type":"INSERT","lineNumber":230,"content":"                }"},{"type":"INSERT","lineNumber":231,"content":"            }"},{"type":"INSERT","lineNumber":232,"content":"            "},{"type":"INSERT","lineNumber":233,"content":"            return neighbors;"},{"type":"INSERT","lineNumber":234,"content":"        }"},{"type":"INSERT","lineNumber":235,"content":""},{"type":"INSERT","lineNumber":236,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":238,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":239,"content":"        public List<Tile> GetAllNeighbors(int x, int y)"},{"type":"INSERT","lineNumber":240,"content":"        {"},{"type":"INSERT","lineNumber":241,"content":"            var neighbors = new List<Tile>();"},{"type":"INSERT","lineNumber":242,"content":"            "},{"type":"INSERT","lineNumber":243,"content":"            for (int dx = -1; dx <= 1; dx++)"},{"type":"INSERT","lineNumber":245,"content":"                for (int dy = -1; dy <= 1; dy++)"},{"type":"INSERT","lineNumber":246,"content":"                {"},{"type":"INSERT","lineNumber":247,"content":"                    if (dx == 0 && dy == 0) continue; // Skip la tile centrale"},{"type":"INSERT","lineNumber":248,"content":"                    "},{"type":"INSERT","lineNumber":249,"content":"                    int nx = x + dx;"},{"type":"INSERT","lineNumber":250,"content":"                    int ny = y + dy;"},{"type":"INSERT","lineNumber":251,"content":"                    "},{"type":"INSERT","lineNumber":252,"content":"                    if (IsValidPosition(nx, ny))"},{"type":"INSERT","lineNumber":253,"content":"                    {"},{"type":"INSERT","lineNumber":254,"content":"                        neighbors.Add(Tiles[nx, ny]);"},{"type":"INSERT","lineNumber":255,"content":"                    }"},{"type":"INSERT","lineNumber":256,"content":"                }"},{"type":"INSERT","lineNumber":257,"content":"            }"},{"type":"INSERT","lineNumber":258,"content":"            "},{"type":"INSERT","lineNumber":259,"content":"            return neighbors;"},{"type":"INSERT","lineNumber":260,"content":"        }"},{"type":"INSERT","lineNumber":261,"content":""},{"type":"DELETE","lineNumber":443,"oldContent":"                int nx = x + dx[i];"},{"type":"INSERT","lineNumber":263,"content":"        /// Trova il percorso più breve tra due stanze"},{"type":"INSERT","lineNumber":264,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":265,"content":"        public List<Vector2> FindPathBetweenRooms(Room roomA, Room roomB)"},{"type":"INSERT","lineNumber":266,"content":"        {"},{"type":"INSERT","lineNumber":267,"content":"            if (roomA == null || roomB == null) return new List<Vector2>();"},{"type":"DELETE","lineNumber":445,"oldContent":"                int ny = y + dy[i];"},{"type":"INSERT","lineNumber":269,"content":"            // Usa i centri delle stanze come punti di partenza e arrivo"},{"type":"INSERT","lineNumber":270,"content":"            Vector2 startPoint = roomA.GetCenter();"},{"type":"INSERT","lineNumber":271,"content":"            Vector2 endPoint = roomB.GetCenter();"},{"type":"INSERT","lineNumber":272,"content":""},{"type":"INSERT","lineNumber":273,"content":"            // Implementazione semplificata - in una versione completa useresti A*"},{"type":"INSERT","lineNumber":274,"content":"            var path = new List<Vector2> { startPoint, endPoint };"},{"type":"INSERT","lineNumber":275,"content":"            return path;"},{"type":"INSERT","lineNumber":277,"content":""},{"type":"INSERT","lineNumber":278,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":279,"content":"        /// Ottiene una posizione casuale camminabile nel dungeon"},{"type":"INSERT","lineNumber":280,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":281,"content":"        public Vector2? GetRandomWalkablePosition()"},{"type":"INSERT","lineNumber":282,"content":"        {"},{"type":"INSERT","lineNumber":283,"content":"            var walkablePositions = new List<Vector2>();"},{"type":"INSERT","lineNumber":284,"content":"            "},{"type":"INSERT","lineNumber":285,"content":"            for (int x = 0; x < Width; x++)"},{"type":"INSERT","lineNumber":286,"content":"            {"},{"type":"INSERT","lineNumber":287,"content":"                for (int y = 0; y < Height; y++)"},{"type":"INSERT","lineNumber":288,"content":"                {"},{"type":"INSERT","lineNumber":289,"content":"                    if (IsWalkable(x, y))"},{"type":"INSERT","lineNumber":290,"content":"                    {"},{"type":"INSERT","lineNumber":291,"content":"                        walkablePositions.Add(new Vector2(x, y));"},{"type":"INSERT","lineNumber":292,"content":"                    }"},{"type":"INSERT","lineNumber":293,"content":"                }"},{"type":"INSERT","lineNumber":294,"content":"            }"},{"type":"INSERT","lineNumber":295,"content":"            "},{"type":"INSERT","lineNumber":296,"content":"            if (walkablePositions.Count > 0)"},{"type":"INSERT","lineNumber":297,"content":"            {"},{"type":"INSERT","lineNumber":298,"content":"                var random = new System.Random();"},{"type":"INSERT","lineNumber":299,"content":"                return walkablePositions[random.Next(walkablePositions.Count)];"},{"type":"INSERT","lineNumber":300,"content":"            }"},{"type":"INSERT","lineNumber":301,"content":"            "},{"type":"INSERT","lineNumber":302,"content":"            return null;"},{"type":"INSERT","lineNumber":303,"content":"        }"},{"type":"INSERT","lineNumber":304,"content":""},{"type":"INSERT","lineNumber":305,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":306,"content":"        /// Ottiene tutte le posizioni camminabili in una stanza specifica"},{"type":"INSERT","lineNumber":307,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":308,"content":"        public List<Vector2> GetWalkablePositionsInRoom(Room room)"},{"type":"INSERT","lineNumber":309,"content":"        {"},{"type":"INSERT","lineNumber":310,"content":"            var positions = new List<Vector2>();"},{"type":"INSERT","lineNumber":311,"content":"            "},{"type":"INSERT","lineNumber":312,"content":"            if (room == null) return positions;"},{"type":"INSERT","lineNumber":313,"content":"            "},{"type":"INSERT","lineNumber":314,"content":"            for (int x = room.X; x < room.X + room.Width; x++)"},{"type":"INSERT","lineNumber":315,"content":"            {"},{"type":"INSERT","lineNumber":316,"content":"                for (int y = room.Y; y < room.Y + room.Height; y++)"},{"type":"INSERT","lineNumber":317,"content":"                {"},{"type":"INSERT","lineNumber":318,"content":"                    if (IsWalkable(x, y))"},{"type":"INSERT","lineNumber":319,"content":"                    {"},{"type":"INSERT","lineNumber":320,"content":"                        positions.Add(new Vector2(x, y));"},{"type":"INSERT","lineNumber":321,"content":"                    }"},{"type":"INSERT","lineNumber":322,"content":"                }"},{"type":"INSERT","lineNumber":323,"content":"            }"},{"type":"INSERT","lineNumber":324,"content":"            "},{"type":"INSERT","lineNumber":325,"content":"            return positions;"},{"type":"INSERT","lineNumber":326,"content":"        }"},{"type":"INSERT","lineNumber":327,"content":""},{"type":"INSERT","lineNumber":328,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":329,"content":"        /// Controlla se due stanze sono connesse da corridoi"},{"type":"INSERT","lineNumber":330,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":331,"content":"        public bool AreRoomsConnected(Room roomA, Room roomB)"},{"type":"INSERT","lineNumber":332,"content":"        {"},{"type":"INSERT","lineNumber":333,"content":"            // Implementazione semplificata"},{"type":"INSERT","lineNumber":334,"content":"            // In una versione completa, potresti usare un algoritmo di flood-fill"},{"type":"INSERT","lineNumber":335,"content":"            // o controllare se esiste un percorso tra le stanze"},{"type":"INSERT","lineNumber":336,"content":"            "},{"type":"INSERT","lineNumber":337,"content":"            var pathA = FindPathBetweenRooms(roomA, roomB);"},{"type":"INSERT","lineNumber":338,"content":"            return pathA.Count > 0;"},{"type":"INSERT","lineNumber":339,"content":"        }"},{"type":"INSERT","lineNumber":340,"content":""},{"type":"INSERT","lineNumber":341,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":342,"content":"        /// Aggiunge porte tra stanze e corridoi"},{"type":"INSERT","lineNumber":343,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":344,"content":"        public void AddDoors()"},{"type":"INSERT","lineNumber":345,"content":"        {"},{"type":"INSERT","lineNumber":346,"content":"            foreach (var room in Rooms)"},{"type":"INSERT","lineNumber":347,"content":"            {"},{"type":"INSERT","lineNumber":348,"content":"                // Trova i punti dove la stanza si connette ai corridoi"},{"type":"INSERT","lineNumber":349,"content":"                var doorPositions = FindPotentialDoorPositions(room);"},{"type":"DELETE","lineNumber":448,"oldContent":"            return neighbors;"},{"type":"DELETE","lineNumber":449,"oldContent":"                if (IsWalkable(nx, ny))"},{"type":"INSERT","lineNumber":351,"content":"                foreach (var doorPos in doorPositions)"},{"type":"INSERT","lineNumber":352,"content":"                {"},{"type":"INSERT","lineNumber":353,"content":"                    if (IsValidPosition(doorPos.X, doorPos.Y))"},{"type":"INSERT","lineNumber":354,"content":"                    {"},{"type":"INSERT","lineNumber":355,"content":"                        Tiles[doorPos.X, doorPos.Y].Type = TileType.Door;"},{"type":"INSERT","lineNumber":356,"content":"                    }"},{"type":"INSERT","lineNumber":357,"content":"                }"},{"type":"INSERT","lineNumber":358,"content":"            }"},{"type":"INSERT","lineNumber":359,"content":"        }"},{"type":"INSERT","lineNumber":360,"content":""},{"type":"INSERT","lineNumber":361,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":362,"content":"        /// Trova le posizioni potenziali per le porte di una stanza"},{"type":"INSERT","lineNumber":363,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":364,"content":"        private List<Point> FindPotentialDoorPositions(Room room)"},{"type":"INSERT","lineNumber":365,"content":"        {"},{"type":"INSERT","lineNumber":366,"content":"            var doorPositions = new List<Point>();"},{"type":"INSERT","lineNumber":368,"content":"            // Controlla i bordi della stanza"},{"type":"INSERT","lineNumber":369,"content":"            for (int x = room.X; x < room.X + room.Width; x++)"},{"type":"INSERT","lineNumber":370,"content":"            {"},{"type":"INSERT","lineNumber":371,"content":"                // Bordo superiore"},{"type":"INSERT","lineNumber":372,"content":"                if (room.Y > 0 && IsWalkable(x, room.Y - 1))"},{"type":"INSERT","lineNumber":374,"content":"                    doorPositions.Add(new Point(x, room.Y));"},{"type":"INSERT","lineNumber":375,"content":"                }"},{"type":"INSERT","lineNumber":376,"content":"                "},{"type":"INSERT","lineNumber":377,"content":"                // Bordo inferiore"},{"type":"INSERT","lineNumber":378,"content":"                if (room.Y + room.Height < Height && IsWalkable(x, room.Y + room.Height))"},{"type":"INSERT","lineNumber":379,"content":"                {"},{"type":"INSERT","lineNumber":380,"content":"                    doorPositions.Add(new Point(x, room.Y + room.Height - 1));"},{"type":"INSERT","lineNumber":381,"content":"                }"},{"type":"DELETE","lineNumber":453,"oldContent":"                    neighbors.Add(Tiles[nx, ny]);"},{"type":"INSERT","lineNumber":383,"content":"            "},{"type":"INSERT","lineNumber":384,"content":"            for (int y = room.Y; y < room.Y + room.Height; y++)"},{"type":"INSERT","lineNumber":385,"content":"            {"},{"type":"INSERT","lineNumber":386,"content":"                // Bordo sinistro"},{"type":"INSERT","lineNumber":387,"content":"                if (room.X > 0 && IsWalkable(room.X - 1, y))"},{"type":"INSERT","lineNumber":388,"content":"                {"},{"type":"INSERT","lineNumber":389,"content":"                    doorPositions.Add(new Point(room.X, y));"},{"type":"INSERT","lineNumber":391,"content":"                "},{"type":"INSERT","lineNumber":392,"content":"                // Bordo destro"},{"type":"INSERT","lineNumber":393,"content":"                if (room.X + room.Width < Width && IsWalkable(room.X + room.Width, y))"},{"type":"INSERT","lineNumber":394,"content":"                {"},{"type":"INSERT","lineNumber":395,"content":"                    doorPositions.Add(new Point(room.X + room.Width - 1, y));"},{"type":"INSERT","lineNumber":396,"content":"                }"},{"type":"INSERT","lineNumber":397,"content":"            }"},{"type":"INSERT","lineNumber":398,"content":"            "},{"type":"INSERT","lineNumber":399,"content":"            return doorPositions;"},{"type":"INSERT","lineNumber":400,"content":"        }"},{"type":"INSERT","lineNumber":401,"content":""},{"type":"INSERT","lineNumber":402,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":403,"content":"        /// Ottiene statistiche del dungeon per debug"},{"type":"INSERT","lineNumber":404,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":405,"content":"        public DungeonStats GetStats()"},{"type":"INSERT","lineNumber":406,"content":"        {"},{"type":"INSERT","lineNumber":407,"content":"            int floorTiles = 0;"},{"type":"INSERT","lineNumber":408,"content":"            int wallTiles = 0;"},{"type":"INSERT","lineNumber":409,"content":"            int doorTiles = 0;"},{"type":"INSERT","lineNumber":410,"content":"            "},{"type":"INSERT","lineNumber":411,"content":"            for (int x = 0; x < Width; x++)"},{"type":"INSERT","lineNumber":412,"content":"            {"},{"type":"INSERT","lineNumber":413,"content":"                for (int y = 0; y < Height; y++)"},{"type":"INSERT","lineNumber":414,"content":"                {"},{"type":"INSERT","lineNumber":415,"content":"                    switch (Tiles[x, y].Type)"},{"type":"INSERT","lineNumber":416,"content":"                    {"},{"type":"INSERT","lineNumber":417,"content":"                        case TileType.Floor:"},{"type":"INSERT","lineNumber":418,"content":"                            floorTiles++;"},{"type":"INSERT","lineNumber":419,"content":"                            break;"},{"type":"INSERT","lineNumber":420,"content":"                        case TileType.Wall:"},{"type":"INSERT","lineNumber":421,"content":"                            wallTiles++;"},{"type":"INSERT","lineNumber":422,"content":"                            break;"},{"type":"INSERT","lineNumber":423,"content":"                        case TileType.Door:"},{"type":"INSERT","lineNumber":424,"content":"                            doorTiles++;"},{"type":"INSERT","lineNumber":425,"content":"                            break;"},{"type":"INSERT","lineNumber":426,"content":"                    }"},{"type":"INSERT","lineNumber":427,"content":"                }"},{"type":"INSERT","lineNumber":428,"content":"            }"},{"type":"INSERT","lineNumber":429,"content":"            "},{"type":"INSERT","lineNumber":430,"content":"            return new DungeonStats"},{"type":"INSERT","lineNumber":431,"content":"            {"},{"type":"INSERT","lineNumber":432,"content":"                TotalRooms = Rooms.Count,"},{"type":"INSERT","lineNumber":433,"content":"                FloorTiles = floorTiles,"},{"type":"INSERT","lineNumber":434,"content":"                WallTiles = wallTiles,"},{"type":"INSERT","lineNumber":435,"content":"                DoorTiles = doorTiles,"},{"type":"INSERT","lineNumber":436,"content":"                TotalTiles = Width * Height,"},{"type":"INSERT","lineNumber":437,"content":"                FloorPercentage = (float)floorTiles / (Width * Height) * 100f"},{"type":"INSERT","lineNumber":438,"content":"            };"},{"type":"INSERT","lineNumber":439,"content":"        }"},{"type":"INSERT","lineNumber":440,"content":"    }"},{"type":"INSERT","lineNumber":441,"content":""},{"type":"INSERT","lineNumber":442,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":443,"content":"    /// Struttura per le statistiche del dungeon"},{"type":"INSERT","lineNumber":444,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":445,"content":"    public struct DungeonStats"},{"type":"INSERT","lineNumber":446,"content":"    {"},{"type":"INSERT","lineNumber":447,"content":"        public int TotalRooms;"},{"type":"INSERT","lineNumber":448,"content":"        public int FloorTiles;"},{"type":"INSERT","lineNumber":449,"content":"        public int WallTiles;"},{"type":"INSERT","lineNumber":450,"content":"        public int DoorTiles;"},{"type":"INSERT","lineNumber":451,"content":"        public int TotalTiles;"},{"type":"INSERT","lineNumber":452,"content":"        public float FloorPercentage;"},{"type":"INSERT","lineNumber":453,"content":"    }"},{"type":"INSERT","lineNumber":454,"content":"}"}]},{"timestamp":1756230437992,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"{"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":5,"content":"{"},{"type":"DELETE","lineNumber":114,"oldContent":"            {"},{"type":"INSERT","lineNumber":115,"content":"            }"},{"type":"INSERT","lineNumber":116,"content":"        }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":119,"content":"        /// Imposta la posizione finale del dungeon"},{"type":"INSERT","lineNumber":120,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":121,"content":"        public void SetEndPosition(Vector2 position)"},{"type":"INSERT","lineNumber":122,"content":"        {"},{"type":"INSERT","lineNumber":123,"content":"            EndPosition = position;"},{"type":"INSERT","lineNumber":124,"content":"            "},{"type":"INSERT","lineNumber":125,"content":"            if (IsValidPosition((int)position.X, (int)position.Y))"},{"type":"INSERT","lineNumber":126,"content":"            {"},{"type":"INSERT","lineNumber":127,"content":"                Tiles[(int)position.X, (int)position.Y].IsEndPosition = true;"},{"type":"INSERT","lineNumber":128,"content":"            }"},{"type":"INSERT","lineNumber":129,"content":"        }"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"INSERT","lineNumber":131,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":132,"content":"        /// Ottiene la posizione di inizio in coordinate mondo"},{"type":"INSERT","lineNumber":133,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":134,"content":"        public Vector2 GetStartPosition()"},{"type":"INSERT","lineNumber":135,"content":"        {"},{"type":"INSERT","lineNumber":136,"content":"            return StartPosition;"},{"type":"INSERT","lineNumber":137,"content":"        }"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"INSERT","lineNumber":139,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":140,"content":"        /// Ottiene tutte le stanze del dungeon"},{"type":"INSERT","lineNumber":141,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":142,"content":"        public List<Room> GetRooms()"},{"type":"INSERT","lineNumber":143,"content":"        {"},{"type":"INSERT","lineNumber":144,"content":"            return new List<Room>(Rooms);"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":148,"content":"        /// Ottiene la stanza che contiene una specifica posizione"},{"type":"INSERT","lineNumber":149,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":150,"content":"        public Room GetRoomAt(Vector2 worldPosition)"},{"type":"INSERT","lineNumber":151,"content":"        {"},{"type":"INSERT","lineNumber":152,"content":"            int tileX = (int)(worldPosition.X / 32); // TILE_SIZE"},{"type":"INSERT","lineNumber":153,"content":"            int tileY = (int)(worldPosition.Y / 32);"},{"type":"INSERT","lineNumber":154,"content":""},{"type":"INSERT","lineNumber":155,"content":"            return GetRoomAt(tileX, tileY);"},{"type":"INSERT","lineNumber":156,"content":"        }"},{"type":"INSERT","lineNumber":157,"content":""},{"type":"INSERT","lineNumber":158,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":159,"content":"        /// Ottiene la stanza che contiene una specifica posizione in coordinate tile"},{"type":"INSERT","lineNumber":160,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":161,"content":"        public Room GetRoomAt(int tileX, int tileY)"},{"type":"INSERT","lineNumber":162,"content":"        {"},{"type":"INSERT","lineNumber":163,"content":"            foreach (var room in Rooms)"},{"type":"INSERT","lineNumber":164,"content":"            {"},{"type":"INSERT","lineNumber":165,"content":"                if (room.Contains(tileX, tileY))"},{"type":"INSERT","lineNumber":166,"content":"                {"},{"type":"INSERT","lineNumber":167,"content":"                    return room;"},{"type":"INSERT","lineNumber":168,"content":"                }"},{"type":"INSERT","lineNumber":169,"content":"            }"},{"type":"INSERT","lineNumber":170,"content":"            return null;"},{"type":"INSERT","lineNumber":171,"content":"        }"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":174,"content":"        /// Controlla se una posizione è valida nel dungeon"},{"type":"INSERT","lineNumber":175,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":176,"content":"        public bool IsValidPosition(int x, int y)"},{"type":"INSERT","lineNumber":177,"content":"        {"},{"type":"INSERT","lineNumber":178,"content":"            return x >= 0 && x < Width && y >= 0 && y < Height;"},{"type":"INSERT","lineNumber":179,"content":"        }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":182,"content":"        /// Controlla se una tile è camminabile"},{"type":"INSERT","lineNumber":183,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":184,"content":"        public bool IsWalkable(int x, int y)"},{"type":"INSERT","lineNumber":185,"content":"        {"},{"type":"INSERT","lineNumber":186,"content":"            if (!IsValidPosition(x, y)) return false;"},{"type":"INSERT","lineNumber":187,"content":"            "},{"type":"INSERT","lineNumber":188,"content":"            var tile = Tiles[x, y];"},{"type":"INSERT","lineNumber":189,"content":"            return tile != null && (tile.Type == TileType.Floor || tile.Type == TileType.Door);"},{"type":"INSERT","lineNumber":190,"content":"        }"},{"type":"INSERT","lineNumber":191,"content":""},{"type":"INSERT","lineNumber":192,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":193,"content":"        /// Ottiene la tile in una specifica posizione"},{"type":"INSERT","lineNumber":194,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":195,"content":"        public Tile GetTile(int x, int y)"},{"type":"INSERT","lineNumber":196,"content":"        {"},{"type":"INSERT","lineNumber":197,"content":"            if (!IsValidPosition(x, y)) return null;"},{"type":"INSERT","lineNumber":198,"content":"            return Tiles[x, y];"},{"type":"INSERT","lineNumber":199,"content":"        }"},{"type":"INSERT","lineNumber":200,"content":""},{"type":"INSERT","lineNumber":201,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":202,"content":"        /// Ottiene la tile in una posizione mondiale"},{"type":"INSERT","lineNumber":203,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":204,"content":"        public Tile GetTileAtWorldPosition(Vector2 worldPosition)"},{"type":"INSERT","lineNumber":205,"content":"        {"},{"type":"INSERT","lineNumber":206,"content":"            int tileX = (int)(worldPosition.X / 32);"},{"type":"INSERT","lineNumber":207,"content":"            int tileY = (int)(worldPosition.Y / 32);"},{"type":"INSERT","lineNumber":208,"content":"            return GetTile(tileX, tileY);"},{"type":"INSERT","lineNumber":209,"content":"        }"},{"type":"INSERT","lineNumber":210,"content":""},{"type":"INSERT","lineNumber":211,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":212,"content":"        /// Ottiene tutti i vicini camminabili di una tile"},{"type":"INSERT","lineNumber":213,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":214,"content":"        public List<Tile> GetWalkableNeighbors(int x, int y)"},{"type":"INSERT","lineNumber":215,"content":"        {"},{"type":"INSERT","lineNumber":216,"content":"            var neighbors = new List<Tile>();"},{"type":"INSERT","lineNumber":217,"content":"            "},{"type":"INSERT","lineNumber":218,"content":"            // Controlla le 4 direzioni principali"},{"type":"INSERT","lineNumber":219,"content":"            int[] dx = { 0, 1, 0, -1 };"},{"type":"INSERT","lineNumber":220,"content":"            int[] dy = { -1, 0, 1, 0 };"},{"type":"INSERT","lineNumber":221,"content":"            "},{"type":"INSERT","lineNumber":222,"content":"            for (int i = 0; i < 4; i++)"},{"type":"INSERT","lineNumber":223,"content":"            {"},{"type":"DELETE","lineNumber":118,"oldContent":"            }"},{"type":"DELETE","lineNumber":121,"oldContent":"        }"},{"type":"DELETE","lineNumber":124,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":130,"oldContent":"        /// Imposta la posizione finale del dungeon"},{"type":"DELETE","lineNumber":133,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":135,"oldContent":"        public void SetEndPosition(Vector2 position)"},{"type":"INSERT","lineNumber":237,"content":"        /// Ottiene tutti i vicini di una tile (inclusi i muri)"},{"type":"DELETE","lineNumber":139,"oldContent":"        {"},{"type":"DELETE","lineNumber":141,"oldContent":"            EndPosition = position;"},{"type":"DELETE","lineNumber":143,"oldContent":"            "},{"type":"INSERT","lineNumber":244,"content":"            {"},{"type":"DELETE","lineNumber":146,"oldContent":"            if (IsValidPosition((int)position.X, (int)position.Y))"},{"type":"DELETE","lineNumber":149,"oldContent":"            {"},{"type":"DELETE","lineNumber":152,"oldContent":"                Tiles[(int)position.X, (int)position.Y].IsEndPosition = true;"},{"type":"DELETE","lineNumber":155,"oldContent":"            }"},{"type":"DELETE","lineNumber":158,"oldContent":"        }"},{"type":"DELETE","lineNumber":161,"oldContent":""},{"type":"DELETE","lineNumber":164,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":167,"oldContent":"        /// Ottiene la posizione di inizio in coordinate mondo"},{"type":"DELETE","lineNumber":170,"oldContent":"        /// </summary>"},{"type":"INSERT","lineNumber":262,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":172,"oldContent":"        public Vector2 GetStartPosition()"},{"type":"DELETE","lineNumber":176,"oldContent":"        {"},{"type":"DELETE","lineNumber":178,"oldContent":"            return StartPosition;"},{"type":"INSERT","lineNumber":268,"content":""},{"type":"DELETE","lineNumber":180,"oldContent":"        }"},{"type":"DELETE","lineNumber":181,"oldContent":"            Vector2 startPoint = roomA.GetCenter();"},{"type":"INSERT","lineNumber":270,"content":"            Vector2 startPoint = roomA.Center;"},{"type":"DELETE","lineNumber":184,"oldContent":""},{"type":"DELETE","lineNumber":186,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":189,"oldContent":"        /// Ottiene tutte le stanze del dungeon"},{"type":"INSERT","lineNumber":276,"content":"        }"},{"type":"DELETE","lineNumber":191,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":194,"oldContent":"        public List<Room> GetRooms()"},{"type":"DELETE","lineNumber":198,"oldContent":"        {"},{"type":"DELETE","lineNumber":200,"oldContent":"            return new List<Room>(Rooms);"},{"type":"DELETE","lineNumber":203,"oldContent":"        }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":209,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":212,"oldContent":"        /// Ottiene la stanza che contiene una specifica posizione"},{"type":"DELETE","lineNumber":215,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":218,"oldContent":"        public Room GetRoomAt(Vector2 worldPosition)"},{"type":"DELETE","lineNumber":220,"oldContent":"        {"},{"type":"DELETE","lineNumber":224,"oldContent":"            int tileX = (int)(worldPosition.X / 32); // TILE_SIZE"},{"type":"DELETE","lineNumber":227,"oldContent":"            int tileY = (int)(worldPosition.Y / 32);"},{"type":"DELETE","lineNumber":231,"oldContent":""},{"type":"DELETE","lineNumber":233,"oldContent":"            return GetRoomAt(tileX, tileY);"},{"type":"DELETE","lineNumber":236,"oldContent":"        }"},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"DELETE","lineNumber":242,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":245,"oldContent":"        /// Ottiene la stanza che contiene una specifica posizione in coordinate tile"},{"type":"DELETE","lineNumber":248,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":251,"oldContent":"        public Room GetRoomAt(int tileX, int tileY)"},{"type":"DELETE","lineNumber":254,"oldContent":"        {"},{"type":"DELETE","lineNumber":257,"oldContent":"            foreach (var room in Rooms)"},{"type":"DELETE","lineNumber":260,"oldContent":"            {"},{"type":"DELETE","lineNumber":263,"oldContent":"                if (room.Contains(tileX, tileY))"},{"type":"DELETE","lineNumber":266,"oldContent":"                {"},{"type":"DELETE","lineNumber":269,"oldContent":"                    return room;"},{"type":"DELETE","lineNumber":272,"oldContent":"                }"},{"type":"DELETE","lineNumber":275,"oldContent":"            }"},{"type":"DELETE","lineNumber":278,"oldContent":"            return null;"},{"type":"DELETE","lineNumber":281,"oldContent":"        }"},{"type":"DELETE","lineNumber":285,"oldContent":""},{"type":"DELETE","lineNumber":287,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":290,"oldContent":"        /// Controlla se una posizione è valida nel dungeon"},{"type":"DELETE","lineNumber":293,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":296,"oldContent":"        public bool IsValidPosition(int x, int y)"},{"type":"DELETE","lineNumber":299,"oldContent":"        {"},{"type":"INSERT","lineNumber":350,"content":"                "},{"type":"DELETE","lineNumber":301,"oldContent":"            return x >= 0 && x < Width && y >= 0 && y < Height;"},{"type":"DELETE","lineNumber":304,"oldContent":"        }"},{"type":"DELETE","lineNumber":307,"oldContent":""},{"type":"DELETE","lineNumber":310,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":313,"oldContent":"        /// Controlla se una tile è camminabile"},{"type":"DELETE","lineNumber":316,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":319,"oldContent":"        public bool IsWalkable(int x, int y)"},{"type":"DELETE","lineNumber":322,"oldContent":"        {"},{"type":"DELETE","lineNumber":324,"oldContent":"            if (!IsValidPosition(x, y)) return false;"},{"type":"INSERT","lineNumber":367,"content":"            "},{"type":"DELETE","lineNumber":327,"oldContent":"            "},{"type":"DELETE","lineNumber":330,"oldContent":"            var tile = Tiles[x, y];"},{"type":"DELETE","lineNumber":332,"oldContent":"            return tile != null && (tile.Type == TileType.Floor || tile.Type == TileType.Door);"},{"type":"INSERT","lineNumber":373,"content":"                {"},{"type":"DELETE","lineNumber":335,"oldContent":"        }"},{"type":"DELETE","lineNumber":338,"oldContent":""},{"type":"DELETE","lineNumber":341,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":344,"oldContent":"        /// Ottiene la tile in una specifica posizione"},{"type":"INSERT","lineNumber":382,"content":"            }"},{"type":"DELETE","lineNumber":346,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":349,"oldContent":"        public Tile GetTile(int x, int y)"},{"type":"DELETE","lineNumber":352,"oldContent":"        {"},{"type":"DELETE","lineNumber":355,"oldContent":"            if (!IsValidPosition(x, y)) return null;"},{"type":"INSERT","lineNumber":390,"content":"                }"},{"type":"DELETE","lineNumber":357,"oldContent":"            return Tiles[x, y];"},{"type":"DELETE","lineNumber":360,"oldContent":"        }"},{"type":"DELETE","lineNumber":363,"oldContent":""},{"type":"DELETE","lineNumber":366,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":369,"oldContent":"        /// Ottiene la tile in una posizione mondiale"},{"type":"DELETE","lineNumber":372,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":375,"oldContent":"        public Tile GetTileAtWorldPosition(Vector2 worldPosition)"},{"type":"DELETE","lineNumber":379,"oldContent":"        {"},{"type":"DELETE","lineNumber":381,"oldContent":"            int tileX = (int)(worldPosition.X / 32);"},{"type":"DELETE","lineNumber":384,"oldContent":"            int tileY = (int)(worldPosition.Y / 32);"},{"type":"DELETE","lineNumber":387,"oldContent":"            return GetTile(tileX, tileY);"},{"type":"DELETE","lineNumber":390,"oldContent":"        }"},{"type":"DELETE","lineNumber":393,"oldContent":""},{"type":"DELETE","lineNumber":396,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":399,"oldContent":"        /// Ottiene tutti i vicini camminabili di una tile"},{"type":"DELETE","lineNumber":402,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":405,"oldContent":"        public List<Tile> GetWalkableNeighbors(int x, int y)"},{"type":"DELETE","lineNumber":408,"oldContent":"        {"},{"type":"DELETE","lineNumber":411,"oldContent":"            var neighbors = new List<Tile>();"},{"type":"DELETE","lineNumber":414,"oldContent":"            "},{"type":"DELETE","lineNumber":417,"oldContent":"            // Controlla le 4 direzioni principali"},{"type":"DELETE","lineNumber":420,"oldContent":"            int[] dx = { 0, 1, 0, -1 };"},{"type":"DELETE","lineNumber":423,"oldContent":"            int[] dy = { -1, 0, 1, 0 };"},{"type":"DELETE","lineNumber":426,"oldContent":"            "},{"type":"DELETE","lineNumber":429,"oldContent":"            for (int i = 0; i < 4; i++)"},{"type":"DELETE","lineNumber":431,"oldContent":"        /// Ottiene tutti i vicini di una tile (inclusi i muri)"},{"type":"DELETE","lineNumber":433,"oldContent":"            {"},{"type":"DELETE","lineNumber":435,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":438,"oldContent":""},{"type":"DELETE","lineNumber":441,"oldContent":"        }"},{"type":"DELETE","lineNumber":443,"oldContent":"                "},{"type":"DELETE","lineNumber":447,"oldContent":"            "},{"type":"DELETE","lineNumber":449,"oldContent":"                {"},{"type":"DELETE","lineNumber":451,"oldContent":"            }"},{"type":"DELETE","lineNumber":454,"oldContent":"                }"}]},{"timestamp":1756230441312,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"{"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":5,"content":"{"},{"type":"MODIFY","lineNumber":115,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":117,"oldContent":"                int nx = x + dx[i];"},{"type":"DELETE","lineNumber":119,"oldContent":"                int ny = y + dy[i];"},{"type":"DELETE","lineNumber":122,"oldContent":"                "},{"type":"DELETE","lineNumber":124,"oldContent":"                if (IsWalkable(nx, ny))"},{"type":"DELETE","lineNumber":127,"oldContent":"                {"},{"type":"DELETE","lineNumber":129,"oldContent":"                    neighbors.Add(Tiles[nx, ny]);"},{"type":"DELETE","lineNumber":132,"oldContent":"                }"},{"type":"DELETE","lineNumber":134,"oldContent":"            }"},{"type":"DELETE","lineNumber":137,"oldContent":"            "},{"type":"DELETE","lineNumber":139,"oldContent":"            return neighbors;"},{"type":"DELETE","lineNumber":142,"oldContent":"        }"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"DELETE","lineNumber":147,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":150,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":152,"oldContent":"        public List<Tile> GetAllNeighbors(int x, int y)"},{"type":"DELETE","lineNumber":154,"oldContent":"        {"},{"type":"DELETE","lineNumber":157,"oldContent":"            var neighbors = new List<Tile>();"},{"type":"DELETE","lineNumber":160,"oldContent":"            "},{"type":"DELETE","lineNumber":163,"oldContent":"            for (int dx = -1; dx <= 1; dx++)"},{"type":"DELETE","lineNumber":165,"oldContent":"                for (int dy = -1; dy <= 1; dy++)"},{"type":"DELETE","lineNumber":168,"oldContent":"                {"},{"type":"DELETE","lineNumber":170,"oldContent":"                    if (dx == 0 && dy == 0) continue; // Skip la tile centrale"},{"type":"DELETE","lineNumber":173,"oldContent":"                    "},{"type":"DELETE","lineNumber":175,"oldContent":"                    int nx = x + dx;"},{"type":"DELETE","lineNumber":178,"oldContent":"                    int ny = y + dy;"},{"type":"DELETE","lineNumber":180,"oldContent":"                    "},{"type":"DELETE","lineNumber":183,"oldContent":"                    if (IsValidPosition(nx, ny))"},{"type":"DELETE","lineNumber":185,"oldContent":"                    {"},{"type":"DELETE","lineNumber":188,"oldContent":"                        neighbors.Add(Tiles[nx, ny]);"},{"type":"DELETE","lineNumber":190,"oldContent":"                    }"},{"type":"DELETE","lineNumber":193,"oldContent":"                }"},{"type":"DELETE","lineNumber":195,"oldContent":"            }"},{"type":"DELETE","lineNumber":198,"oldContent":"            "},{"type":"DELETE","lineNumber":200,"oldContent":"            return neighbors;"},{"type":"DELETE","lineNumber":203,"oldContent":"        }"},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":208,"oldContent":"        /// Trova il percorso più breve tra due stanze"},{"type":"DELETE","lineNumber":211,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":213,"oldContent":"        public List<Vector2> FindPathBetweenRooms(Room roomA, Room roomB)"},{"type":"DELETE","lineNumber":215,"oldContent":"        {"},{"type":"DELETE","lineNumber":218,"oldContent":"            if (roomA == null || roomB == null) return new List<Vector2>();"},{"type":"DELETE","lineNumber":221,"oldContent":"            // Usa i centri delle stanze come punti di partenza e arrivo"},{"type":"DELETE","lineNumber":225,"oldContent":"            Vector2 endPoint = roomB.GetCenter();"},{"type":"DELETE","lineNumber":227,"oldContent":""},{"type":"DELETE","lineNumber":230,"oldContent":"            // Implementazione semplificata - in una versione completa useresti A*"},{"type":"DELETE","lineNumber":233,"oldContent":"            var path = new List<Vector2> { startPoint, endPoint };"},{"type":"DELETE","lineNumber":235,"oldContent":"            return path;"},{"type":"DELETE","lineNumber":239,"oldContent":""},{"type":"DELETE","lineNumber":241,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":243,"oldContent":"        /// Ottiene una posizione casuale camminabile nel dungeon"},{"type":"DELETE","lineNumber":246,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":248,"oldContent":"        public Vector2? GetRandomWalkablePosition()"},{"type":"DELETE","lineNumber":250,"oldContent":"        {"},{"type":"DELETE","lineNumber":253,"oldContent":"            var walkablePositions = new List<Vector2>();"},{"type":"DELETE","lineNumber":256,"oldContent":"            "},{"type":"DELETE","lineNumber":258,"oldContent":"            for (int x = 0; x < Width; x++)"},{"type":"DELETE","lineNumber":261,"oldContent":"            {"},{"type":"DELETE","lineNumber":263,"oldContent":"                for (int y = 0; y < Height; y++)"},{"type":"DELETE","lineNumber":266,"oldContent":"                {"},{"type":"DELETE","lineNumber":268,"oldContent":"                    if (IsWalkable(x, y))"},{"type":"DELETE","lineNumber":271,"oldContent":"                    {"},{"type":"DELETE","lineNumber":273,"oldContent":"                        walkablePositions.Add(new Vector2(x, y));"},{"type":"DELETE","lineNumber":276,"oldContent":"                    }"},{"type":"DELETE","lineNumber":278,"oldContent":"                }"},{"type":"DELETE","lineNumber":281,"oldContent":"            }"},{"type":"DELETE","lineNumber":283,"oldContent":"            "},{"type":"DELETE","lineNumber":286,"oldContent":"            if (walkablePositions.Count > 0)"},{"type":"DELETE","lineNumber":289,"oldContent":"            {"},{"type":"DELETE","lineNumber":291,"oldContent":"                var random = new System.Random();"},{"type":"INSERT","lineNumber":224,"content":"                int nx = x + dx[i];"},{"type":"INSERT","lineNumber":225,"content":"                int ny = y + dy[i];"},{"type":"INSERT","lineNumber":226,"content":"                "},{"type":"INSERT","lineNumber":227,"content":"                if (IsWalkable(nx, ny))"},{"type":"INSERT","lineNumber":228,"content":"                {"},{"type":"INSERT","lineNumber":229,"content":"                    neighbors.Add(Tiles[nx, ny]);"},{"type":"INSERT","lineNumber":230,"content":"                }"},{"type":"INSERT","lineNumber":231,"content":"            }"},{"type":"INSERT","lineNumber":232,"content":"            "},{"type":"INSERT","lineNumber":233,"content":"            return neighbors;"},{"type":"INSERT","lineNumber":234,"content":"        }"},{"type":"INSERT","lineNumber":235,"content":""},{"type":"INSERT","lineNumber":236,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":237,"content":"        /// Ottiene tutti i vicini di una tile (inclusi i muri)"},{"type":"INSERT","lineNumber":238,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":239,"content":"        public List<Tile> GetAllNeighbors(int x, int y)"},{"type":"INSERT","lineNumber":240,"content":"        {"},{"type":"INSERT","lineNumber":241,"content":"            var neighbors = new List<Tile>();"},{"type":"INSERT","lineNumber":242,"content":"            "},{"type":"INSERT","lineNumber":243,"content":"            for (int dx = -1; dx <= 1; dx++)"},{"type":"INSERT","lineNumber":244,"content":"            {"},{"type":"INSERT","lineNumber":245,"content":"                for (int dy = -1; dy <= 1; dy++)"},{"type":"INSERT","lineNumber":246,"content":"                {"},{"type":"INSERT","lineNumber":247,"content":"                    if (dx == 0 && dy == 0) continue; // Skip la tile centrale"},{"type":"INSERT","lineNumber":248,"content":"                    "},{"type":"INSERT","lineNumber":249,"content":"                    int nx = x + dx;"},{"type":"INSERT","lineNumber":250,"content":"                    int ny = y + dy;"},{"type":"INSERT","lineNumber":251,"content":"                    "},{"type":"INSERT","lineNumber":252,"content":"                    if (IsValidPosition(nx, ny))"},{"type":"INSERT","lineNumber":253,"content":"                    {"},{"type":"INSERT","lineNumber":254,"content":"                        neighbors.Add(Tiles[nx, ny]);"},{"type":"INSERT","lineNumber":255,"content":"                    }"},{"type":"INSERT","lineNumber":256,"content":"                }"},{"type":"INSERT","lineNumber":257,"content":"            }"},{"type":"INSERT","lineNumber":258,"content":"            "},{"type":"INSERT","lineNumber":259,"content":"            return neighbors;"},{"type":"INSERT","lineNumber":260,"content":"        }"},{"type":"INSERT","lineNumber":261,"content":""},{"type":"INSERT","lineNumber":262,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":263,"content":"        /// Trova il percorso più breve tra due stanze"},{"type":"INSERT","lineNumber":264,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":265,"content":"        public List<Vector2> FindPathBetweenRooms(Room roomA, Room roomB)"},{"type":"INSERT","lineNumber":266,"content":"        {"},{"type":"INSERT","lineNumber":267,"content":"            if (roomA == null || roomB == null) return new List<Vector2>();"},{"type":"INSERT","lineNumber":268,"content":""},{"type":"INSERT","lineNumber":269,"content":"            // Usa i centri delle stanze come punti di partenza e arrivo"},{"type":"INSERT","lineNumber":270,"content":"            Vector2 startPoint = roomA.Center;"},{"type":"INSERT","lineNumber":271,"content":"            Vector2 endPoint = roomB.Center;"},{"type":"INSERT","lineNumber":272,"content":""},{"type":"INSERT","lineNumber":273,"content":"            // Implementazione semplificata - in una versione completa useresti A*"},{"type":"INSERT","lineNumber":274,"content":"            var path = new List<Vector2> { startPoint, endPoint };"},{"type":"INSERT","lineNumber":275,"content":"            return path;"},{"type":"INSERT","lineNumber":276,"content":"        }"},{"type":"INSERT","lineNumber":277,"content":""},{"type":"INSERT","lineNumber":278,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":279,"content":"        /// Ottiene una posizione casuale camminabile nel dungeon"},{"type":"INSERT","lineNumber":280,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":281,"content":"        public Vector2? GetRandomWalkablePosition()"},{"type":"INSERT","lineNumber":282,"content":"        {"},{"type":"INSERT","lineNumber":283,"content":"            var walkablePositions = new List<Vector2>();"},{"type":"INSERT","lineNumber":284,"content":"            "},{"type":"INSERT","lineNumber":285,"content":"            for (int x = 0; x < Width; x++)"},{"type":"INSERT","lineNumber":286,"content":"            {"},{"type":"INSERT","lineNumber":287,"content":"                for (int y = 0; y < Height; y++)"},{"type":"INSERT","lineNumber":288,"content":"                {"},{"type":"INSERT","lineNumber":289,"content":"                    if (IsWalkable(x, y))"},{"type":"INSERT","lineNumber":290,"content":"                    {"},{"type":"INSERT","lineNumber":291,"content":"                        walkablePositions.Add(new Vector2(x, y));"},{"type":"INSERT","lineNumber":292,"content":"                    }"},{"type":"INSERT","lineNumber":293,"content":"                }"},{"type":"INSERT","lineNumber":294,"content":"            }"},{"type":"INSERT","lineNumber":295,"content":"            "},{"type":"INSERT","lineNumber":296,"content":"            if (walkablePositions.Count > 0)"},{"type":"INSERT","lineNumber":297,"content":"            {"},{"type":"INSERT","lineNumber":298,"content":"                var random = new System.Random();"},{"type":"DELETE","lineNumber":302,"oldContent":"        /// Ottiene tutti i vicini di una tile (inclusi i muri)"},{"type":"DELETE","lineNumber":308,"oldContent":"            {"},{"type":"DELETE","lineNumber":321,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":326,"oldContent":""},{"type":"DELETE","lineNumber":328,"oldContent":"            Vector2 startPoint = roomA.Center;"},{"type":"DELETE","lineNumber":333,"oldContent":"        }"},{"type":"INSERT","lineNumber":350,"content":"                "},{"type":"INSERT","lineNumber":367,"content":"            "},{"type":"INSERT","lineNumber":373,"content":"                {"},{"type":"INSERT","lineNumber":382,"content":"            }"},{"type":"DELETE","lineNumber":382,"oldContent":"                "},{"type":"INSERT","lineNumber":390,"content":"                }"},{"type":"DELETE","lineNumber":395,"oldContent":"            "},{"type":"DELETE","lineNumber":399,"oldContent":"                {"},{"type":"DELETE","lineNumber":406,"oldContent":"            }"},{"type":"DELETE","lineNumber":413,"oldContent":"                }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Data/GameData.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Data/GameData.cs","baseContent":"namespace DungeonExplorer.Data;\n\npublic class GameData\n{\n    \n}","baseTimestamp":1756229326626,"deltas":[{"timestamp":1756230713812,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using Microsoft.Xna.Framework;","oldContent":"namespace DungeonExplorer.Data;"},{"type":"INSERT","lineNumber":1,"content":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class GameData"},{"type":"INSERT","lineNumber":3,"content":"namespace DungeonExplorer.Data"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":5,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":6,"content":"    /// Contiene i dati necessari per salvare e caricare una partita."},{"type":"INSERT","lineNumber":7,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":8,"content":"    public class GameData"},{"type":"INSERT","lineNumber":9,"content":"    {"},{"type":"INSERT","lineNumber":10,"content":"        public Vector2 PlayerPosition { get; set; }"},{"type":"INSERT","lineNumber":11,"content":"        public int PlayerHealth { get; set; }"},{"type":"INSERT","lineNumber":12,"content":"        public int Score { get; set; }"},{"type":"INSERT","lineNumber":13,"content":"        public int TreasuresCollected { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        public int DungeonSeed { get; set; }"},{"type":"INSERT","lineNumber":15,"content":"        public List<Vector2> EnemyPositions { get; set; }"},{"type":"INSERT","lineNumber":16,"content":"        public List<Vector2> TreasurePositions { get; set; }"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":"        public GameData()"},{"type":"INSERT","lineNumber":19,"content":"        {"},{"type":"INSERT","lineNumber":20,"content":"            EnemyPositions = new List<Vector2>();"},{"type":"INSERT","lineNumber":21,"content":"            TreasurePositions = new List<Vector2>();"},{"type":"INSERT","lineNumber":22,"content":"        }"},{"type":"INSERT","lineNumber":23,"content":"    }"}]}]},"/Dummy.conventionalcommit":{"filePath":"/Dummy.conventionalcommit","baseContent":"feat: first commit","baseTimestamp":1756229679931,"deltas":[{"timestamp":1756229779959,"changes":[{"type":"MODIFY","lineNumber":0,"content":"","oldContent":"feat: first commit"}]},{"timestamp":1756230856732,"changes":[{"type":"MODIFY","lineNumber":0,"content":"feat: ","oldContent":""}]},{"timestamp":1756230866765,"changes":[{"type":"MODIFY","lineNumber":0,"content":"feat: need some things","oldContent":"feat: "}]},{"timestamp":1756230874814,"changes":[{"type":"MODIFY","lineNumber":0,"content":"","oldContent":"feat: need some things"}]},{"timestamp":1756231429628,"changes":[{"type":"MODIFY","lineNumber":0,"content":"feat: final code, need only assets","oldContent":""}]}]},"/terminal_output":{"filePath":"/terminal_output","baseContent":"Windows PowerShell\nCopyright (C) Microsoft Corporation. Tutti i diritti riservati.\n\nInstalla la versione più recente di PowerShell per nuove funzionalità e miglioramenti. https://aka.ms/PSWindows\n\nPS C:\\Users\\tagli\\RiderProjects\\DungeonExplorer> \n\n\n\n\n\n\n\n\n","baseTimestamp":1756229755099},"C:/Users/tagli/RiderProjects/DungeonExplorer/World/DungeonGenerator.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/World/DungeonGenerator.cs","baseContent":"namespace DungeonExplorer.World;\n\npublic class DungeonGenerator\n{\n    \n}","baseTimestamp":1756229948413,"deltas":[{"timestamp":1756229974749,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.World;"},{"type":"INSERT","lineNumber":1,"content":"// DungeonGenerator.cs - Generates random dungeons"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"INSERT","lineNumber":5,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":6,"content":"using System.Linq;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class DungeonGenerator"},{"type":"INSERT","lineNumber":8,"content":"namespace DungeonExplorer.World"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":10,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":11,"content":"    /// Generates random dungeons using various algorithms"},{"type":"INSERT","lineNumber":12,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":13,"content":"    public class DungeonGenerator"},{"type":"INSERT","lineNumber":14,"content":"    {"},{"type":"INSERT","lineNumber":15,"content":"        public int LastSeed { get; private set; }"},{"type":"INSERT","lineNumber":16,"content":"        private Random _random;"},{"type":"INSERT","lineNumber":17,"content":"        "},{"type":"INSERT","lineNumber":18,"content":"        // Generation parameters"},{"type":"INSERT","lineNumber":19,"content":"        public int MinRoomSize { get; set; } = 4;"},{"type":"INSERT","lineNumber":20,"content":"        public int MaxRoomSize { get; set; } = 12;"},{"type":"INSERT","lineNumber":21,"content":"        public int MaxAttempts { get; set; } = 100;"},{"type":"INSERT","lineNumber":22,"content":"        public float RoomDensity { get; set; } = 0.3f; // Percentage of dungeon that should be rooms"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"        public DungeonGenerator()"},{"type":"INSERT","lineNumber":25,"content":"        {"},{"type":"INSERT","lineNumber":26,"content":"            LastSeed = Environment.TickCount;"},{"type":"INSERT","lineNumber":27,"content":"            _random = new Random(LastSeed);"},{"type":"INSERT","lineNumber":28,"content":"        }"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":31,"content":"        /// Generates a new dungeon with the specified parameters"},{"type":"INSERT","lineNumber":32,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":33,"content":"        public Dungeon Generate(int width, int height, int minRooms, int maxRooms, int? seed = null)"},{"type":"INSERT","lineNumber":34,"content":"        {"},{"type":"INSERT","lineNumber":35,"content":"            if (seed.HasValue)"},{"type":"INSERT","lineNumber":36,"content":"            {"},{"type":"INSERT","lineNumber":37,"content":"                LastSeed = seed.Value;"},{"type":"INSERT","lineNumber":38,"content":"                _random = new Random(LastSeed);"},{"type":"INSERT","lineNumber":39,"content":"            }"},{"type":"INSERT","lineNumber":40,"content":"            else"},{"type":"INSERT","lineNumber":41,"content":"            {"},{"type":"INSERT","lineNumber":42,"content":"                LastSeed = Environment.TickCount;"},{"type":"INSERT","lineNumber":43,"content":"                _random = new Random(LastSeed);"},{"type":"INSERT","lineNumber":44,"content":"            }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"            var dungeon = new Dungeon(width, height);"},{"type":"INSERT","lineNumber":47,"content":"            "},{"type":"INSERT","lineNumber":48,"content":"            // Generate rooms"},{"type":"INSERT","lineNumber":49,"content":"            var rooms = GenerateRooms(width, height, minRooms, maxRooms);"},{"type":"INSERT","lineNumber":50,"content":"            "},{"type":"INSERT","lineNumber":51,"content":"            // Add rooms to dungeon"},{"type":"INSERT","lineNumber":52,"content":"            foreach (var room in rooms)"},{"type":"INSERT","lineNumber":53,"content":"            {"},{"type":"INSERT","lineNumber":54,"content":"                dungeon.AddRoom(room);"},{"type":"INSERT","lineNumber":55,"content":"            }"},{"type":"INSERT","lineNumber":56,"content":"            "},{"type":"INSERT","lineNumber":57,"content":"            // Connect rooms with corridors"},{"type":"INSERT","lineNumber":58,"content":"            ConnectRooms(dungeon, rooms);"},{"type":"INSERT","lineNumber":59,"content":"            "},{"type":"INSERT","lineNumber":60,"content":"            // Set start and end positions"},{"type":"INSERT","lineNumber":61,"content":"            SetStartAndEndPositions(dungeon, rooms);"},{"type":"INSERT","lineNumber":62,"content":"            "},{"type":"INSERT","lineNumber":63,"content":"            // Add doors"},{"type":"INSERT","lineNumber":64,"content":"            dungeon.AddDoors();"},{"type":"INSERT","lineNumber":65,"content":"            "},{"type":"INSERT","lineNumber":66,"content":"            return dungeon;"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":70,"content":"        /// Generates a list of non-overlapping rooms"},{"type":"INSERT","lineNumber":71,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":72,"content":"        private List<Room> GenerateRooms(int dungeonWidth, int dungeonHeight, int minRooms, int maxRooms)"},{"type":"INSERT","lineNumber":73,"content":"        {"},{"type":"INSERT","lineNumber":74,"content":"            var rooms = new List<Room>();"},{"type":"INSERT","lineNumber":75,"content":"            int roomCount = _random.Next(minRooms, maxRooms + 1);"},{"type":"INSERT","lineNumber":76,"content":"            int attempts = 0;"},{"type":"INSERT","lineNumber":77,"content":"            int maxTotalAttempts = MaxAttempts * roomCount;"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"            while (rooms.Count < roomCount && attempts < maxTotalAttempts)"},{"type":"INSERT","lineNumber":80,"content":"            {"},{"type":"INSERT","lineNumber":81,"content":"                attempts++;"},{"type":"INSERT","lineNumber":82,"content":"                "},{"type":"INSERT","lineNumber":83,"content":"                // Generate random room dimensions"},{"type":"INSERT","lineNumber":84,"content":"                int width = _random.Next(MinRoomSize, MaxRoomSize + 1);"},{"type":"INSERT","lineNumber":85,"content":"                int height = _random.Next(MinRoomSize, MaxRoomSize + 1);"},{"type":"INSERT","lineNumber":86,"content":"                "},{"type":"INSERT","lineNumber":87,"content":"                // Generate random position"},{"type":"INSERT","lineNumber":88,"content":"                int x = _random.Next(1, dungeonWidth - width - 1);"},{"type":"INSERT","lineNumber":89,"content":"                int y = _random.Next(1, dungeonHeight - height - 1);"},{"type":"INSERT","lineNumber":90,"content":"                "},{"type":"INSERT","lineNumber":91,"content":"                var newRoom = new Room(x, y, width, height, rooms.Count);"},{"type":"INSERT","lineNumber":92,"content":"                "},{"type":"INSERT","lineNumber":93,"content":"                // Check if room overlaps with existing rooms"},{"type":"INSERT","lineNumber":94,"content":"                bool overlaps = false;"},{"type":"INSERT","lineNumber":95,"content":"                foreach (var existingRoom in rooms)"},{"type":"INSERT","lineNumber":96,"content":"                {"},{"type":"INSERT","lineNumber":97,"content":"                    if (newRoom.OverlapsWithBuffer(existingRoom, 2)) // 2 tile buffer between rooms"},{"type":"INSERT","lineNumber":98,"content":"                    {"},{"type":"INSERT","lineNumber":99,"content":"                        overlaps = true;"},{"type":"INSERT","lineNumber":100,"content":"                        break;"},{"type":"INSERT","lineNumber":101,"content":"                    }"},{"type":"INSERT","lineNumber":102,"content":"                }"},{"type":"INSERT","lineNumber":103,"content":"                "},{"type":"INSERT","lineNumber":104,"content":"                if (!overlaps)"},{"type":"INSERT","lineNumber":105,"content":"                {"},{"type":"INSERT","lineNumber":106,"content":"                    rooms.Add(newRoom);"},{"type":"INSERT","lineNumber":107,"content":"                }"},{"type":"INSERT","lineNumber":108,"content":"            }"},{"type":"INSERT","lineNumber":109,"content":"            "},{"type":"INSERT","lineNumber":110,"content":"            // Ensure we have at least one room"},{"type":"INSERT","lineNumber":111,"content":"            if (rooms.Count == 0)"},{"type":"INSERT","lineNumber":112,"content":"            {"},{"type":"INSERT","lineNumber":113,"content":"                // Create a fallback room in the center"},{"type":"INSERT","lineNumber":114,"content":"                int centerX = dungeonWidth / 2 - 3;"},{"type":"INSERT","lineNumber":115,"content":"                int centerY = dungeonHeight / 2 - 3;"},{"type":"INSERT","lineNumber":116,"content":"                rooms.Add(new Room(centerX, centerY, 6, 6, 0));"},{"type":"INSERT","lineNumber":117,"content":"            }"},{"type":"INSERT","lineNumber":118,"content":"            "},{"type":"INSERT","lineNumber":119,"content":"            return rooms;"},{"type":"INSERT","lineNumber":120,"content":"        }"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":123,"content":"        /// Connects all rooms with corridors using a minimum spanning tree approach"},{"type":"INSERT","lineNumber":124,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":125,"content":"        private void ConnectRooms(Dungeon dungeon, List<Room> rooms)"},{"type":"INSERT","lineNumber":126,"content":"        {"},{"type":"INSERT","lineNumber":127,"content":"            if (rooms.Count <= 1) return;"},{"type":"INSERT","lineNumber":128,"content":"            "},{"type":"INSERT","lineNumber":129,"content":"            var connectedRooms = new HashSet<Room> { rooms[0] };"},{"type":"INSERT","lineNumber":130,"content":"            var unconnectedRooms = new HashSet<Room>(rooms.Skip(1));"},{"type":"INSERT","lineNumber":131,"content":"            "},{"type":"INSERT","lineNumber":132,"content":"            while (unconnectedRooms.Count > 0)"},{"type":"INSERT","lineNumber":133,"content":"            {"},{"type":"INSERT","lineNumber":134,"content":"                Room closestConnected = null;"},{"type":"INSERT","lineNumber":135,"content":"                Room closestUnconnected = null;"},{"type":"INSERT","lineNumber":136,"content":"                float shortestDistance = float.MaxValue;"},{"type":"INSERT","lineNumber":137,"content":"                "},{"type":"INSERT","lineNumber":138,"content":"                // Find the shortest connection between connected and unconnected rooms"},{"type":"INSERT","lineNumber":139,"content":"                foreach (var connected in connectedRooms)"},{"type":"INSERT","lineNumber":140,"content":"                {"},{"type":"INSERT","lineNumber":141,"content":"                    foreach (var unconnected in unconnectedRooms)"},{"type":"INSERT","lineNumber":142,"content":"                    {"},{"type":"INSERT","lineNumber":143,"content":"                        float distance = connected.DistanceTo(unconnected);"},{"type":"INSERT","lineNumber":144,"content":"                        if (distance < shortestDistance)"},{"type":"INSERT","lineNumber":145,"content":"                        {"},{"type":"INSERT","lineNumber":146,"content":"                            shortestDistance = distance;"},{"type":"INSERT","lineNumber":147,"content":"                            closestConnected = connected;"},{"type":"INSERT","lineNumber":148,"content":"                            closestUnconnected = unconnected;"},{"type":"INSERT","lineNumber":149,"content":"                        }"},{"type":"INSERT","lineNumber":150,"content":"                    }"},{"type":"INSERT","lineNumber":151,"content":"                }"},{"type":"INSERT","lineNumber":152,"content":"                "},{"type":"INSERT","lineNumber":153,"content":"                // Create corridor between the closest rooms"},{"type":"INSERT","lineNumber":154,"content":"                if (closestConnected != null && closestUnconnected != null)"},{"type":"INSERT","lineNumber":155,"content":"                {"},{"type":"INSERT","lineNumber":156,"content":"                    CreateCorridor(dungeon, closestConnected, closestUnconnected);"},{"type":"INSERT","lineNumber":157,"content":"                    connectedRooms.Add(closestUnconnected);"},{"type":"INSERT","lineNumber":158,"content":"                    unconnectedRooms.Remove(closestUnconnected);"},{"type":"INSERT","lineNumber":159,"content":"                }"},{"type":"INSERT","lineNumber":160,"content":"            }"},{"type":"INSERT","lineNumber":161,"content":"            "},{"type":"INSERT","lineNumber":162,"content":"            // Add some extra connections for more interesting layouts"},{"type":"INSERT","lineNumber":163,"content":"            AddExtraConnections(dungeon, rooms);"},{"type":"INSERT","lineNumber":164,"content":"        }"},{"type":"INSERT","lineNumber":165,"content":""},{"type":"INSERT","lineNumber":166,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":167,"content":"        /// Adds additional corridors to create loops and alternative paths"},{"type":"INSERT","lineNumber":168,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":169,"content":"        private void AddExtraConnections(Dungeon dungeon, List<Room> rooms)"},{"type":"INSERT","lineNumber":170,"content":"        {"},{"type":"INSERT","lineNumber":171,"content":"            int extraConnections = Math.Max(1, rooms.Count / 4); // 25% more connections"},{"type":"INSERT","lineNumber":172,"content":"            "},{"type":"INSERT","lineNumber":173,"content":"            for (int i = 0; i < extraConnections; i++)"},{"type":"INSERT","lineNumber":174,"content":"            {"},{"type":"INSERT","lineNumber":175,"content":"                var room1 = rooms[_random.Next(rooms.Count)];"},{"type":"INSERT","lineNumber":176,"content":"                var room2 = rooms[_random.Next(rooms.Count)];"},{"type":"INSERT","lineNumber":177,"content":"                "},{"type":"INSERT","lineNumber":178,"content":"                if (room1 != room2 && room1.DistanceTo(room2) < 20) // Only connect nearby rooms"},{"type":"INSERT","lineNumber":179,"content":"                {"},{"type":"INSERT","lineNumber":180,"content":"                    CreateCorridor(dungeon, room1, room2);"},{"type":"INSERT","lineNumber":181,"content":"                }"},{"type":"INSERT","lineNumber":182,"content":"            }"},{"type":"INSERT","lineNumber":183,"content":"        }"},{"type":"INSERT","lineNumber":184,"content":""},{"type":"INSERT","lineNumber":185,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":186,"content":"        /// Creates an L-shaped corridor between two rooms"},{"type":"INSERT","lineNumber":187,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":188,"content":"        private void CreateCorridor(Dungeon dungeon, Room room1, Room room2)"},{"type":"INSERT","lineNumber":189,"content":"        {"},{"type":"INSERT","lineNumber":190,"content":"            var start = room1.GetClosestPointTo(room2);"},{"type":"INSERT","lineNumber":191,"content":"            var end = room2.GetClosestPointTo(room1);"},{"type":"INSERT","lineNumber":192,"content":"            "},{"type":"INSERT","lineNumber":193,"content":"            // Choose random direction for the L-shape (horizontal first or vertical first)"},{"type":"INSERT","lineNumber":194,"content":"            if (_random.Next(2) == 0)"},{"type":"INSERT","lineNumber":195,"content":"            {"},{"type":"INSERT","lineNumber":196,"content":"                // Horizontal first, then vertical"},{"type":"INSERT","lineNumber":197,"content":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)start.Y, (int)end.X, (int)start.Y);"},{"type":"INSERT","lineNumber":198,"content":"                dungeon.CreateCorridorBetweenPoints((int)end.X, (int)start.Y, (int)end.X, (int)end.Y);"},{"type":"INSERT","lineNumber":199,"content":"            }"},{"type":"INSERT","lineNumber":200,"content":"            else"},{"type":"INSERT","lineNumber":201,"content":"            {"},{"type":"INSERT","lineNumber":202,"content":"                // Vertical first, then horizontal"},{"type":"INSERT","lineNumber":203,"content":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)start.Y, (int)start.X, (int)end.Y);"},{"type":"INSERT","lineNumber":204,"content":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)end.Y, (int)end.X, (int)end.Y);"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":"            "},{"type":"INSERT","lineNumber":207,"content":"            // Mark connection points"},{"type":"INSERT","lineNumber":208,"content":"            room1.AddConnection(start);"},{"type":"INSERT","lineNumber":209,"content":"            room2.AddConnection(end);"},{"type":"INSERT","lineNumber":210,"content":"        }"},{"type":"INSERT","lineNumber":211,"content":""},{"type":"INSERT","lineNumber":212,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":213,"content":"        /// Sets the start position in the first room and end position in the last room"},{"type":"INSERT","lineNumber":214,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":215,"content":"        private void SetStartAndEndPositions(Dungeon dungeon, List<Room> rooms)"},{"type":"INSERT","lineNumber":216,"content":"        {"},{"type":"INSERT","lineNumber":217,"content":"            if (rooms.Count == 0) return;"},{"type":"INSERT","lineNumber":218,"content":"            "},{"type":"INSERT","lineNumber":219,"content":"            // Start position in the first room"},{"type":"INSERT","lineNumber":220,"content":"            var startRoom = rooms[0];"},{"type":"INSERT","lineNumber":221,"content":"            startRoom.Type = RoomType.StartRoom;"},{"type":"INSERT","lineNumber":222,"content":"            dungeon.SetStartPosition(startRoom.GetRandomPosition());"},{"type":"INSERT","lineNumber":223,"content":"            "},{"type":"INSERT","lineNumber":224,"content":"            // End position in the room farthest from start"},{"type":"INSERT","lineNumber":225,"content":"            if (rooms.Count > 1)"},{"type":"INSERT","lineNumber":226,"content":"            {"},{"type":"INSERT","lineNumber":227,"content":"                Room endRoom = rooms[1];"},{"type":"INSERT","lineNumber":228,"content":"                float maxDistance = 0;"},{"type":"INSERT","lineNumber":229,"content":"                "},{"type":"INSERT","lineNumber":230,"content":"                foreach (var room in rooms.Skip(1))"},{"type":"INSERT","lineNumber":231,"content":"                {"},{"type":"INSERT","lineNumber":232,"content":"                    float distance = startRoom.DistanceTo(room);"},{"type":"INSERT","lineNumber":233,"content":"                    if (distance > maxDistance)"},{"type":"INSERT","lineNumber":234,"content":"                    {"},{"type":"INSERT","lineNumber":235,"content":"                        maxDistance = distance;"},{"type":"INSERT","lineNumber":236,"content":"                        endRoom = room;"},{"type":"INSERT","lineNumber":237,"content":"                    }"},{"type":"INSERT","lineNumber":238,"content":"                }"},{"type":"INSERT","lineNumber":239,"content":"                "},{"type":"INSERT","lineNumber":240,"content":"                endRoom.Type = RoomType.EndRoom;"},{"type":"INSERT","lineNumber":241,"content":"                dungeon.SetEndPosition(endRoom.GetRandomPosition());"},{"type":"INSERT","lineNumber":242,"content":"            }"},{"type":"INSERT","lineNumber":243,"content":"        }"},{"type":"INSERT","lineNumber":244,"content":""},{"type":"INSERT","lineNumber":245,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":246,"content":"        /// Generates a dungeon using cellular automata (for more organic caves)"},{"type":"INSERT","lineNumber":247,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":248,"content":"        public Dungeon GenerateCavelike(int width, int height, float wallProbability = 0.45f, int iterations = 5)"},{"type":"INSERT","lineNumber":249,"content":"        {"},{"type":"INSERT","lineNumber":250,"content":"            var dungeon = new Dungeon(width, height);"},{"type":"INSERT","lineNumber":251,"content":"            "},{"type":"INSERT","lineNumber":252,"content":"            // Initialize with random walls"},{"type":"INSERT","lineNumber":253,"content":"            for (int x = 0; x < width; x++)"},{"type":"INSERT","lineNumber":254,"content":"            {"},{"type":"INSERT","lineNumber":255,"content":"                for (int y = 0; y < height; y++)"},{"type":"INSERT","lineNumber":256,"content":"                {"},{"type":"INSERT","lineNumber":257,"content":"                    if (x == 0 || x == width - 1 || y == 0 || y == height - 1)"},{"type":"INSERT","lineNumber":258,"content":"                    {"},{"type":"INSERT","lineNumber":259,"content":"                        // Keep borders as walls"},{"type":"INSERT","lineNumber":260,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":261,"content":"                    }"},{"type":"INSERT","lineNumber":262,"content":"                    else if (_random.NextDouble() < wallProbability)"},{"type":"INSERT","lineNumber":263,"content":"                    {"},{"type":"INSERT","lineNumber":264,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":265,"content":"                    }"},{"type":"INSERT","lineNumber":266,"content":"                    else"},{"type":"INSERT","lineNumber":267,"content":"                    {"},{"type":"INSERT","lineNumber":268,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":269,"content":"                    }"},{"type":"INSERT","lineNumber":270,"content":"                }"},{"type":"INSERT","lineNumber":271,"content":"            }"},{"type":"INSERT","lineNumber":272,"content":"            "},{"type":"INSERT","lineNumber":273,"content":"            // Apply cellular automata rules"},{"type":"INSERT","lineNumber":274,"content":"            for (int iteration = 0; iteration < iterations; iteration++)"},{"type":"INSERT","lineNumber":275,"content":"            {"},{"type":"INSERT","lineNumber":276,"content":"                ApplyCellularAutomataRules(dungeon);"},{"type":"INSERT","lineNumber":277,"content":"            }"},{"type":"INSERT","lineNumber":278,"content":"            "},{"type":"INSERT","lineNumber":279,"content":"            // Find and connect the largest open areas"},{"type":"INSERT","lineNumber":280,"content":"            var openAreas = FindOpenAreas(dungeon);"},{"type":"INSERT","lineNumber":281,"content":"            if (openAreas.Count > 0)"},{"type":"INSERT","lineNumber":282,"content":"            {"},{"type":"INSERT","lineNumber":283,"content":"                ConnectOpenAreas(dungeon, openAreas);"},{"type":"INSERT","lineNumber":284,"content":"                "},{"type":"INSERT","lineNumber":285,"content":"                // Set start and end positions"},{"type":"INSERT","lineNumber":286,"content":"                var startArea = openAreas[0];"},{"type":"INSERT","lineNumber":287,"content":"                var endArea = openAreas[openAreas.Count - 1];"},{"type":"INSERT","lineNumber":288,"content":"                "},{"type":"INSERT","lineNumber":289,"content":"                dungeon.SetStartPosition(GetRandomPositionInArea(startArea));"},{"type":"INSERT","lineNumber":290,"content":"                dungeon.SetEndPosition(GetRandomPositionInArea(endArea));"},{"type":"INSERT","lineNumber":291,"content":"            }"},{"type":"INSERT","lineNumber":292,"content":"            "},{"type":"INSERT","lineNumber":293,"content":"            return dungeon;"},{"type":"INSERT","lineNumber":294,"content":"        }"},{"type":"INSERT","lineNumber":295,"content":""},{"type":"INSERT","lineNumber":296,"content":"        private void ApplyCellularAutomataRules(Dungeon dungeon)"},{"type":"INSERT","lineNumber":297,"content":"        {"},{"type":"INSERT","lineNumber":298,"content":"            var newTiles = new Tile[dungeon.Width, dungeon.Height];"},{"type":"INSERT","lineNumber":299,"content":"            "},{"type":"INSERT","lineNumber":300,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":301,"content":"            {"},{"type":"INSERT","lineNumber":302,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":303,"content":"                {"},{"type":"INSERT","lineNumber":304,"content":"                    int neighborWalls = CountNeighborWalls(dungeon, x, y);"},{"type":"INSERT","lineNumber":305,"content":"                    "},{"type":"INSERT","lineNumber":306,"content":"                    if (neighborWalls > 4)"},{"type":"INSERT","lineNumber":307,"content":"                    {"},{"type":"INSERT","lineNumber":308,"content":"                        newTiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":309,"content":"                    }"},{"type":"INSERT","lineNumber":310,"content":"                    else"},{"type":"INSERT","lineNumber":311,"content":"                    {"},{"type":"INSERT","lineNumber":312,"content":"                        newTiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":313,"content":"                    }"},{"type":"INSERT","lineNumber":314,"content":"                }"},{"type":"INSERT","lineNumber":315,"content":"            }"},{"type":"INSERT","lineNumber":316,"content":"            "},{"type":"INSERT","lineNumber":317,"content":"            dungeon.Tiles = newTiles;"},{"type":"INSERT","lineNumber":318,"content":"        }"},{"type":"INSERT","lineNumber":319,"content":""},{"type":"INSERT","lineNumber":320,"content":"        private int CountNeighborWalls(Dungeon dungeon, int x, int y)"},{"type":"INSERT","lineNumber":321,"content":"        {"},{"type":"INSERT","lineNumber":322,"content":"            int wallCount = 0;"},{"type":"INSERT","lineNumber":323,"content":"            "},{"type":"INSERT","lineNumber":324,"content":"            for (int nx = x - 1; nx <= x + 1; nx++)"},{"type":"INSERT","lineNumber":325,"content":"            {"},{"type":"INSERT","lineNumber":326,"content":"                for (int ny = y - 1; ny <= y + 1; ny++)"},{"type":"INSERT","lineNumber":327,"content":"                {"},{"type":"INSERT","lineNumber":328,"content":"                    if (nx == x && ny == y) continue;"},{"type":"INSERT","lineNumber":329,"content":"                    "},{"type":"INSERT","lineNumber":330,"content":"                    if (!dungeon.IsValidPosition(nx, ny) || dungeon.Tiles[nx, ny].Type == TileType.Wall)"},{"type":"INSERT","lineNumber":331,"content":"                    {"},{"type":"INSERT","lineNumber":332,"content":"                        wallCount++;"},{"type":"INSERT","lineNumber":333,"content":"                    }"},{"type":"INSERT","lineNumber":334,"content":"                }"},{"type":"INSERT","lineNumber":335,"content":"            }"},{"type":"INSERT","lineNumber":336,"content":"            "},{"type":"INSERT","lineNumber":337,"content":"            return wallCount;"},{"type":"INSERT","lineNumber":338,"content":"        }"},{"type":"INSERT","lineNumber":339,"content":""},{"type":"INSERT","lineNumber":340,"content":"        private List<List<Vector2>> FindOpenAreas(Dungeon dungeon)"},{"type":"INSERT","lineNumber":341,"content":"        {"},{"type":"INSERT","lineNumber":342,"content":"            var visited = new bool[dungeon.Width, dungeon.Height];"},{"type":"INSERT","lineNumber":343,"content":"            var areas = new List<List<Vector2>>();"},{"type":"INSERT","lineNumber":344,"content":"            "},{"type":"INSERT","lineNumber":345,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":346,"content":"            {"},{"type":"INSERT","lineNumber":347,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":348,"content":"                {"},{"type":"INSERT","lineNumber":349,"content":"                    if (!visited[x, y] && dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":350,"content":"                    {"},{"type":"INSERT","lineNumber":351,"content":"                        var area = FloodFill(dungeon, x, y, visited);"},{"type":"INSERT","lineNumber":352,"content":"                        if (area.Count > 10) // Only keep areas with at least 10 tiles"},{"type":"INSERT","lineNumber":353,"content":"                        {"},{"type":"INSERT","lineNumber":354,"content":"                            areas.Add(area);"},{"type":"INSERT","lineNumber":355,"content":"                        }"},{"type":"INSERT","lineNumber":356,"content":"                    }"},{"type":"INSERT","lineNumber":357,"content":"                }"},{"type":"INSERT","lineNumber":358,"content":"            }"},{"type":"INSERT","lineNumber":359,"content":"            "},{"type":"INSERT","lineNumber":360,"content":"            // Sort areas by size (largest first)"},{"type":"INSERT","lineNumber":361,"content":"            areas.Sort((a, b) => b.Count.CompareTo(a.Count));"},{"type":"INSERT","lineNumber":362,"content":"            "},{"type":"INSERT","lineNumber":363,"content":"            return areas;"},{"type":"INSERT","lineNumber":364,"content":"        }"},{"type":"INSERT","lineNumber":365,"content":""},{"type":"INSERT","lineNumber":366,"content":"        private List<Vector2> FloodFill(Dungeon dungeon, int startX, int startY, bool[,] visited)"},{"type":"INSERT","lineNumber":367,"content":"        {"},{"type":"INSERT","lineNumber":368,"content":"            var area = new List<Vector2>();"},{"type":"INSERT","lineNumber":369,"content":"            var stack = new Stack<Vector2>();"},{"type":"INSERT","lineNumber":370,"content":"            stack.Push(new Vector2(startX, startY));"},{"type":"INSERT","lineNumber":371,"content":"            "},{"type":"INSERT","lineNumber":372,"content":"            while (stack.Count > 0)"},{"type":"INSERT","lineNumber":373,"content":"            {"},{"type":"INSERT","lineNumber":374,"content":"                var current = stack.Pop();"},{"type":"INSERT","lineNumber":375,"content":"                int x = (int)current.X;"},{"type":"INSERT","lineNumber":376,"content":"                int y = (int)current.Y;"},{"type":"INSERT","lineNumber":377,"content":"                "},{"type":"INSERT","lineNumber":378,"content":"                if (visited[x, y] || !dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":379,"content":"                    continue;"},{"type":"INSERT","lineNumber":380,"content":"                "},{"type":"INSERT","lineNumber":381,"content":"                visited[x, y] = true;"},{"type":"INSERT","lineNumber":382,"content":"                area.Add(current);"},{"type":"INSERT","lineNumber":383,"content":"                "},{"type":"INSERT","lineNumber":384,"content":"                // Add neighbors"},{"type":"INSERT","lineNumber":385,"content":"                for (int dx = -1; dx <= 1; dx++)"},{"type":"INSERT","lineNumber":386,"content":"                {"},{"type":"INSERT","lineNumber":387,"content":"                    for (int dy = -1; dy <= 1; dy++)"},{"type":"INSERT","lineNumber":388,"content":"                    {"},{"type":"INSERT","lineNumber":389,"content":"                        if (dx == 0 && dy == 0) continue;"},{"type":"INSERT","lineNumber":390,"content":"                        "},{"type":"INSERT","lineNumber":391,"content":"                        int nx = x + dx;"},{"type":"INSERT","lineNumber":392,"content":"                        int ny = y + dy;"},{"type":"INSERT","lineNumber":393,"content":"                        "},{"type":"INSERT","lineNumber":394,"content":"                        if (dungeon.IsValidPosition(nx, ny) && !visited[nx, ny] && dungeon.IsWalkable(nx, ny))"},{"type":"INSERT","lineNumber":395,"content":"                        {"},{"type":"INSERT","lineNumber":396,"content":"                            stack.Push(new Vector2(nx, ny));"},{"type":"INSERT","lineNumber":397,"content":"                        }"},{"type":"INSERT","lineNumber":398,"content":"                    }"},{"type":"INSERT","lineNumber":399,"content":"                }"},{"type":"INSERT","lineNumber":400,"content":"            }"},{"type":"INSERT","lineNumber":401,"content":"            "},{"type":"INSERT","lineNumber":402,"content":"            return area;"},{"type":"INSERT","lineNumber":403,"content":"        }"},{"type":"INSERT","lineNumber":404,"content":""},{"type":"INSERT","lineNumber":405,"content":"        private void ConnectOpenAreas(Dungeon dungeon, List<List<Vector2>> areas)"},{"type":"INSERT","lineNumber":406,"content":"        {"},{"type":"INSERT","lineNumber":407,"content":"            for (int i = 0; i < areas.Count - 1; i++)"},{"type":"INSERT","lineNumber":408,"content":"            {"},{"type":"INSERT","lineNumber":409,"content":"                var area1 = areas[i];"},{"type":"INSERT","lineNumber":410,"content":"                var area2 = areas[i + 1];"},{"type":"INSERT","lineNumber":411,"content":"                "},{"type":"INSERT","lineNumber":412,"content":"                // Find closest points between areas"},{"type":"INSERT","lineNumber":413,"content":"                Vector2 closestPoint1 = area1[0];"},{"type":"INSERT","lineNumber":414,"content":"                Vector2 closestPoint2 = area2[0];"},{"type":"INSERT","lineNumber":415,"content":"                float shortestDistance = Vector2.Distance(closestPoint1, closestPoint2);"},{"type":"INSERT","lineNumber":416,"content":"                "},{"type":"INSERT","lineNumber":417,"content":"                foreach (var point1 in area1)"},{"type":"INSERT","lineNumber":418,"content":"                {"},{"type":"INSERT","lineNumber":419,"content":"                    foreach (var point2 in area2)"},{"type":"INSERT","lineNumber":420,"content":"                    {"},{"type":"INSERT","lineNumber":421,"content":"                        float distance = Vector2.Distance(point1, point2);"},{"type":"INSERT","lineNumber":422,"content":"                        if (distance < shortestDistance)"},{"type":"INSERT","lineNumber":423,"content":"                        {"},{"type":"INSERT","lineNumber":424,"content":"                            shortestDistance = distance;"},{"type":"INSERT","lineNumber":425,"content":"                            closestPoint1 = point1;"},{"type":"INSERT","lineNumber":426,"content":"                            closestPoint2 = point2;"},{"type":"INSERT","lineNumber":427,"content":"                        }"},{"type":"INSERT","lineNumber":428,"content":"                    }"},{"type":"INSERT","lineNumber":429,"content":"                }"},{"type":"INSERT","lineNumber":430,"content":"                "},{"type":"INSERT","lineNumber":431,"content":"                // Create corridor between closest points"},{"type":"INSERT","lineNumber":432,"content":"                dungeon.CreateCorridorBetweenPoints("},{"type":"INSERT","lineNumber":433,"content":"                    (int)closestPoint1.X, (int)closestPoint1.Y,"},{"type":"INSERT","lineNumber":434,"content":"                    (int)closestPoint2.X, (int)closestPoint2.Y"},{"type":"INSERT","lineNumber":435,"content":"                );"},{"type":"INSERT","lineNumber":436,"content":"            }"},{"type":"INSERT","lineNumber":437,"content":"        }"},{"type":"INSERT","lineNumber":438,"content":""},{"type":"INSERT","lineNumber":439,"content":"        private Vector2 GetRandomPositionInArea(List<Vector2> area)"},{"type":"INSERT","lineNumber":440,"content":"        {"},{"type":"INSERT","lineNumber":441,"content":"            return area[_random.Next(area.Count)];"},{"type":"INSERT","lineNumber":442,"content":"        }"},{"type":"INSERT","lineNumber":443,"content":""},{"type":"INSERT","lineNumber":444,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":445,"content":"        /// Validates that a generated dungeon meets basic requirements"},{"type":"INSERT","lineNumber":446,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":447,"content":"        public bool ValidateDungeon(Dungeon dungeon)"},{"type":"INSERT","lineNumber":448,"content":"        {"},{"type":"INSERT","lineNumber":449,"content":"            // Check that there's a path from start to end"},{"type":"INSERT","lineNumber":450,"content":"            if (dungeon.StartPosition == Vector2.Zero || dungeon.EndPosition == Vector2.Zero)"},{"type":"INSERT","lineNumber":451,"content":"                return false;"},{"type":"INSERT","lineNumber":452,"content":"            "},{"type":"INSERT","lineNumber":453,"content":"            // Check that there are walkable tiles"},{"type":"INSERT","lineNumber":454,"content":"            bool hasWalkableTiles = false;"},{"type":"INSERT","lineNumber":455,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":456,"content":"            {"},{"type":"INSERT","lineNumber":457,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":458,"content":"                {"},{"type":"INSERT","lineNumber":459,"content":"                    if (dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":460,"content":"                    {"},{"type":"INSERT","lineNumber":461,"content":"                        hasWalkableTiles = true;"},{"type":"INSERT","lineNumber":462,"content":"                        break;"},{"type":"INSERT","lineNumber":463,"content":"                    }"},{"type":"INSERT","lineNumber":464,"content":"                }"},{"type":"INSERT","lineNumber":465,"content":"                if (hasWalkableTiles) break;"},{"type":"INSERT","lineNumber":466,"content":"            }"},{"type":"INSERT","lineNumber":467,"content":"            "},{"type":"INSERT","lineNumber":468,"content":"            return hasWalkableTiles;"},{"type":"INSERT","lineNumber":469,"content":"        }"},{"type":"INSERT","lineNumber":470,"content":"    }"}]},{"timestamp":1756230462475,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":10,"oldContent":"    }"},{"type":"DELETE","lineNumber":11,"oldContent":"        }"},{"type":"INSERT","lineNumber":7,"content":""},{"type":"DELETE","lineNumber":13,"oldContent":"            return hasWalkableTiles;"},{"type":"DELETE","lineNumber":14,"oldContent":"            "},{"type":"INSERT","lineNumber":9,"content":"{"},{"type":"DELETE","lineNumber":16,"oldContent":"            }"},{"type":"DELETE","lineNumber":18,"oldContent":"                if (hasWalkableTiles) break;"},{"type":"DELETE","lineNumber":20,"oldContent":"                }"},{"type":"DELETE","lineNumber":22,"oldContent":"                    }"},{"type":"DELETE","lineNumber":24,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":26,"oldContent":"                        hasWalkableTiles = true;"},{"type":"DELETE","lineNumber":28,"oldContent":"                    {"},{"type":"DELETE","lineNumber":30,"oldContent":"                    if (dungeon.IsWalkable(x, y))"},{"type":"DELETE","lineNumber":32,"oldContent":"                {"},{"type":"DELETE","lineNumber":34,"oldContent":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"DELETE","lineNumber":36,"oldContent":"            {"},{"type":"DELETE","lineNumber":38,"oldContent":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"DELETE","lineNumber":40,"oldContent":"            bool hasWalkableTiles = false;"},{"type":"DELETE","lineNumber":42,"oldContent":"            // Check that there are walkable tiles"},{"type":"DELETE","lineNumber":44,"oldContent":"            "},{"type":"DELETE","lineNumber":46,"oldContent":"                return false;"},{"type":"DELETE","lineNumber":48,"oldContent":"            if (dungeon.StartPosition == Vector2.Zero || dungeon.EndPosition == Vector2.Zero)"},{"type":"DELETE","lineNumber":50,"oldContent":"            // Check that there's a path from start to end"},{"type":"DELETE","lineNumber":52,"oldContent":"        {"},{"type":"DELETE","lineNumber":54,"oldContent":"        public bool ValidateDungeon(Dungeon dungeon)"},{"type":"DELETE","lineNumber":56,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":58,"oldContent":"        /// Validates that a generated dungeon meets basic requirements"},{"type":"DELETE","lineNumber":60,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":"        }"},{"type":"DELETE","lineNumber":66,"oldContent":"            return area[_random.Next(area.Count)];"},{"type":"DELETE","lineNumber":68,"oldContent":"        {"},{"type":"DELETE","lineNumber":70,"oldContent":"        private Vector2 GetRandomPositionInArea(List<Vector2> area)"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"        }"},{"type":"DELETE","lineNumber":76,"oldContent":"            }"},{"type":"DELETE","lineNumber":78,"oldContent":"                );"},{"type":"DELETE","lineNumber":80,"oldContent":"                    (int)closestPoint2.X, (int)closestPoint2.Y"},{"type":"DELETE","lineNumber":82,"oldContent":"                    (int)closestPoint1.X, (int)closestPoint1.Y,"},{"type":"DELETE","lineNumber":84,"oldContent":"                dungeon.CreateCorridorBetweenPoints("},{"type":"DELETE","lineNumber":86,"oldContent":"                // Create corridor between closest points"},{"type":"DELETE","lineNumber":88,"oldContent":"                "},{"type":"DELETE","lineNumber":90,"oldContent":"                }"},{"type":"DELETE","lineNumber":92,"oldContent":"                    }"},{"type":"DELETE","lineNumber":94,"oldContent":"                        }"},{"type":"DELETE","lineNumber":96,"oldContent":"                            closestPoint2 = point2;"},{"type":"DELETE","lineNumber":98,"oldContent":"                            closestPoint1 = point1;"},{"type":"DELETE","lineNumber":100,"oldContent":"                            shortestDistance = distance;"},{"type":"DELETE","lineNumber":102,"oldContent":"                        {"},{"type":"DELETE","lineNumber":104,"oldContent":"                        if (distance < shortestDistance)"},{"type":"DELETE","lineNumber":106,"oldContent":"                        float distance = Vector2.Distance(point1, point2);"},{"type":"DELETE","lineNumber":108,"oldContent":"                    {"},{"type":"DELETE","lineNumber":110,"oldContent":"                    foreach (var point2 in area2)"},{"type":"DELETE","lineNumber":112,"oldContent":"                {"},{"type":"DELETE","lineNumber":114,"oldContent":"                foreach (var point1 in area1)"},{"type":"DELETE","lineNumber":116,"oldContent":"                "},{"type":"DELETE","lineNumber":118,"oldContent":"                float shortestDistance = Vector2.Distance(closestPoint1, closestPoint2);"},{"type":"DELETE","lineNumber":120,"oldContent":"                Vector2 closestPoint2 = area2[0];"},{"type":"DELETE","lineNumber":122,"oldContent":"                Vector2 closestPoint1 = area1[0];"},{"type":"DELETE","lineNumber":124,"oldContent":"                // Find closest points between areas"},{"type":"DELETE","lineNumber":126,"oldContent":"                "},{"type":"DELETE","lineNumber":128,"oldContent":"                var area2 = areas[i + 1];"},{"type":"DELETE","lineNumber":130,"oldContent":"                var area1 = areas[i];"},{"type":"DELETE","lineNumber":132,"oldContent":"            {"},{"type":"DELETE","lineNumber":134,"oldContent":"            for (int i = 0; i < areas.Count - 1; i++)"},{"type":"DELETE","lineNumber":136,"oldContent":"        {"},{"type":"DELETE","lineNumber":138,"oldContent":"        private void ConnectOpenAreas(Dungeon dungeon, List<List<Vector2>> areas)"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"        }"},{"type":"DELETE","lineNumber":144,"oldContent":"            return area;"},{"type":"DELETE","lineNumber":146,"oldContent":"            "},{"type":"DELETE","lineNumber":148,"oldContent":"            }"},{"type":"DELETE","lineNumber":150,"oldContent":"                }"},{"type":"DELETE","lineNumber":152,"oldContent":"                    }"},{"type":"DELETE","lineNumber":154,"oldContent":"                        }"},{"type":"DELETE","lineNumber":156,"oldContent":"                            stack.Push(new Vector2(nx, ny));"},{"type":"DELETE","lineNumber":158,"oldContent":"                        {"},{"type":"DELETE","lineNumber":160,"oldContent":"                        if (dungeon.IsValidPosition(nx, ny) && !visited[nx, ny] && dungeon.IsWalkable(nx, ny))"},{"type":"DELETE","lineNumber":162,"oldContent":"                        "},{"type":"DELETE","lineNumber":164,"oldContent":"                        int ny = y + dy;"},{"type":"DELETE","lineNumber":166,"oldContent":"                        int nx = x + dx;"},{"type":"DELETE","lineNumber":168,"oldContent":"                        "},{"type":"DELETE","lineNumber":170,"oldContent":"                        if (dx == 0 && dy == 0) continue;"},{"type":"DELETE","lineNumber":172,"oldContent":"                    {"},{"type":"DELETE","lineNumber":174,"oldContent":"                    for (int dy = -1; dy <= 1; dy++)"},{"type":"DELETE","lineNumber":176,"oldContent":"                {"},{"type":"DELETE","lineNumber":178,"oldContent":"                for (int dx = -1; dx <= 1; dx++)"},{"type":"DELETE","lineNumber":180,"oldContent":"                // Add neighbors"},{"type":"DELETE","lineNumber":182,"oldContent":"                "},{"type":"DELETE","lineNumber":184,"oldContent":"                area.Add(current);"},{"type":"DELETE","lineNumber":186,"oldContent":"                visited[x, y] = true;"},{"type":"DELETE","lineNumber":188,"oldContent":"                "},{"type":"DELETE","lineNumber":190,"oldContent":"                    continue;"},{"type":"DELETE","lineNumber":192,"oldContent":"                if (visited[x, y] || !dungeon.IsWalkable(x, y))"},{"type":"DELETE","lineNumber":194,"oldContent":"                "},{"type":"DELETE","lineNumber":196,"oldContent":"                int y = (int)current.Y;"},{"type":"DELETE","lineNumber":198,"oldContent":"                int x = (int)current.X;"},{"type":"DELETE","lineNumber":200,"oldContent":"                var current = stack.Pop();"},{"type":"DELETE","lineNumber":202,"oldContent":"            {"},{"type":"DELETE","lineNumber":204,"oldContent":"            while (stack.Count > 0)"},{"type":"DELETE","lineNumber":206,"oldContent":"            "},{"type":"DELETE","lineNumber":208,"oldContent":"            stack.Push(new Vector2(startX, startY));"},{"type":"DELETE","lineNumber":210,"oldContent":"            var stack = new Stack<Vector2>();"},{"type":"DELETE","lineNumber":212,"oldContent":"            var area = new List<Vector2>();"},{"type":"DELETE","lineNumber":214,"oldContent":"        {"},{"type":"DELETE","lineNumber":216,"oldContent":"        private List<Vector2> FloodFill(Dungeon dungeon, int startX, int startY, bool[,] visited)"},{"type":"DELETE","lineNumber":218,"oldContent":""},{"type":"DELETE","lineNumber":220,"oldContent":"        }"},{"type":"DELETE","lineNumber":222,"oldContent":"            return areas;"},{"type":"DELETE","lineNumber":224,"oldContent":"            "},{"type":"DELETE","lineNumber":226,"oldContent":"            areas.Sort((a, b) => b.Count.CompareTo(a.Count));"},{"type":"DELETE","lineNumber":228,"oldContent":"            // Sort areas by size (largest first)"},{"type":"DELETE","lineNumber":231,"oldContent":"            "},{"type":"DELETE","lineNumber":232,"oldContent":"            }"},{"type":"DELETE","lineNumber":234,"oldContent":"                }"},{"type":"DELETE","lineNumber":236,"oldContent":"                    }"},{"type":"DELETE","lineNumber":238,"oldContent":"                        }"},{"type":"DELETE","lineNumber":240,"oldContent":"                            areas.Add(area);"},{"type":"DELETE","lineNumber":242,"oldContent":"                        {"},{"type":"DELETE","lineNumber":244,"oldContent":"                        if (area.Count > 10) // Only keep areas with at least 10 tiles"},{"type":"DELETE","lineNumber":246,"oldContent":"                        var area = FloodFill(dungeon, x, y, visited);"},{"type":"DELETE","lineNumber":248,"oldContent":"                    {"},{"type":"DELETE","lineNumber":250,"oldContent":"                    if (!visited[x, y] && dungeon.IsWalkable(x, y))"},{"type":"DELETE","lineNumber":252,"oldContent":"                {"},{"type":"DELETE","lineNumber":254,"oldContent":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"DELETE","lineNumber":256,"oldContent":"            {"},{"type":"DELETE","lineNumber":258,"oldContent":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"DELETE","lineNumber":260,"oldContent":"            "},{"type":"DELETE","lineNumber":262,"oldContent":"            var areas = new List<List<Vector2>>();"},{"type":"DELETE","lineNumber":264,"oldContent":"            var visited = new bool[dungeon.Width, dungeon.Height];"},{"type":"DELETE","lineNumber":266,"oldContent":"        {"},{"type":"DELETE","lineNumber":268,"oldContent":"        private List<List<Vector2>> FindOpenAreas(Dungeon dungeon)"},{"type":"DELETE","lineNumber":270,"oldContent":""},{"type":"DELETE","lineNumber":272,"oldContent":"        }"},{"type":"DELETE","lineNumber":274,"oldContent":"            return wallCount;"},{"type":"DELETE","lineNumber":276,"oldContent":"            "},{"type":"DELETE","lineNumber":278,"oldContent":"            }"},{"type":"DELETE","lineNumber":280,"oldContent":"                }"},{"type":"DELETE","lineNumber":282,"oldContent":"                    }"},{"type":"DELETE","lineNumber":284,"oldContent":"                        wallCount++;"},{"type":"DELETE","lineNumber":286,"oldContent":"                    {"},{"type":"DELETE","lineNumber":288,"oldContent":"                    if (!dungeon.IsValidPosition(nx, ny) || dungeon.Tiles[nx, ny].Type == TileType.Wall)"},{"type":"DELETE","lineNumber":290,"oldContent":"                    "},{"type":"DELETE","lineNumber":292,"oldContent":"                    if (nx == x && ny == y) continue;"},{"type":"DELETE","lineNumber":294,"oldContent":"                {"},{"type":"DELETE","lineNumber":296,"oldContent":"                for (int ny = y - 1; ny <= y + 1; ny++)"},{"type":"DELETE","lineNumber":298,"oldContent":"            {"},{"type":"DELETE","lineNumber":300,"oldContent":"            for (int nx = x - 1; nx <= x + 1; nx++)"},{"type":"DELETE","lineNumber":302,"oldContent":"            "},{"type":"DELETE","lineNumber":304,"oldContent":"            int wallCount = 0;"},{"type":"DELETE","lineNumber":306,"oldContent":"        {"},{"type":"DELETE","lineNumber":308,"oldContent":"        private int CountNeighborWalls(Dungeon dungeon, int x, int y)"},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":312,"oldContent":"        }"},{"type":"DELETE","lineNumber":314,"oldContent":"            dungeon.Tiles = newTiles;"},{"type":"DELETE","lineNumber":317,"oldContent":"            "},{"type":"DELETE","lineNumber":318,"oldContent":"            }"},{"type":"DELETE","lineNumber":320,"oldContent":"                }"},{"type":"DELETE","lineNumber":322,"oldContent":"                    }"},{"type":"DELETE","lineNumber":324,"oldContent":"                        newTiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"DELETE","lineNumber":326,"oldContent":"                    {"},{"type":"DELETE","lineNumber":328,"oldContent":"                    else"},{"type":"DELETE","lineNumber":330,"oldContent":"                    }"},{"type":"DELETE","lineNumber":332,"oldContent":"                        newTiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"DELETE","lineNumber":334,"oldContent":"                    {"},{"type":"DELETE","lineNumber":336,"oldContent":"                    if (neighborWalls > 4)"},{"type":"DELETE","lineNumber":338,"oldContent":"                    "},{"type":"DELETE","lineNumber":340,"oldContent":"                    int neighborWalls = CountNeighborWalls(dungeon, x, y);"},{"type":"DELETE","lineNumber":342,"oldContent":"                {"},{"type":"DELETE","lineNumber":344,"oldContent":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"DELETE","lineNumber":346,"oldContent":"            {"},{"type":"DELETE","lineNumber":348,"oldContent":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"DELETE","lineNumber":350,"oldContent":"            "},{"type":"DELETE","lineNumber":352,"oldContent":"            var newTiles = new Tile[dungeon.Width, dungeon.Height];"},{"type":"DELETE","lineNumber":354,"oldContent":"        {"},{"type":"DELETE","lineNumber":356,"oldContent":"        private void ApplyCellularAutomataRules(Dungeon dungeon)"},{"type":"DELETE","lineNumber":358,"oldContent":""},{"type":"DELETE","lineNumber":361,"oldContent":"        }"},{"type":"DELETE","lineNumber":362,"oldContent":"            return dungeon;"},{"type":"DELETE","lineNumber":364,"oldContent":"            "},{"type":"DELETE","lineNumber":366,"oldContent":"            }"},{"type":"DELETE","lineNumber":368,"oldContent":"                dungeon.SetEndPosition(GetRandomPositionInArea(endArea));"},{"type":"DELETE","lineNumber":370,"oldContent":"                dungeon.SetStartPosition(GetRandomPositionInArea(startArea));"},{"type":"DELETE","lineNumber":372,"oldContent":"                "},{"type":"DELETE","lineNumber":374,"oldContent":"                var endArea = openAreas[openAreas.Count - 1];"},{"type":"DELETE","lineNumber":376,"oldContent":"                var startArea = openAreas[0];"},{"type":"DELETE","lineNumber":378,"oldContent":"                // Set start and end positions"},{"type":"DELETE","lineNumber":380,"oldContent":"                "},{"type":"DELETE","lineNumber":382,"oldContent":"                ConnectOpenAreas(dungeon, openAreas);"},{"type":"DELETE","lineNumber":385,"oldContent":"            {"},{"type":"DELETE","lineNumber":386,"oldContent":"            if (openAreas.Count > 0)"},{"type":"DELETE","lineNumber":388,"oldContent":"            var openAreas = FindOpenAreas(dungeon);"},{"type":"DELETE","lineNumber":390,"oldContent":"            // Find and connect the largest open areas"},{"type":"DELETE","lineNumber":392,"oldContent":"            "},{"type":"DELETE","lineNumber":394,"oldContent":"            }"},{"type":"DELETE","lineNumber":396,"oldContent":"                ApplyCellularAutomataRules(dungeon);"},{"type":"DELETE","lineNumber":398,"oldContent":"            {"},{"type":"DELETE","lineNumber":400,"oldContent":"            for (int iteration = 0; iteration < iterations; iteration++)"},{"type":"DELETE","lineNumber":402,"oldContent":"            // Apply cellular automata rules"},{"type":"DELETE","lineNumber":404,"oldContent":"            "},{"type":"DELETE","lineNumber":406,"oldContent":"            }"},{"type":"DELETE","lineNumber":408,"oldContent":"                }"},{"type":"DELETE","lineNumber":410,"oldContent":"                    }"},{"type":"DELETE","lineNumber":412,"oldContent":"                        dungeon.Tiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"DELETE","lineNumber":414,"oldContent":"                    {"},{"type":"DELETE","lineNumber":416,"oldContent":"                    else"},{"type":"DELETE","lineNumber":418,"oldContent":"                    }"},{"type":"DELETE","lineNumber":420,"oldContent":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"DELETE","lineNumber":422,"oldContent":"                    {"},{"type":"DELETE","lineNumber":424,"oldContent":"                    else if (_random.NextDouble() < wallProbability)"},{"type":"DELETE","lineNumber":426,"oldContent":"                    }"},{"type":"DELETE","lineNumber":428,"oldContent":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"DELETE","lineNumber":430,"oldContent":"                        // Keep borders as walls"},{"type":"DELETE","lineNumber":432,"oldContent":"                    {"},{"type":"DELETE","lineNumber":434,"oldContent":"                    if (x == 0 || x == width - 1 || y == 0 || y == height - 1)"},{"type":"DELETE","lineNumber":436,"oldContent":"                {"},{"type":"DELETE","lineNumber":438,"oldContent":"                for (int y = 0; y < height; y++)"},{"type":"DELETE","lineNumber":440,"oldContent":"            {"},{"type":"DELETE","lineNumber":442,"oldContent":"            for (int x = 0; x < width; x++)"},{"type":"DELETE","lineNumber":444,"oldContent":"            // Initialize with random walls"},{"type":"DELETE","lineNumber":446,"oldContent":"            "},{"type":"DELETE","lineNumber":448,"oldContent":"            var dungeon = new Dungeon(width, height);"},{"type":"DELETE","lineNumber":450,"oldContent":"        {"},{"type":"DELETE","lineNumber":452,"oldContent":"        public Dungeon GenerateCavelike(int width, int height, float wallProbability = 0.45f, int iterations = 5)"},{"type":"DELETE","lineNumber":454,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":456,"oldContent":"        /// Generates a dungeon using cellular automata (for more organic caves)"},{"type":"DELETE","lineNumber":458,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":460,"oldContent":""},{"type":"DELETE","lineNumber":462,"oldContent":"        }"},{"type":"DELETE","lineNumber":464,"oldContent":"            }"},{"type":"DELETE","lineNumber":466,"oldContent":"                dungeon.SetEndPosition(endRoom.GetRandomPosition());"},{"type":"INSERT","lineNumber":237,"content":"                    }"},{"type":"INSERT","lineNumber":238,"content":"                }"},{"type":"INSERT","lineNumber":239,"content":"                "},{"type":"INSERT","lineNumber":241,"content":"                dungeon.SetEndPosition(endRoom.GetRandomPosition());"},{"type":"INSERT","lineNumber":242,"content":"            }"},{"type":"INSERT","lineNumber":243,"content":"        }"},{"type":"INSERT","lineNumber":244,"content":""},{"type":"INSERT","lineNumber":245,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":246,"content":"        /// Generates a dungeon using cellular automata (for more organic caves)"},{"type":"INSERT","lineNumber":247,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":248,"content":"        public Dungeon GenerateCavelike(int width, int height, float wallProbability = 0.45f, int iterations = 5)"},{"type":"INSERT","lineNumber":249,"content":"        {"},{"type":"INSERT","lineNumber":250,"content":"            var dungeon = new Dungeon(width, height);"},{"type":"INSERT","lineNumber":251,"content":"            "},{"type":"INSERT","lineNumber":252,"content":"            // Initialize with random walls"},{"type":"INSERT","lineNumber":253,"content":"            for (int x = 0; x < width; x++)"},{"type":"INSERT","lineNumber":254,"content":"            {"},{"type":"INSERT","lineNumber":255,"content":"                for (int y = 0; y < height; y++)"},{"type":"INSERT","lineNumber":256,"content":"                {"},{"type":"INSERT","lineNumber":257,"content":"                    if (x == 0 || x == width - 1 || y == 0 || y == height - 1)"},{"type":"INSERT","lineNumber":258,"content":"                    {"},{"type":"INSERT","lineNumber":259,"content":"                        // Keep borders as walls"},{"type":"INSERT","lineNumber":260,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":262,"content":"                    else if (_random.NextDouble() < wallProbability)"},{"type":"INSERT","lineNumber":263,"content":"                    {"},{"type":"INSERT","lineNumber":264,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":265,"content":"                    }"},{"type":"INSERT","lineNumber":266,"content":"                    else"},{"type":"INSERT","lineNumber":267,"content":"                    {"},{"type":"INSERT","lineNumber":268,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":269,"content":"                    }"},{"type":"INSERT","lineNumber":270,"content":"                }"},{"type":"INSERT","lineNumber":271,"content":"            }"},{"type":"INSERT","lineNumber":272,"content":"            "},{"type":"INSERT","lineNumber":273,"content":"            // Apply cellular automata rules"},{"type":"INSERT","lineNumber":274,"content":"            for (int iteration = 0; iteration < iterations; iteration++)"},{"type":"INSERT","lineNumber":275,"content":"            {"},{"type":"INSERT","lineNumber":276,"content":"                ApplyCellularAutomataRules(dungeon);"},{"type":"INSERT","lineNumber":277,"content":"            }"},{"type":"INSERT","lineNumber":278,"content":"            "},{"type":"INSERT","lineNumber":279,"content":"            // Find and connect the largest open areas"},{"type":"INSERT","lineNumber":280,"content":"            var openAreas = FindOpenAreas(dungeon);"},{"type":"INSERT","lineNumber":281,"content":"            if (openAreas.Count > 0)"},{"type":"INSERT","lineNumber":282,"content":"            {"},{"type":"INSERT","lineNumber":283,"content":"                ConnectOpenAreas(dungeon, openAreas);"},{"type":"INSERT","lineNumber":285,"content":"                // Set start and end positions"},{"type":"INSERT","lineNumber":286,"content":"                var startArea = openAreas[0];"},{"type":"INSERT","lineNumber":287,"content":"                var endArea = openAreas[openAreas.Count - 1];"},{"type":"INSERT","lineNumber":288,"content":"                "},{"type":"INSERT","lineNumber":289,"content":"                dungeon.SetStartPosition(GetRandomPositionInArea(startArea));"},{"type":"INSERT","lineNumber":290,"content":"                dungeon.SetEndPosition(GetRandomPositionInArea(endArea));"},{"type":"INSERT","lineNumber":291,"content":"            }"},{"type":"INSERT","lineNumber":292,"content":"            "},{"type":"INSERT","lineNumber":293,"content":"            return dungeon;"},{"type":"INSERT","lineNumber":294,"content":"        }"},{"type":"INSERT","lineNumber":295,"content":""},{"type":"INSERT","lineNumber":296,"content":"        private void ApplyCellularAutomataRules(Dungeon dungeon)"},{"type":"INSERT","lineNumber":297,"content":"        {"},{"type":"INSERT","lineNumber":298,"content":"            var newTiles = new Tile[dungeon.Width, dungeon.Height];"},{"type":"INSERT","lineNumber":299,"content":"            "},{"type":"INSERT","lineNumber":300,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":301,"content":"            {"},{"type":"INSERT","lineNumber":302,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":303,"content":"                {"},{"type":"INSERT","lineNumber":304,"content":"                    int neighborWalls = CountNeighborWalls(dungeon, x, y);"},{"type":"INSERT","lineNumber":305,"content":"                    "},{"type":"INSERT","lineNumber":306,"content":"                    if (neighborWalls > 4)"},{"type":"INSERT","lineNumber":307,"content":"                    {"},{"type":"INSERT","lineNumber":308,"content":"                        newTiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":309,"content":"                    }"},{"type":"INSERT","lineNumber":310,"content":"                    else"},{"type":"INSERT","lineNumber":311,"content":"                    {"},{"type":"INSERT","lineNumber":312,"content":"                        newTiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":313,"content":"                    }"},{"type":"INSERT","lineNumber":315,"content":"            }"},{"type":"INSERT","lineNumber":316,"content":"            "},{"type":"INSERT","lineNumber":317,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":318,"content":"            {"},{"type":"INSERT","lineNumber":319,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":320,"content":"                {"},{"type":"INSERT","lineNumber":321,"content":"                    dungeon.Tiles[x, y] = newTiles[x, y];"},{"type":"INSERT","lineNumber":322,"content":"                }"},{"type":"INSERT","lineNumber":323,"content":"            }"},{"type":"INSERT","lineNumber":324,"content":"        }"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"INSERT","lineNumber":326,"content":"        private int CountNeighborWalls(Dungeon dungeon, int x, int y)"},{"type":"INSERT","lineNumber":327,"content":"        {"},{"type":"INSERT","lineNumber":328,"content":"            int wallCount = 0;"},{"type":"INSERT","lineNumber":329,"content":"            "},{"type":"INSERT","lineNumber":330,"content":"            for (int nx = x - 1; nx <= x + 1; nx++)"},{"type":"INSERT","lineNumber":331,"content":"            {"},{"type":"INSERT","lineNumber":332,"content":"                for (int ny = y - 1; ny <= y + 1; ny++)"},{"type":"INSERT","lineNumber":333,"content":"                {"},{"type":"INSERT","lineNumber":334,"content":"                    if (nx == x && ny == y) continue;"},{"type":"INSERT","lineNumber":335,"content":"                    "},{"type":"INSERT","lineNumber":336,"content":"                    if (!dungeon.IsValidPosition(nx, ny) || dungeon.Tiles[nx, ny].Type == TileType.Wall)"},{"type":"INSERT","lineNumber":337,"content":"                    {"},{"type":"INSERT","lineNumber":338,"content":"                        wallCount++;"},{"type":"INSERT","lineNumber":339,"content":"                    }"},{"type":"INSERT","lineNumber":340,"content":"                }"},{"type":"INSERT","lineNumber":341,"content":"            }"},{"type":"INSERT","lineNumber":342,"content":"            "},{"type":"INSERT","lineNumber":343,"content":"            return wallCount;"},{"type":"INSERT","lineNumber":344,"content":"        }"},{"type":"INSERT","lineNumber":345,"content":""},{"type":"INSERT","lineNumber":346,"content":"        private List<List<Vector2>> FindOpenAreas(Dungeon dungeon)"},{"type":"INSERT","lineNumber":347,"content":"        {"},{"type":"INSERT","lineNumber":348,"content":"            var visited = new bool[dungeon.Width, dungeon.Height];"},{"type":"INSERT","lineNumber":349,"content":"            var areas = new List<List<Vector2>>();"},{"type":"INSERT","lineNumber":350,"content":"            "},{"type":"INSERT","lineNumber":351,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":352,"content":"            {"},{"type":"INSERT","lineNumber":353,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":354,"content":"                {"},{"type":"INSERT","lineNumber":355,"content":"                    if (!visited[x, y] && dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":356,"content":"                    {"},{"type":"INSERT","lineNumber":357,"content":"                        var area = FloodFill(dungeon, x, y, visited);"},{"type":"INSERT","lineNumber":358,"content":"                        if (area.Count > 10) // Only keep areas with at least 10 tiles"},{"type":"INSERT","lineNumber":359,"content":"                        {"},{"type":"INSERT","lineNumber":360,"content":"                            areas.Add(area);"},{"type":"INSERT","lineNumber":361,"content":"                        }"},{"type":"INSERT","lineNumber":362,"content":"                    }"},{"type":"INSERT","lineNumber":363,"content":"                }"},{"type":"INSERT","lineNumber":364,"content":"            }"},{"type":"INSERT","lineNumber":365,"content":"            "},{"type":"INSERT","lineNumber":366,"content":"            // Sort areas by size (largest first)"},{"type":"INSERT","lineNumber":367,"content":"            areas.Sort((a, b) => b.Count.CompareTo(a.Count));"},{"type":"INSERT","lineNumber":368,"content":"            "},{"type":"INSERT","lineNumber":369,"content":"            return areas;"},{"type":"INSERT","lineNumber":370,"content":"        }"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"        private List<Vector2> FloodFill(Dungeon dungeon, int startX, int startY, bool[,] visited)"},{"type":"INSERT","lineNumber":373,"content":"        {"},{"type":"INSERT","lineNumber":374,"content":"            var area = new List<Vector2>();"},{"type":"INSERT","lineNumber":375,"content":"            var stack = new Stack<Vector2>();"},{"type":"INSERT","lineNumber":376,"content":"            stack.Push(new Vector2(startX, startY));"},{"type":"INSERT","lineNumber":377,"content":"            "},{"type":"INSERT","lineNumber":378,"content":"            while (stack.Count > 0)"},{"type":"INSERT","lineNumber":379,"content":"            {"},{"type":"INSERT","lineNumber":380,"content":"                var current = stack.Pop();"},{"type":"INSERT","lineNumber":381,"content":"                int x = (int)current.X;"},{"type":"INSERT","lineNumber":382,"content":"                int y = (int)current.Y;"},{"type":"INSERT","lineNumber":383,"content":"                "},{"type":"INSERT","lineNumber":384,"content":"                if (visited[x, y] || !dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":385,"content":"                    continue;"},{"type":"INSERT","lineNumber":386,"content":"                "},{"type":"INSERT","lineNumber":387,"content":"                visited[x, y] = true;"},{"type":"INSERT","lineNumber":388,"content":"                area.Add(current);"},{"type":"INSERT","lineNumber":389,"content":"                "},{"type":"INSERT","lineNumber":390,"content":"                // Add neighbors"},{"type":"INSERT","lineNumber":391,"content":"                for (int dx = -1; dx <= 1; dx++)"},{"type":"INSERT","lineNumber":392,"content":"                {"},{"type":"INSERT","lineNumber":393,"content":"                    for (int dy = -1; dy <= 1; dy++)"},{"type":"INSERT","lineNumber":394,"content":"                    {"},{"type":"INSERT","lineNumber":395,"content":"                        if (dx == 0 && dy == 0) continue;"},{"type":"INSERT","lineNumber":396,"content":"                        "},{"type":"INSERT","lineNumber":397,"content":"                        int nx = x + dx;"},{"type":"INSERT","lineNumber":398,"content":"                        int ny = y + dy;"},{"type":"INSERT","lineNumber":399,"content":"                        "},{"type":"INSERT","lineNumber":400,"content":"                        if (dungeon.IsValidPosition(nx, ny) && !visited[nx, ny] && dungeon.IsWalkable(nx, ny))"},{"type":"INSERT","lineNumber":401,"content":"                        {"},{"type":"INSERT","lineNumber":402,"content":"                            stack.Push(new Vector2(nx, ny));"},{"type":"INSERT","lineNumber":403,"content":"                        }"},{"type":"INSERT","lineNumber":404,"content":"                    }"},{"type":"INSERT","lineNumber":405,"content":"                }"},{"type":"INSERT","lineNumber":406,"content":"            }"},{"type":"INSERT","lineNumber":407,"content":"            "},{"type":"INSERT","lineNumber":408,"content":"            return area;"},{"type":"INSERT","lineNumber":409,"content":"        }"},{"type":"INSERT","lineNumber":410,"content":""},{"type":"INSERT","lineNumber":411,"content":"        private void ConnectOpenAreas(Dungeon dungeon, List<List<Vector2>> areas)"},{"type":"INSERT","lineNumber":412,"content":"        {"},{"type":"INSERT","lineNumber":413,"content":"            for (int i = 0; i < areas.Count - 1; i++)"},{"type":"INSERT","lineNumber":414,"content":"            {"},{"type":"INSERT","lineNumber":415,"content":"                var area1 = areas[i];"},{"type":"INSERT","lineNumber":416,"content":"                var area2 = areas[i + 1];"},{"type":"INSERT","lineNumber":417,"content":"                "},{"type":"INSERT","lineNumber":418,"content":"                // Find closest points between areas"},{"type":"INSERT","lineNumber":419,"content":"                Vector2 closestPoint1 = area1[0];"},{"type":"INSERT","lineNumber":420,"content":"                Vector2 closestPoint2 = area2[0];"},{"type":"INSERT","lineNumber":421,"content":"                float shortestDistance = Vector2.Distance(closestPoint1, closestPoint2);"},{"type":"INSERT","lineNumber":422,"content":"                "},{"type":"INSERT","lineNumber":423,"content":"                foreach (var point1 in area1)"},{"type":"INSERT","lineNumber":424,"content":"                {"},{"type":"INSERT","lineNumber":425,"content":"                    foreach (var point2 in area2)"},{"type":"INSERT","lineNumber":426,"content":"                    {"},{"type":"INSERT","lineNumber":427,"content":"                        float distance = Vector2.Distance(point1, point2);"},{"type":"INSERT","lineNumber":428,"content":"                        if (distance < shortestDistance)"},{"type":"INSERT","lineNumber":429,"content":"                        {"},{"type":"INSERT","lineNumber":430,"content":"                            shortestDistance = distance;"},{"type":"INSERT","lineNumber":431,"content":"                            closestPoint1 = point1;"},{"type":"INSERT","lineNumber":432,"content":"                            closestPoint2 = point2;"},{"type":"INSERT","lineNumber":433,"content":"                        }"},{"type":"INSERT","lineNumber":434,"content":"                    }"},{"type":"INSERT","lineNumber":435,"content":"                }"},{"type":"INSERT","lineNumber":436,"content":"                "},{"type":"INSERT","lineNumber":437,"content":"                // Create corridor between closest points"},{"type":"INSERT","lineNumber":438,"content":"                dungeon.CreateCorridorBetweenPoints("},{"type":"INSERT","lineNumber":439,"content":"                    (int)closestPoint1.X, (int)closestPoint1.Y,"},{"type":"INSERT","lineNumber":440,"content":"                    (int)closestPoint2.X, (int)closestPoint2.Y"},{"type":"INSERT","lineNumber":441,"content":"                );"},{"type":"INSERT","lineNumber":442,"content":"            }"},{"type":"INSERT","lineNumber":443,"content":"        }"},{"type":"INSERT","lineNumber":444,"content":""},{"type":"INSERT","lineNumber":445,"content":"        private Vector2 GetRandomPositionInArea(List<Vector2> area)"},{"type":"INSERT","lineNumber":446,"content":"        {"},{"type":"INSERT","lineNumber":447,"content":"            return area[_random.Next(area.Count)];"},{"type":"INSERT","lineNumber":448,"content":"        }"},{"type":"INSERT","lineNumber":449,"content":""},{"type":"INSERT","lineNumber":450,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":451,"content":"        /// Validates that a generated dungeon meets basic requirements"},{"type":"INSERT","lineNumber":452,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":453,"content":"        public bool ValidateDungeon(Dungeon dungeon)"},{"type":"INSERT","lineNumber":454,"content":"        {"},{"type":"INSERT","lineNumber":455,"content":"            // Check that there's a path from start to end"},{"type":"INSERT","lineNumber":456,"content":"            if (dungeon.StartPosition == Vector2.Zero || dungeon.EndPosition == Vector2.Zero)"},{"type":"INSERT","lineNumber":457,"content":"                return false;"},{"type":"INSERT","lineNumber":458,"content":"            "},{"type":"INSERT","lineNumber":459,"content":"            // Check that there are walkable tiles"},{"type":"INSERT","lineNumber":460,"content":"            bool hasWalkableTiles = false;"},{"type":"INSERT","lineNumber":461,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":462,"content":"            {"},{"type":"INSERT","lineNumber":463,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":464,"content":"                {"},{"type":"INSERT","lineNumber":465,"content":"                    if (dungeon.IsWalkable(x, y))"},{"type":"INSERT","lineNumber":466,"content":"                    {"},{"type":"INSERT","lineNumber":467,"content":"                        hasWalkableTiles = true;"},{"type":"INSERT","lineNumber":468,"content":"                        break;"},{"type":"INSERT","lineNumber":469,"content":"                    }"},{"type":"INSERT","lineNumber":470,"content":"                }"},{"type":"INSERT","lineNumber":471,"content":"                if (hasWalkableTiles) break;"},{"type":"INSERT","lineNumber":472,"content":"            }"},{"type":"INSERT","lineNumber":473,"content":"            "},{"type":"INSERT","lineNumber":474,"content":"            return hasWalkableTiles;"},{"type":"INSERT","lineNumber":475,"content":"        }"},{"type":"INSERT","lineNumber":476,"content":"    }"},{"type":"INSERT","lineNumber":477,"content":"}"}]},{"timestamp":1756230471267,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"MODIFY","lineNumber":7,"content":"","oldContent":"{"},{"type":"INSERT","lineNumber":9,"content":"{"},{"type":"DELETE","lineNumber":121,"oldContent":"                    }"},{"type":"INSERT","lineNumber":122,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":123,"content":"        /// Connects all rooms with corridors using a minimum spanning tree approach"},{"type":"INSERT","lineNumber":124,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":125,"content":"        private void ConnectRooms(Dungeon dungeon, List<Room> rooms)"},{"type":"INSERT","lineNumber":126,"content":"        {"},{"type":"INSERT","lineNumber":127,"content":"            if (rooms.Count <= 1) return;"},{"type":"INSERT","lineNumber":128,"content":"            "},{"type":"INSERT","lineNumber":129,"content":"            var connectedRooms = new HashSet<Room> { rooms[0] };"},{"type":"INSERT","lineNumber":130,"content":"            var unconnectedRooms = new HashSet<Room>(rooms.Skip(1));"},{"type":"INSERT","lineNumber":131,"content":"            "},{"type":"INSERT","lineNumber":132,"content":"            while (unconnectedRooms.Count > 0)"},{"type":"INSERT","lineNumber":133,"content":"            {"},{"type":"INSERT","lineNumber":134,"content":"                Room closestConnected = null;"},{"type":"INSERT","lineNumber":135,"content":"                Room closestUnconnected = null;"},{"type":"INSERT","lineNumber":136,"content":"                float shortestDistance = float.MaxValue;"},{"type":"INSERT","lineNumber":137,"content":"                "},{"type":"INSERT","lineNumber":138,"content":"                // Find the shortest connection between connected and unconnected rooms"},{"type":"INSERT","lineNumber":139,"content":"                foreach (var connected in connectedRooms)"},{"type":"INSERT","lineNumber":140,"content":"                {"},{"type":"INSERT","lineNumber":141,"content":"                    foreach (var unconnected in unconnectedRooms)"},{"type":"INSERT","lineNumber":142,"content":"                    {"},{"type":"INSERT","lineNumber":143,"content":"                        float distance = connected.DistanceTo(unconnected);"},{"type":"INSERT","lineNumber":144,"content":"                        if (distance < shortestDistance)"},{"type":"INSERT","lineNumber":145,"content":"                        {"},{"type":"INSERT","lineNumber":146,"content":"                            shortestDistance = distance;"},{"type":"INSERT","lineNumber":147,"content":"                            closestConnected = connected;"},{"type":"INSERT","lineNumber":148,"content":"                            closestUnconnected = unconnected;"},{"type":"INSERT","lineNumber":149,"content":"                        }"},{"type":"INSERT","lineNumber":150,"content":"                    }"},{"type":"INSERT","lineNumber":153,"content":"                // Create corridor between the closest rooms"},{"type":"INSERT","lineNumber":154,"content":"                if (closestConnected != null && closestUnconnected != null)"},{"type":"INSERT","lineNumber":155,"content":"                {"},{"type":"INSERT","lineNumber":156,"content":"                    CreateCorridor(dungeon, closestConnected, closestUnconnected);"},{"type":"INSERT","lineNumber":157,"content":"                    connectedRooms.Add(closestUnconnected);"},{"type":"INSERT","lineNumber":158,"content":"                    unconnectedRooms.Remove(closestUnconnected);"},{"type":"INSERT","lineNumber":159,"content":"                }"},{"type":"INSERT","lineNumber":160,"content":"            }"},{"type":"INSERT","lineNumber":161,"content":"            "},{"type":"INSERT","lineNumber":162,"content":"            // Add some extra connections for more interesting layouts"},{"type":"INSERT","lineNumber":163,"content":"            AddExtraConnections(dungeon, rooms);"},{"type":"INSERT","lineNumber":164,"content":"        }"},{"type":"INSERT","lineNumber":165,"content":""},{"type":"DELETE","lineNumber":126,"oldContent":"                dungeon.SetEndPosition(endRoom.GetRandomPosition());"},{"type":"DELETE","lineNumber":127,"oldContent":"        /// Connects all rooms with corridors using a minimum spanning tree approach"},{"type":"INSERT","lineNumber":167,"content":"        /// Adds additional corridors to create loops and alternative paths"},{"type":"INSERT","lineNumber":168,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":169,"content":"        private void AddExtraConnections(Dungeon dungeon, List<Room> rooms)"},{"type":"INSERT","lineNumber":170,"content":"        {"},{"type":"INSERT","lineNumber":171,"content":"            int extraConnections = Math.Max(1, rooms.Count / 4); // 25% more connections"},{"type":"INSERT","lineNumber":172,"content":"            "},{"type":"INSERT","lineNumber":173,"content":"            for (int i = 0; i < extraConnections; i++)"},{"type":"INSERT","lineNumber":174,"content":"            {"},{"type":"INSERT","lineNumber":175,"content":"                var room1 = rooms[_random.Next(rooms.Count)];"},{"type":"INSERT","lineNumber":176,"content":"                var room2 = rooms[_random.Next(rooms.Count)];"},{"type":"INSERT","lineNumber":177,"content":"                "},{"type":"INSERT","lineNumber":178,"content":"                if (room1 != room2 && room1.DistanceTo(room2) < 20) // Only connect nearby rooms"},{"type":"INSERT","lineNumber":179,"content":"                {"},{"type":"INSERT","lineNumber":180,"content":"                    CreateCorridor(dungeon, room1, room2);"},{"type":"INSERT","lineNumber":181,"content":"                }"},{"type":"INSERT","lineNumber":184,"content":""},{"type":"INSERT","lineNumber":185,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":186,"content":"        /// Creates an L-shaped corridor between two rooms"},{"type":"INSERT","lineNumber":188,"content":"        private void CreateCorridor(Dungeon dungeon, Room room1, Room room2)"},{"type":"INSERT","lineNumber":189,"content":"        {"},{"type":"INSERT","lineNumber":190,"content":"            var start = room1.GetClosestPointTo(room2);"},{"type":"INSERT","lineNumber":191,"content":"            var end = room2.GetClosestPointTo(room1);"},{"type":"INSERT","lineNumber":192,"content":"            "},{"type":"INSERT","lineNumber":193,"content":"            // Choose random direction for the L-shape (horizontal first or vertical first)"},{"type":"INSERT","lineNumber":194,"content":"            if (_random.Next(2) == 0)"},{"type":"INSERT","lineNumber":195,"content":"            {"},{"type":"INSERT","lineNumber":196,"content":"                // Horizontal first, then vertical"},{"type":"INSERT","lineNumber":197,"content":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)start.Y, (int)end.X, (int)start.Y);"},{"type":"INSERT","lineNumber":198,"content":"                dungeon.CreateCorridorBetweenPoints((int)end.X, (int)start.Y, (int)end.X, (int)end.Y);"},{"type":"INSERT","lineNumber":199,"content":"            }"},{"type":"INSERT","lineNumber":200,"content":"            else"},{"type":"INSERT","lineNumber":201,"content":"            {"},{"type":"INSERT","lineNumber":202,"content":"                // Vertical first, then horizontal"},{"type":"INSERT","lineNumber":203,"content":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)start.Y, (int)start.X, (int)end.Y);"},{"type":"INSERT","lineNumber":204,"content":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)end.Y, (int)end.X, (int)end.Y);"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":"            "},{"type":"INSERT","lineNumber":207,"content":"            // Mark connection points"},{"type":"INSERT","lineNumber":208,"content":"            room1.AddConnection(start);"},{"type":"INSERT","lineNumber":209,"content":"            room2.AddConnection(end);"},{"type":"INSERT","lineNumber":210,"content":"        }"},{"type":"DELETE","lineNumber":133,"oldContent":"        private void ConnectRooms(Dungeon dungeon, List<Room> rooms)"},{"type":"DELETE","lineNumber":134,"oldContent":"        /// Generates a dungeon using cellular automata (for more organic caves)"},{"type":"INSERT","lineNumber":213,"content":"        /// Sets the start position in the first room and end position in the last room"},{"type":"INSERT","lineNumber":215,"content":"        private void SetStartAndEndPositions(Dungeon dungeon, List<Room> rooms)"},{"type":"INSERT","lineNumber":217,"content":"            if (rooms.Count == 0) return;"},{"type":"INSERT","lineNumber":218,"content":"            "},{"type":"INSERT","lineNumber":219,"content":"            // Start position in the first room"},{"type":"INSERT","lineNumber":220,"content":"            var startRoom = rooms[0];"},{"type":"INSERT","lineNumber":221,"content":"            startRoom.Type = RoomType.StartRoom;"},{"type":"INSERT","lineNumber":222,"content":"            dungeon.SetStartPosition(startRoom.GetRandomPosition());"},{"type":"INSERT","lineNumber":223,"content":"            "},{"type":"INSERT","lineNumber":224,"content":"            // End position in the room farthest from start"},{"type":"INSERT","lineNumber":225,"content":"            if (rooms.Count > 1)"},{"type":"INSERT","lineNumber":226,"content":"            {"},{"type":"INSERT","lineNumber":227,"content":"                Room endRoom = rooms[1];"},{"type":"INSERT","lineNumber":228,"content":"                float maxDistance = 0;"},{"type":"INSERT","lineNumber":229,"content":"                "},{"type":"INSERT","lineNumber":230,"content":"                foreach (var room in rooms.Skip(1))"},{"type":"INSERT","lineNumber":231,"content":"                {"},{"type":"INSERT","lineNumber":232,"content":"                    float distance = startRoom.DistanceTo(room);"},{"type":"INSERT","lineNumber":233,"content":"                    if (distance > maxDistance)"},{"type":"INSERT","lineNumber":234,"content":"                    {"},{"type":"INSERT","lineNumber":235,"content":"                        maxDistance = distance;"},{"type":"INSERT","lineNumber":236,"content":"                        endRoom = room;"},{"type":"INSERT","lineNumber":237,"content":"                    }"},{"type":"INSERT","lineNumber":238,"content":"                }"},{"type":"INSERT","lineNumber":239,"content":"                "},{"type":"INSERT","lineNumber":240,"content":"                endRoom.Type = RoomType.EndRoom;"},{"type":"INSERT","lineNumber":241,"content":"                dungeon.SetEndPosition(endRoom.GetRandomPosition());"},{"type":"INSERT","lineNumber":242,"content":"            }"},{"type":"INSERT","lineNumber":243,"content":"        }"},{"type":"INSERT","lineNumber":244,"content":""},{"type":"INSERT","lineNumber":245,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":246,"content":"        /// Generates a dungeon using cellular automata (for more organic caves)"},{"type":"INSERT","lineNumber":247,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":139,"oldContent":"            if (rooms.Count <= 1) return;"},{"type":"DELETE","lineNumber":142,"oldContent":"            "},{"type":"DELETE","lineNumber":145,"oldContent":"            var connectedRooms = new HashSet<Room> { rooms[0] };"},{"type":"DELETE","lineNumber":148,"oldContent":"            var unconnectedRooms = new HashSet<Room>(rooms.Skip(1));"},{"type":"DELETE","lineNumber":151,"oldContent":"            "},{"type":"DELETE","lineNumber":154,"oldContent":"            while (unconnectedRooms.Count > 0)"},{"type":"DELETE","lineNumber":156,"oldContent":"            {"},{"type":"INSERT","lineNumber":261,"content":"                    }"},{"type":"DELETE","lineNumber":159,"oldContent":"                Room closestConnected = null;"},{"type":"DELETE","lineNumber":162,"oldContent":"                Room closestUnconnected = null;"},{"type":"DELETE","lineNumber":165,"oldContent":"                float shortestDistance = float.MaxValue;"},{"type":"DELETE","lineNumber":168,"oldContent":"                "},{"type":"DELETE","lineNumber":171,"oldContent":"                // Find the shortest connection between connected and unconnected rooms"},{"type":"DELETE","lineNumber":174,"oldContent":"                foreach (var connected in connectedRooms)"},{"type":"DELETE","lineNumber":177,"oldContent":"                {"},{"type":"DELETE","lineNumber":180,"oldContent":"                    foreach (var unconnected in unconnectedRooms)"},{"type":"DELETE","lineNumber":183,"oldContent":"                    {"},{"type":"DELETE","lineNumber":186,"oldContent":"                        float distance = connected.DistanceTo(unconnected);"},{"type":"DELETE","lineNumber":189,"oldContent":"                        if (distance < shortestDistance)"},{"type":"INSERT","lineNumber":284,"content":"                "},{"type":"DELETE","lineNumber":191,"oldContent":"                        {"},{"type":"DELETE","lineNumber":194,"oldContent":"                            shortestDistance = distance;"},{"type":"DELETE","lineNumber":197,"oldContent":"                            closestConnected = connected;"},{"type":"DELETE","lineNumber":200,"oldContent":"                            closestUnconnected = unconnected;"},{"type":"DELETE","lineNumber":203,"oldContent":"                        }"},{"type":"DELETE","lineNumber":206,"oldContent":"                    }"},{"type":"DELETE","lineNumber":209,"oldContent":"                }"},{"type":"DELETE","lineNumber":212,"oldContent":"                "},{"type":"DELETE","lineNumber":215,"oldContent":"                // Create corridor between the closest rooms"},{"type":"DELETE","lineNumber":218,"oldContent":"                if (closestConnected != null && closestUnconnected != null)"},{"type":"DELETE","lineNumber":221,"oldContent":"                {"},{"type":"DELETE","lineNumber":224,"oldContent":"                    CreateCorridor(dungeon, closestConnected, closestUnconnected);"},{"type":"DELETE","lineNumber":227,"oldContent":"                    connectedRooms.Add(closestUnconnected);"},{"type":"DELETE","lineNumber":230,"oldContent":"                    unconnectedRooms.Remove(closestUnconnected);"},{"type":"DELETE","lineNumber":235,"oldContent":"            }"},{"type":"DELETE","lineNumber":237,"oldContent":"            "},{"type":"DELETE","lineNumber":240,"oldContent":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"DELETE","lineNumber":241,"oldContent":"            // Add some extra connections for more interesting layouts"},{"type":"INSERT","lineNumber":319,"content":"                for (var y = 0; y < dungeon.Height; y++)"},{"type":"DELETE","lineNumber":244,"oldContent":"            AddExtraConnections(dungeon, rooms);"},{"type":"DELETE","lineNumber":248,"oldContent":"        }"},{"type":"DELETE","lineNumber":250,"oldContent":""},{"type":"DELETE","lineNumber":253,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":256,"oldContent":"        /// Adds additional corridors to create loops and alternative paths"},{"type":"DELETE","lineNumber":259,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":262,"oldContent":"        private void AddExtraConnections(Dungeon dungeon, List<Room> rooms)"},{"type":"DELETE","lineNumber":265,"oldContent":"        {"},{"type":"DELETE","lineNumber":268,"oldContent":"            int extraConnections = Math.Max(1, rooms.Count / 4); // 25% more connections"},{"type":"DELETE","lineNumber":271,"oldContent":"            "},{"type":"DELETE","lineNumber":274,"oldContent":"            for (int i = 0; i < extraConnections; i++)"},{"type":"DELETE","lineNumber":277,"oldContent":"            {"},{"type":"DELETE","lineNumber":280,"oldContent":"                var room1 = rooms[_random.Next(rooms.Count)];"},{"type":"DELETE","lineNumber":283,"oldContent":"                var room2 = rooms[_random.Next(rooms.Count)];"},{"type":"DELETE","lineNumber":286,"oldContent":"                "},{"type":"DELETE","lineNumber":289,"oldContent":"                if (room1 != room2 && room1.DistanceTo(room2) < 20) // Only connect nearby rooms"},{"type":"DELETE","lineNumber":293,"oldContent":"                {"},{"type":"DELETE","lineNumber":295,"oldContent":"                    CreateCorridor(dungeon, room1, room2);"},{"type":"DELETE","lineNumber":298,"oldContent":"                }"},{"type":"DELETE","lineNumber":301,"oldContent":"            }"},{"type":"DELETE","lineNumber":303,"oldContent":"        }"},{"type":"DELETE","lineNumber":307,"oldContent":""},{"type":"DELETE","lineNumber":310,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":313,"oldContent":"        /// Creates an L-shaped corridor between two rooms"},{"type":"DELETE","lineNumber":316,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":319,"oldContent":"        private void CreateCorridor(Dungeon dungeon, Room room1, Room room2)"},{"type":"DELETE","lineNumber":322,"oldContent":"        {"},{"type":"DELETE","lineNumber":325,"oldContent":"            var start = room1.GetClosestPointTo(room2);"},{"type":"DELETE","lineNumber":328,"oldContent":"            var end = room2.GetClosestPointTo(room1);"},{"type":"DELETE","lineNumber":331,"oldContent":"            "},{"type":"DELETE","lineNumber":334,"oldContent":"            // Choose random direction for the L-shape (horizontal first or vertical first)"},{"type":"DELETE","lineNumber":337,"oldContent":"            if (_random.Next(2) == 0)"},{"type":"DELETE","lineNumber":339,"oldContent":"            {"},{"type":"DELETE","lineNumber":343,"oldContent":"                // Horizontal first, then vertical"},{"type":"DELETE","lineNumber":346,"oldContent":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)start.Y, (int)end.X, (int)start.Y);"},{"type":"DELETE","lineNumber":349,"oldContent":"                dungeon.CreateCorridorBetweenPoints((int)end.X, (int)start.Y, (int)end.X, (int)end.Y);"},{"type":"DELETE","lineNumber":352,"oldContent":"            }"},{"type":"DELETE","lineNumber":355,"oldContent":"            else"},{"type":"DELETE","lineNumber":358,"oldContent":"            {"},{"type":"DELETE","lineNumber":361,"oldContent":"                // Vertical first, then horizontal"},{"type":"DELETE","lineNumber":364,"oldContent":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)start.Y, (int)start.X, (int)end.Y);"},{"type":"DELETE","lineNumber":367,"oldContent":"                dungeon.CreateCorridorBetweenPoints((int)start.X, (int)end.Y, (int)end.X, (int)end.Y);"},{"type":"DELETE","lineNumber":371,"oldContent":"            }"},{"type":"DELETE","lineNumber":373,"oldContent":"            "},{"type":"DELETE","lineNumber":376,"oldContent":"            // Mark connection points"},{"type":"DELETE","lineNumber":379,"oldContent":"            room1.AddConnection(start);"},{"type":"DELETE","lineNumber":382,"oldContent":"            room2.AddConnection(end);"},{"type":"DELETE","lineNumber":385,"oldContent":"        }"},{"type":"DELETE","lineNumber":388,"oldContent":""},{"type":"DELETE","lineNumber":391,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":394,"oldContent":"        /// Sets the start position in the first room and end position in the last room"},{"type":"DELETE","lineNumber":397,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":400,"oldContent":"        private void SetStartAndEndPositions(Dungeon dungeon, List<Room> rooms)"},{"type":"DELETE","lineNumber":403,"oldContent":"        {"},{"type":"DELETE","lineNumber":406,"oldContent":"            if (rooms.Count == 0) return;"},{"type":"DELETE","lineNumber":409,"oldContent":"            "},{"type":"DELETE","lineNumber":412,"oldContent":"            // Start position in the first room"},{"type":"DELETE","lineNumber":415,"oldContent":"            var startRoom = rooms[0];"},{"type":"DELETE","lineNumber":418,"oldContent":"            startRoom.Type = RoomType.StartRoom;"},{"type":"DELETE","lineNumber":421,"oldContent":"            dungeon.SetStartPosition(startRoom.GetRandomPosition());"},{"type":"DELETE","lineNumber":424,"oldContent":"            "},{"type":"DELETE","lineNumber":427,"oldContent":"            // End position in the room farthest from start"},{"type":"DELETE","lineNumber":430,"oldContent":"            if (rooms.Count > 1)"},{"type":"DELETE","lineNumber":433,"oldContent":"            {"},{"type":"DELETE","lineNumber":436,"oldContent":"                Room endRoom = rooms[1];"},{"type":"DELETE","lineNumber":439,"oldContent":"                float maxDistance = 0;"},{"type":"DELETE","lineNumber":442,"oldContent":"                "},{"type":"DELETE","lineNumber":445,"oldContent":"                foreach (var room in rooms.Skip(1))"},{"type":"DELETE","lineNumber":448,"oldContent":"                {"},{"type":"DELETE","lineNumber":451,"oldContent":"                    float distance = startRoom.DistanceTo(room);"},{"type":"DELETE","lineNumber":454,"oldContent":"                    if (distance > maxDistance)"},{"type":"DELETE","lineNumber":457,"oldContent":"                    {"},{"type":"DELETE","lineNumber":460,"oldContent":"                        maxDistance = distance;"},{"type":"DELETE","lineNumber":463,"oldContent":"                        endRoom = room;"},{"type":"DELETE","lineNumber":465,"oldContent":"                endRoom.Type = RoomType.EndRoom;"},{"type":"DELETE","lineNumber":467,"oldContent":"                    }"},{"type":"DELETE","lineNumber":469,"oldContent":"                "},{"type":"DELETE","lineNumber":471,"oldContent":"                }"},{"type":"DELETE","lineNumber":473,"oldContent":"}"},{"type":"MODIFY","lineNumber":476,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":477,"content":"}"}]},{"timestamp":1756230473305,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"{"},{"type":"INSERT","lineNumber":7,"content":""},{"type":"INSERT","lineNumber":9,"content":"{"},{"type":"MODIFY","lineNumber":122,"content":"        /// <summary>","oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":124,"oldContent":"                }"},{"type":"DELETE","lineNumber":126,"oldContent":"                "},{"type":"DELETE","lineNumber":128,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":132,"oldContent":"            }"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"DELETE","lineNumber":136,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":138,"oldContent":""},{"type":"DELETE","lineNumber":140,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":144,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":146,"oldContent":"        {"},{"type":"DELETE","lineNumber":148,"oldContent":"        public Dungeon GenerateCavelike(int width, int height, float wallProbability = 0.45f, int iterations = 5)"},{"type":"DELETE","lineNumber":150,"oldContent":"        {"},{"type":"DELETE","lineNumber":153,"oldContent":"            var dungeon = new Dungeon(width, height);"},{"type":"DELETE","lineNumber":155,"oldContent":"            "},{"type":"DELETE","lineNumber":158,"oldContent":"            // Initialize with random walls"},{"type":"DELETE","lineNumber":160,"oldContent":"            for (int x = 0; x < width; x++)"},{"type":"DELETE","lineNumber":163,"oldContent":"            {"},{"type":"DELETE","lineNumber":165,"oldContent":"                for (int y = 0; y < height; y++)"},{"type":"DELETE","lineNumber":168,"oldContent":"                {"},{"type":"DELETE","lineNumber":170,"oldContent":"                    if (x == 0 || x == width - 1 || y == 0 || y == height - 1)"},{"type":"DELETE","lineNumber":171,"oldContent":"                    {"},{"type":"INSERT","lineNumber":151,"content":"                }"},{"type":"INSERT","lineNumber":152,"content":"                "},{"type":"DELETE","lineNumber":173,"oldContent":"                        // Keep borders as walls"},{"type":"DELETE","lineNumber":176,"oldContent":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"DELETE","lineNumber":179,"oldContent":"                    else if (_random.NextDouble() < wallProbability)"},{"type":"DELETE","lineNumber":181,"oldContent":"                    {"},{"type":"DELETE","lineNumber":184,"oldContent":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"DELETE","lineNumber":186,"oldContent":"                    }"},{"type":"DELETE","lineNumber":189,"oldContent":"                    else"},{"type":"DELETE","lineNumber":191,"oldContent":"                    {"},{"type":"DELETE","lineNumber":193,"oldContent":"                        dungeon.Tiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":166,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":195,"oldContent":"                    }"},{"type":"DELETE","lineNumber":198,"oldContent":"                }"},{"type":"DELETE","lineNumber":200,"oldContent":"            }"},{"type":"DELETE","lineNumber":203,"oldContent":"            "},{"type":"DELETE","lineNumber":205,"oldContent":"            // Apply cellular automata rules"},{"type":"DELETE","lineNumber":208,"oldContent":"            for (int iteration = 0; iteration < iterations; iteration++)"},{"type":"DELETE","lineNumber":210,"oldContent":"            {"},{"type":"DELETE","lineNumber":213,"oldContent":"                ApplyCellularAutomataRules(dungeon);"},{"type":"DELETE","lineNumber":215,"oldContent":"            }"},{"type":"DELETE","lineNumber":218,"oldContent":"            "},{"type":"DELETE","lineNumber":219,"oldContent":"            // Find and connect the largest open areas"},{"type":"INSERT","lineNumber":182,"content":"            }"},{"type":"INSERT","lineNumber":183,"content":"        }"},{"type":"DELETE","lineNumber":221,"oldContent":"            var openAreas = FindOpenAreas(dungeon);"},{"type":"DELETE","lineNumber":223,"oldContent":"            if (openAreas.Count > 0)"},{"type":"DELETE","lineNumber":225,"oldContent":"            {"},{"type":"INSERT","lineNumber":187,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":227,"oldContent":"                ConnectOpenAreas(dungeon, openAreas);"},{"type":"DELETE","lineNumber":230,"oldContent":"                // Set start and end positions"},{"type":"DELETE","lineNumber":233,"oldContent":"                var startArea = openAreas[0];"},{"type":"DELETE","lineNumber":235,"oldContent":"                var endArea = openAreas[openAreas.Count - 1];"},{"type":"DELETE","lineNumber":238,"oldContent":"                "},{"type":"DELETE","lineNumber":240,"oldContent":"                dungeon.SetStartPosition(GetRandomPositionInArea(startArea));"},{"type":"DELETE","lineNumber":243,"oldContent":"                dungeon.SetEndPosition(GetRandomPositionInArea(endArea));"},{"type":"DELETE","lineNumber":245,"oldContent":"            }"},{"type":"DELETE","lineNumber":248,"oldContent":"            "},{"type":"DELETE","lineNumber":250,"oldContent":"            return dungeon;"},{"type":"DELETE","lineNumber":253,"oldContent":"        }"},{"type":"DELETE","lineNumber":255,"oldContent":""},{"type":"DELETE","lineNumber":258,"oldContent":"        private void ApplyCellularAutomataRules(Dungeon dungeon)"},{"type":"DELETE","lineNumber":260,"oldContent":"        {"},{"type":"DELETE","lineNumber":263,"oldContent":"            var newTiles = new Tile[dungeon.Width, dungeon.Height];"},{"type":"DELETE","lineNumber":264,"oldContent":"            "},{"type":"INSERT","lineNumber":211,"content":""},{"type":"INSERT","lineNumber":212,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":266,"oldContent":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"DELETE","lineNumber":267,"oldContent":"            {"},{"type":"INSERT","lineNumber":214,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":269,"oldContent":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":216,"content":"        {"},{"type":"DELETE","lineNumber":271,"oldContent":"                {"},{"type":"DELETE","lineNumber":274,"oldContent":"                    int neighborWalls = CountNeighborWalls(dungeon, x, y);"},{"type":"DELETE","lineNumber":276,"oldContent":"                    "},{"type":"DELETE","lineNumber":279,"oldContent":"                    if (neighborWalls > 4)"},{"type":"DELETE","lineNumber":281,"oldContent":"                    {"},{"type":"DELETE","lineNumber":284,"oldContent":"                        newTiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"DELETE","lineNumber":286,"oldContent":"                    }"},{"type":"DELETE","lineNumber":289,"oldContent":"                    else"},{"type":"DELETE","lineNumber":291,"oldContent":"                    {"},{"type":"DELETE","lineNumber":294,"oldContent":"                        newTiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"DELETE","lineNumber":296,"oldContent":"                    }"},{"type":"DELETE","lineNumber":298,"oldContent":"                }"},{"type":"DELETE","lineNumber":300,"oldContent":"            }"},{"type":"DELETE","lineNumber":303,"oldContent":"            "},{"type":"DELETE","lineNumber":306,"oldContent":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"DELETE","lineNumber":308,"oldContent":"            {"},{"type":"DELETE","lineNumber":312,"oldContent":"                {"},{"type":"DELETE","lineNumber":314,"oldContent":"                    dungeon.Tiles[x, y] = newTiles[x, y];"},{"type":"DELETE","lineNumber":317,"oldContent":"                }"},{"type":"DELETE","lineNumber":319,"oldContent":"            }"},{"type":"INSERT","lineNumber":248,"content":"        public Dungeon GenerateCavelike(int width, int height, float wallProbability = 0.45f, int iterations = 5)"},{"type":"INSERT","lineNumber":249,"content":"        {"},{"type":"INSERT","lineNumber":250,"content":"            var dungeon = new Dungeon(width, height);"},{"type":"INSERT","lineNumber":251,"content":"            "},{"type":"INSERT","lineNumber":252,"content":"            // Initialize with random walls"},{"type":"INSERT","lineNumber":253,"content":"            for (int x = 0; x < width; x++)"},{"type":"INSERT","lineNumber":254,"content":"            {"},{"type":"INSERT","lineNumber":255,"content":"                for (int y = 0; y < height; y++)"},{"type":"INSERT","lineNumber":256,"content":"                {"},{"type":"INSERT","lineNumber":257,"content":"                    if (x == 0 || x == width - 1 || y == 0 || y == height - 1)"},{"type":"INSERT","lineNumber":258,"content":"                    {"},{"type":"INSERT","lineNumber":259,"content":"                        // Keep borders as walls"},{"type":"INSERT","lineNumber":260,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":261,"content":"                    }"},{"type":"INSERT","lineNumber":262,"content":"                    else if (_random.NextDouble() < wallProbability)"},{"type":"INSERT","lineNumber":263,"content":"                    {"},{"type":"INSERT","lineNumber":264,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":265,"content":"                    }"},{"type":"INSERT","lineNumber":266,"content":"                    else"},{"type":"INSERT","lineNumber":267,"content":"                    {"},{"type":"INSERT","lineNumber":268,"content":"                        dungeon.Tiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":269,"content":"                    }"},{"type":"INSERT","lineNumber":270,"content":"                }"},{"type":"INSERT","lineNumber":271,"content":"            }"},{"type":"INSERT","lineNumber":272,"content":"            "},{"type":"INSERT","lineNumber":273,"content":"            // Apply cellular automata rules"},{"type":"INSERT","lineNumber":274,"content":"            for (int iteration = 0; iteration < iterations; iteration++)"},{"type":"INSERT","lineNumber":275,"content":"            {"},{"type":"INSERT","lineNumber":276,"content":"                ApplyCellularAutomataRules(dungeon);"},{"type":"INSERT","lineNumber":277,"content":"            }"},{"type":"INSERT","lineNumber":278,"content":"            "},{"type":"INSERT","lineNumber":279,"content":"            // Find and connect the largest open areas"},{"type":"INSERT","lineNumber":280,"content":"            var openAreas = FindOpenAreas(dungeon);"},{"type":"INSERT","lineNumber":281,"content":"            if (openAreas.Count > 0)"},{"type":"INSERT","lineNumber":282,"content":"            {"},{"type":"INSERT","lineNumber":283,"content":"                ConnectOpenAreas(dungeon, openAreas);"},{"type":"INSERT","lineNumber":284,"content":"                "},{"type":"INSERT","lineNumber":285,"content":"                // Set start and end positions"},{"type":"INSERT","lineNumber":286,"content":"                var startArea = openAreas[0];"},{"type":"INSERT","lineNumber":287,"content":"                var endArea = openAreas[openAreas.Count - 1];"},{"type":"INSERT","lineNumber":288,"content":"                "},{"type":"INSERT","lineNumber":289,"content":"                dungeon.SetStartPosition(GetRandomPositionInArea(startArea));"},{"type":"INSERT","lineNumber":290,"content":"                dungeon.SetEndPosition(GetRandomPositionInArea(endArea));"},{"type":"INSERT","lineNumber":291,"content":"            }"},{"type":"INSERT","lineNumber":292,"content":"            "},{"type":"INSERT","lineNumber":293,"content":"            return dungeon;"},{"type":"INSERT","lineNumber":296,"content":"        private void ApplyCellularAutomataRules(Dungeon dungeon)"},{"type":"INSERT","lineNumber":297,"content":"        {"},{"type":"INSERT","lineNumber":298,"content":"            var newTiles = new Tile[dungeon.Width, dungeon.Height];"},{"type":"INSERT","lineNumber":299,"content":"            "},{"type":"INSERT","lineNumber":300,"content":"            for (int x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":301,"content":"            {"},{"type":"INSERT","lineNumber":302,"content":"                for (int y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":303,"content":"                {"},{"type":"INSERT","lineNumber":304,"content":"                    int neighborWalls = CountNeighborWalls(dungeon, x, y);"},{"type":"INSERT","lineNumber":305,"content":"                    "},{"type":"INSERT","lineNumber":306,"content":"                    if (neighborWalls > 4)"},{"type":"INSERT","lineNumber":307,"content":"                    {"},{"type":"INSERT","lineNumber":308,"content":"                        newTiles[x, y] = new Tile(TileType.Wall, x, y);"},{"type":"INSERT","lineNumber":309,"content":"                    }"},{"type":"INSERT","lineNumber":310,"content":"                    else"},{"type":"INSERT","lineNumber":311,"content":"                    {"},{"type":"INSERT","lineNumber":312,"content":"                        newTiles[x, y] = new Tile(TileType.Floor, x, y);"},{"type":"INSERT","lineNumber":313,"content":"                    }"},{"type":"INSERT","lineNumber":314,"content":"                }"},{"type":"INSERT","lineNumber":315,"content":"            }"},{"type":"INSERT","lineNumber":316,"content":"            "},{"type":"INSERT","lineNumber":317,"content":"            for (var x = 0; x < dungeon.Width; x++)"},{"type":"INSERT","lineNumber":318,"content":"            {"},{"type":"INSERT","lineNumber":319,"content":"                for (var y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":320,"content":"                {"},{"type":"INSERT","lineNumber":321,"content":"                    dungeon.Tiles[x, y] = newTiles[x, y];"},{"type":"INSERT","lineNumber":322,"content":"                }"},{"type":"INSERT","lineNumber":323,"content":"            }"},{"type":"INSERT","lineNumber":324,"content":"        }"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"DELETE","lineNumber":330,"oldContent":"                    }"},{"type":"DELETE","lineNumber":346,"oldContent":"                "},{"type":"DELETE","lineNumber":371,"oldContent":"                for (var y = 0; y < dungeon.Height; y++)"},{"type":"INSERT","lineNumber":474,"content":"            return hasWalkableTiles;"},{"type":"INSERT","lineNumber":475,"content":"        }"},{"type":"DELETE","lineNumber":475,"oldContent":"    }"},{"type":"DELETE","lineNumber":477,"oldContent":"        }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Data/SaveManager.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Data/SaveManager.cs","baseContent":"namespace DungeonExplorer.Data;\n\npublic class SaveManager\n{\n    \n}","baseTimestamp":1756230527056,"deltas":[{"timestamp":1756230758409,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using System.IO;","oldContent":"namespace DungeonExplorer.Data;"},{"type":"INSERT","lineNumber":1,"content":"using System.Text.Json;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class SaveManager"},{"type":"INSERT","lineNumber":3,"content":"namespace DungeonExplorer.Data"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":5,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":6,"content":"    /// Gestisce il salvataggio e il caricamento del gioco su file JSON."},{"type":"INSERT","lineNumber":7,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":8,"content":"    public class SaveManager"},{"type":"INSERT","lineNumber":9,"content":"    {"},{"type":"INSERT","lineNumber":10,"content":"        private readonly JsonSerializerOptions _options;"},{"type":"INSERT","lineNumber":11,"content":""},{"type":"INSERT","lineNumber":12,"content":"        public SaveManager()"},{"type":"INSERT","lineNumber":13,"content":"        {"},{"type":"INSERT","lineNumber":14,"content":"            _options = new JsonSerializerOptions"},{"type":"INSERT","lineNumber":15,"content":"            {"},{"type":"INSERT","lineNumber":16,"content":"                WriteIndented = true // per rendere il JSON leggibile"},{"type":"INSERT","lineNumber":17,"content":"            };"},{"type":"INSERT","lineNumber":18,"content":"        }"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":21,"content":"        /// Salva i dati di gioco in un file JSON."},{"type":"INSERT","lineNumber":22,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":23,"content":"        public void SaveGame(GameData data, string filePath)"},{"type":"INSERT","lineNumber":24,"content":"        {"},{"type":"INSERT","lineNumber":25,"content":"            var json = JsonSerializer.Serialize(data, _options);"},{"type":"INSERT","lineNumber":26,"content":"            File.WriteAllText(filePath, json);"},{"type":"INSERT","lineNumber":27,"content":"        }"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":30,"content":"        /// Carica i dati di gioco da un file JSON."},{"type":"INSERT","lineNumber":31,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":32,"content":"        public GameData LoadGame(string filePath)"},{"type":"INSERT","lineNumber":33,"content":"        {"},{"type":"INSERT","lineNumber":34,"content":"            if (!File.Exists(filePath))"},{"type":"INSERT","lineNumber":35,"content":"                return null;"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"            var json = File.ReadAllText(filePath);"},{"type":"INSERT","lineNumber":38,"content":"            return JsonSerializer.Deserialize<GameData>(json, _options);"},{"type":"INSERT","lineNumber":39,"content":"        }"},{"type":"INSERT","lineNumber":40,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Data/PlayerProgress.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Data/PlayerProgress.cs","baseContent":"namespace DungeonExplorer.Data;\n\npublic class PlayerProgress\n{\n    \n}","baseTimestamp":1756230538646,"deltas":[{"timestamp":1756231108499,"changes":[{"type":"MODIFY","lineNumber":0,"content":"using System;","oldContent":"namespace DungeonExplorer.Data;"},{"type":"INSERT","lineNumber":1,"content":"using System.Collections.Generic;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class PlayerProgress"},{"type":"INSERT","lineNumber":3,"content":"namespace DungeonExplorer.Data"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":5,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":6,"content":"    /// Tracks player progress, achievements, and statistics across multiple games"},{"type":"INSERT","lineNumber":7,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":8,"content":"    public class PlayerProgress"},{"type":"INSERT","lineNumber":9,"content":"    {"},{"type":"INSERT","lineNumber":10,"content":"        // Overall Statistics"},{"type":"INSERT","lineNumber":11,"content":"        public int TotalGamesPlayed { get; set; }"},{"type":"INSERT","lineNumber":12,"content":"        public int TotalScore { get; set; }"},{"type":"INSERT","lineNumber":13,"content":"        public int HighestScore { get; set; }"},{"type":"INSERT","lineNumber":14,"content":"        public int TotalTreasuresCollected { get; set; }"},{"type":"INSERT","lineNumber":15,"content":"        public int TotalEnemiesDefeated { get; set; }"},{"type":"INSERT","lineNumber":16,"content":"        public int HighestLevelReached { get; set; }"},{"type":"INSERT","lineNumber":17,"content":"        public TimeSpan TotalPlayTime { get; set; }"},{"type":"INSERT","lineNumber":18,"content":"        public TimeSpan BestCompletionTime { get; set; }"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"        // Achievements"},{"type":"INSERT","lineNumber":21,"content":"        public Dictionary<string, bool> Achievements { get; set; }"},{"type":"INSERT","lineNumber":22,"content":"        public Dictionary<string, DateTime> AchievementDates { get; set; }"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"        // Per-level statistics"},{"type":"INSERT","lineNumber":25,"content":"        public Dictionary<int, LevelStats> LevelStatistics { get; set; }"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"        // Preferences and unlocks"},{"type":"INSERT","lineNumber":28,"content":"        public PlayerPreferences Preferences { get; set; }"},{"type":"INSERT","lineNumber":29,"content":"        public List<string> UnlockedContent { get; set; }"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":"        public PlayerProgress()"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"            Achievements = new Dictionary<string, bool>();"},{"type":"INSERT","lineNumber":34,"content":"            AchievementDates = new Dictionary<string, DateTime>();"},{"type":"INSERT","lineNumber":35,"content":"            LevelStatistics = new Dictionary<int, LevelStats>();"},{"type":"INSERT","lineNumber":36,"content":"            Preferences = new PlayerPreferences();"},{"type":"INSERT","lineNumber":37,"content":"            UnlockedContent = new List<string>();"},{"type":"INSERT","lineNumber":38,"content":"            "},{"type":"INSERT","lineNumber":39,"content":"            InitializeAchievements();"},{"type":"INSERT","lineNumber":40,"content":"        }"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":42,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":43,"content":"        /// Initialize available achievements"},{"type":"INSERT","lineNumber":44,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":45,"content":"        private void InitializeAchievements()"},{"type":"INSERT","lineNumber":46,"content":"        {"},{"type":"INSERT","lineNumber":47,"content":"            var achievementList = new[]"},{"type":"INSERT","lineNumber":48,"content":"            {"},{"type":"INSERT","lineNumber":49,"content":"                \"first_treasure\",      // Collect your first treasure"},{"type":"INSERT","lineNumber":50,"content":"                \"treasure_hunter\",     // Collect 50 treasures"},{"type":"INSERT","lineNumber":51,"content":"                \"treasure_master\",     // Collect 100 treasures"},{"type":"INSERT","lineNumber":52,"content":"                \"first_enemy\",         // Defeat your first enemy"},{"type":"INSERT","lineNumber":53,"content":"                \"enemy_slayer\",        // Defeat 100 enemies"},{"type":"INSERT","lineNumber":54,"content":"                \"enemy_destroyer\",     // Defeat 500 enemies"},{"type":"INSERT","lineNumber":55,"content":"                \"survivor\",            // Complete a level without taking damage"},{"type":"INSERT","lineNumber":56,"content":"                \"speed_runner\",        // Complete a level in under 2 minutes"},{"type":"INSERT","lineNumber":57,"content":"                \"explorer\",            // Complete 10 levels"},{"type":"INSERT","lineNumber":58,"content":"                \"dungeon_master\",      // Complete 50 levels"},{"type":"INSERT","lineNumber":59,"content":"                \"high_scorer\",         // Reach 10,000 points"},{"type":"INSERT","lineNumber":60,"content":"                \"score_master\",        // Reach 100,000 points"},{"type":"INSERT","lineNumber":61,"content":"                \"marathon_runner\",     // Play for 5 hours total"},{"type":"INSERT","lineNumber":62,"content":"                \"dedication\",          // Play for 20 hours total"},{"type":"INSERT","lineNumber":63,"content":"                \"perfect_run\"          // Complete a game without dying"},{"type":"INSERT","lineNumber":64,"content":"            };"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"            foreach (var achievement in achievementList)"},{"type":"INSERT","lineNumber":67,"content":"            {"},{"type":"INSERT","lineNumber":68,"content":"                Achievements[achievement] = false;"},{"type":"INSERT","lineNumber":69,"content":"            }"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":73,"content":"        /// Update progress after completing a game"},{"type":"INSERT","lineNumber":74,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":75,"content":"        public void UpdateGameProgress(int score, int level, int treasuresCollected, int enemiesDefeated, TimeSpan gameTime, bool died)"},{"type":"INSERT","lineNumber":76,"content":"        {"},{"type":"INSERT","lineNumber":77,"content":"            TotalGamesPlayed++;"},{"type":"INSERT","lineNumber":78,"content":"            TotalScore += score;"},{"type":"INSERT","lineNumber":79,"content":"            TotalTreasuresCollected += treasuresCollected;"},{"type":"INSERT","lineNumber":80,"content":"            TotalEnemiesDefeated += enemiesDefeated;"},{"type":"INSERT","lineNumber":81,"content":"            TotalPlayTime = TotalPlayTime.Add(gameTime);"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"            if (score > HighestScore)"},{"type":"INSERT","lineNumber":84,"content":"                HighestScore = score;"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"INSERT","lineNumber":86,"content":"            if (level > HighestLevelReached)"},{"type":"INSERT","lineNumber":87,"content":"                HighestLevelReached = level;"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"            if (!died && (BestCompletionTime == TimeSpan.Zero || gameTime < BestCompletionTime))"},{"type":"INSERT","lineNumber":90,"content":"                BestCompletionTime = gameTime;"},{"type":"INSERT","lineNumber":91,"content":""},{"type":"INSERT","lineNumber":92,"content":"            // Update level statistics"},{"type":"INSERT","lineNumber":93,"content":"            if (!LevelStatistics.ContainsKey(level))"},{"type":"INSERT","lineNumber":94,"content":"                LevelStatistics[level] = new LevelStats();"},{"type":"INSERT","lineNumber":95,"content":"            "},{"type":"INSERT","lineNumber":96,"content":"            LevelStatistics[level].UpdateStats(score, gameTime, !died);"},{"type":"INSERT","lineNumber":97,"content":""},{"type":"INSERT","lineNumber":98,"content":"            // Check for achievements"},{"type":"INSERT","lineNumber":99,"content":"            CheckAchievements(treasuresCollected, enemiesDefeated, !died, gameTime);"},{"type":"INSERT","lineNumber":100,"content":"        }"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":103,"content":"        /// Check and unlock achievements based on current progress"},{"type":"INSERT","lineNumber":104,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":105,"content":"        private void CheckAchievements(int sessionTreasures, int sessionEnemies, bool survived, TimeSpan sessionTime)"},{"type":"INSERT","lineNumber":106,"content":"        {"},{"type":"INSERT","lineNumber":107,"content":"            // Treasure achievements"},{"type":"INSERT","lineNumber":108,"content":"            if (sessionTreasures > 0)"},{"type":"INSERT","lineNumber":109,"content":"                UnlockAchievement(\"first_treasure\");"},{"type":"INSERT","lineNumber":110,"content":"            if (TotalTreasuresCollected >= 50)"},{"type":"INSERT","lineNumber":111,"content":"                UnlockAchievement(\"treasure_hunter\");"},{"type":"INSERT","lineNumber":112,"content":"            if (TotalTreasuresCollected >= 100)"},{"type":"INSERT","lineNumber":113,"content":"                UnlockAchievement(\"treasure_master\");"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"INSERT","lineNumber":115,"content":"            // Enemy achievements"},{"type":"INSERT","lineNumber":116,"content":"            if (sessionEnemies > 0)"},{"type":"INSERT","lineNumber":117,"content":"                UnlockAchievement(\"first_enemy\");"},{"type":"INSERT","lineNumber":118,"content":"            if (TotalEnemiesDefeated >= 100)"},{"type":"INSERT","lineNumber":119,"content":"                UnlockAchievement(\"enemy_slayer\");"},{"type":"INSERT","lineNumber":120,"content":"            if (TotalEnemiesDefeated >= 500)"},{"type":"INSERT","lineNumber":121,"content":"                UnlockAchievement(\"enemy_destroyer\");"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"            // Gameplay achievements"},{"type":"INSERT","lineNumber":124,"content":"            if (survived)"},{"type":"INSERT","lineNumber":125,"content":"                UnlockAchievement(\"survivor\");"},{"type":"INSERT","lineNumber":126,"content":"            if (sessionTime.TotalMinutes < 2)"},{"type":"INSERT","lineNumber":127,"content":"                UnlockAchievement(\"speed_runner\");"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"            // Progress achievements"},{"type":"INSERT","lineNumber":130,"content":"            if (HighestLevelReached >= 10)"},{"type":"INSERT","lineNumber":131,"content":"                UnlockAchievement(\"explorer\");"},{"type":"INSERT","lineNumber":132,"content":"            if (HighestLevelReached >= 50)"},{"type":"INSERT","lineNumber":133,"content":"                UnlockAchievement(\"dungeon_master\");"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"            // Score achievements"},{"type":"INSERT","lineNumber":136,"content":"            if (HighestScore >= 10000)"},{"type":"INSERT","lineNumber":137,"content":"                UnlockAchievement(\"high_scorer\");"},{"type":"INSERT","lineNumber":138,"content":"            if (HighestScore >= 100000)"},{"type":"INSERT","lineNumber":139,"content":"                UnlockAchievement(\"score_master\");"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"            // Time achievements"},{"type":"INSERT","lineNumber":142,"content":"            if (TotalPlayTime.TotalHours >= 5)"},{"type":"INSERT","lineNumber":143,"content":"                UnlockAchievement(\"marathon_runner\");"},{"type":"INSERT","lineNumber":144,"content":"            if (TotalPlayTime.TotalHours >= 20)"},{"type":"INSERT","lineNumber":145,"content":"                UnlockAchievement(\"dedication\");"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"            // Perfect run (would need additional tracking)"},{"type":"INSERT","lineNumber":148,"content":"            // UnlockAchievement(\"perfect_run\");"},{"type":"INSERT","lineNumber":149,"content":"        }"},{"type":"INSERT","lineNumber":150,"content":""},{"type":"INSERT","lineNumber":151,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":152,"content":"        /// Unlock an achievement if not already unlocked"},{"type":"INSERT","lineNumber":153,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":154,"content":"        public bool UnlockAchievement(string achievementId)"},{"type":"INSERT","lineNumber":155,"content":"        {"},{"type":"INSERT","lineNumber":156,"content":"            if (Achievements.ContainsKey(achievementId) && !Achievements[achievementId])"},{"type":"INSERT","lineNumber":157,"content":"            {"},{"type":"INSERT","lineNumber":158,"content":"                Achievements[achievementId] = true;"},{"type":"INSERT","lineNumber":159,"content":"                AchievementDates[achievementId] = DateTime.Now;"},{"type":"INSERT","lineNumber":160,"content":"                return true; // Achievement was just unlocked"},{"type":"INSERT","lineNumber":161,"content":"            }"},{"type":"INSERT","lineNumber":162,"content":"            return false; // Already unlocked or doesn't exist"},{"type":"INSERT","lineNumber":163,"content":"        }"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"INSERT","lineNumber":165,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":166,"content":"        /// Check if an achievement is unlocked"},{"type":"INSERT","lineNumber":167,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":168,"content":"        public bool IsAchievementUnlocked(string achievementId)"},{"type":"INSERT","lineNumber":169,"content":"        {"},{"type":"INSERT","lineNumber":170,"content":"            return Achievements.ContainsKey(achievementId) && Achievements[achievementId];"},{"type":"INSERT","lineNumber":171,"content":"        }"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":174,"content":"        /// Get all unlocked achievements"},{"type":"INSERT","lineNumber":175,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":176,"content":"        public List<string> GetUnlockedAchievements()"},{"type":"INSERT","lineNumber":177,"content":"        {"},{"type":"INSERT","lineNumber":178,"content":"            var unlocked = new List<string>();"},{"type":"INSERT","lineNumber":179,"content":"            foreach (var kvp in Achievements)"},{"type":"INSERT","lineNumber":180,"content":"            {"},{"type":"INSERT","lineNumber":181,"content":"                if (kvp.Value)"},{"type":"INSERT","lineNumber":182,"content":"                    unlocked.Add(kvp.Key);"},{"type":"INSERT","lineNumber":183,"content":"            }"},{"type":"INSERT","lineNumber":184,"content":"            return unlocked;"},{"type":"INSERT","lineNumber":185,"content":"        }"},{"type":"INSERT","lineNumber":186,"content":""},{"type":"INSERT","lineNumber":187,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":188,"content":"        /// Get completion percentage (achievements unlocked / total achievements)"},{"type":"INSERT","lineNumber":189,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":190,"content":"        public float GetCompletionPercentage()"},{"type":"INSERT","lineNumber":191,"content":"        {"},{"type":"INSERT","lineNumber":192,"content":"            if (Achievements.Count == 0) return 0f;"},{"type":"INSERT","lineNumber":193,"content":"            int unlocked = GetUnlockedAchievements().Count;"},{"type":"INSERT","lineNumber":194,"content":"            return (float)unlocked / Achievements.Count * 100f;"},{"type":"INSERT","lineNumber":195,"content":"        }"},{"type":"INSERT","lineNumber":196,"content":""},{"type":"INSERT","lineNumber":197,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":198,"content":"        /// Reset all progress (for new player or reset option)"},{"type":"INSERT","lineNumber":199,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":200,"content":"        public void ResetProgress()"},{"type":"INSERT","lineNumber":201,"content":"        {"},{"type":"INSERT","lineNumber":202,"content":"            TotalGamesPlayed = 0;"},{"type":"INSERT","lineNumber":203,"content":"            TotalScore = 0;"},{"type":"INSERT","lineNumber":204,"content":"            HighestScore = 0;"},{"type":"INSERT","lineNumber":205,"content":"            TotalTreasuresCollected = 0;"},{"type":"INSERT","lineNumber":206,"content":"            TotalEnemiesDefeated = 0;"},{"type":"INSERT","lineNumber":207,"content":"            HighestLevelReached = 0;"},{"type":"INSERT","lineNumber":208,"content":"            TotalPlayTime = TimeSpan.Zero;"},{"type":"INSERT","lineNumber":209,"content":"            BestCompletionTime = TimeSpan.Zero;"},{"type":"INSERT","lineNumber":210,"content":""},{"type":"INSERT","lineNumber":211,"content":"            LevelStatistics.Clear();"},{"type":"INSERT","lineNumber":212,"content":"            UnlockedContent.Clear();"},{"type":"INSERT","lineNumber":213,"content":"            "},{"type":"INSERT","lineNumber":214,"content":"            InitializeAchievements(); // Reset achievements"},{"type":"INSERT","lineNumber":215,"content":"            AchievementDates.Clear();"},{"type":"INSERT","lineNumber":216,"content":"        }"},{"type":"INSERT","lineNumber":217,"content":"    }"},{"type":"INSERT","lineNumber":218,"content":""},{"type":"INSERT","lineNumber":219,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":220,"content":"    /// Statistics for individual levels"},{"type":"INSERT","lineNumber":221,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":222,"content":"    public class LevelStats"},{"type":"INSERT","lineNumber":223,"content":"    {"},{"type":"INSERT","lineNumber":224,"content":"        public int TimesPlayed { get; set; }"},{"type":"INSERT","lineNumber":225,"content":"        public int TimesCompleted { get; set; }"},{"type":"INSERT","lineNumber":226,"content":"        public int BestScore { get; set; }"},{"type":"INSERT","lineNumber":227,"content":"        public TimeSpan BestTime { get; set; }"},{"type":"INSERT","lineNumber":228,"content":"        public float CompletionRate => TimesPlayed > 0 ? (float)TimesCompleted / TimesPlayed : 0f;"},{"type":"INSERT","lineNumber":229,"content":""},{"type":"INSERT","lineNumber":230,"content":"        public void UpdateStats(int score, TimeSpan time, bool completed)"},{"type":"INSERT","lineNumber":231,"content":"        {"},{"type":"INSERT","lineNumber":232,"content":"            TimesPlayed++;"},{"type":"INSERT","lineNumber":233,"content":"            "},{"type":"INSERT","lineNumber":234,"content":"            if (completed)"},{"type":"INSERT","lineNumber":235,"content":"            {"},{"type":"INSERT","lineNumber":236,"content":"                TimesCompleted++;"},{"type":"INSERT","lineNumber":237,"content":"                "},{"type":"INSERT","lineNumber":238,"content":"                if (score > BestScore)"},{"type":"INSERT","lineNumber":239,"content":"                    BestScore = score;"},{"type":"INSERT","lineNumber":240,"content":"                    "},{"type":"INSERT","lineNumber":241,"content":"                if (BestTime == TimeSpan.Zero || time < BestTime)"},{"type":"INSERT","lineNumber":242,"content":"                    BestTime = time;"},{"type":"INSERT","lineNumber":243,"content":"            }"},{"type":"INSERT","lineNumber":244,"content":"        }"},{"type":"INSERT","lineNumber":245,"content":"    }"},{"type":"INSERT","lineNumber":246,"content":""},{"type":"INSERT","lineNumber":247,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":248,"content":"    /// Player preferences and settings"},{"type":"INSERT","lineNumber":249,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":250,"content":"    public class PlayerPreferences"},{"type":"INSERT","lineNumber":251,"content":"    {"},{"type":"INSERT","lineNumber":252,"content":"        // Audio settings"},{"type":"INSERT","lineNumber":253,"content":"        public float MasterVolume { get; set; } = 1.0f;"},{"type":"INSERT","lineNumber":254,"content":"        public float MusicVolume { get; set; } = 0.8f;"},{"type":"INSERT","lineNumber":255,"content":"        public float SfxVolume { get; set; } = 1.0f;"},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":257,"content":"        // Visual settings"},{"type":"INSERT","lineNumber":258,"content":"        public bool FullScreen { get; set; } = false;"},{"type":"INSERT","lineNumber":259,"content":"        public int ResolutionWidth { get; set; } = 1200;"},{"type":"INSERT","lineNumber":260,"content":"        public int ResolutionHeight { get; set; } = 800;"},{"type":"INSERT","lineNumber":261,"content":"        public bool ShowFPS { get; set; } = false;"},{"type":"INSERT","lineNumber":262,"content":"        public bool VSync { get; set; } = true;"},{"type":"INSERT","lineNumber":263,"content":""},{"type":"INSERT","lineNumber":264,"content":"        // Gameplay settings"},{"type":"INSERT","lineNumber":265,"content":"        public float CameraSmoothness { get; set; } = 5.0f;"},{"type":"INSERT","lineNumber":266,"content":"        public bool ShowMinimap { get; set; } = true;"},{"type":"INSERT","lineNumber":267,"content":"        public bool ShowHealthBar { get; set; } = true;"},{"type":"INSERT","lineNumber":268,"content":"        public bool AutoSave { get; set; } = true;"},{"type":"INSERT","lineNumber":269,"content":""},{"type":"INSERT","lineNumber":270,"content":"        // Control settings (could be expanded for key binding)"},{"type":"INSERT","lineNumber":271,"content":"        public bool InvertYAxis { get; set; } = false;"},{"type":"INSERT","lineNumber":272,"content":"        public float MouseSensitivity { get; set; } = 1.0f;"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"INSERT","lineNumber":274,"content":"        // Accessibility"},{"type":"INSERT","lineNumber":275,"content":"        public bool ColorBlindMode { get; set; } = false;"},{"type":"INSERT","lineNumber":276,"content":"        public float UIScale { get; set; } = 1.0f;"},{"type":"INSERT","lineNumber":277,"content":"        public bool HighContrast { get; set; } = false;"},{"type":"INSERT","lineNumber":278,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Utilities/Vector2Extensions.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Utilities/Vector2Extensions.cs","baseContent":"namespace DungeonExplorer.Utilities;\n\npublic class Vector2Extensions\n{\n    \n}","baseTimestamp":1756230548268,"deltas":[{"timestamp":1756231285147,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Utilities;"},{"type":"INSERT","lineNumber":1,"content":"// Vector2Extensions.cs - Extensions for Vector2"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Vector2Extensions"},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.Utilities"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"DELETE","lineNumber":5,"oldContent":"}"},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Extension methods for Vector2"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public static class Vector2Extensions"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":14,"content":"        /// Rotates a vector by the specified angle (in radians)"},{"type":"INSERT","lineNumber":15,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":16,"content":"        public static Vector2 Rotate(this Vector2 vector, float angle)"},{"type":"INSERT","lineNumber":17,"content":"        {"},{"type":"INSERT","lineNumber":18,"content":"            float cos = (float)Math.Cos(angle);"},{"type":"INSERT","lineNumber":19,"content":"            float sin = (float)Math.Sin(angle);"},{"type":"INSERT","lineNumber":20,"content":"            "},{"type":"INSERT","lineNumber":21,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":22,"content":"                vector.X * cos - vector.Y * sin,"},{"type":"INSERT","lineNumber":23,"content":"                vector.X * sin + vector.Y * cos"},{"type":"INSERT","lineNumber":24,"content":"            );"},{"type":"INSERT","lineNumber":25,"content":"        }"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":28,"content":"        /// Rotates a vector around a pivot point"},{"type":"INSERT","lineNumber":29,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":30,"content":"        public static Vector2 RotateAround(this Vector2 vector, Vector2 pivot, float angle)"},{"type":"INSERT","lineNumber":31,"content":"        {"},{"type":"INSERT","lineNumber":32,"content":"            return (vector - pivot).Rotate(angle) + pivot;"},{"type":"INSERT","lineNumber":33,"content":"        }"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":36,"content":"        /// Gets the angle of the vector in radians"},{"type":"INSERT","lineNumber":37,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":38,"content":"        public static float ToAngle(this Vector2 vector)"},{"type":"INSERT","lineNumber":39,"content":"        {"},{"type":"INSERT","lineNumber":40,"content":"            return (float)Math.Atan2(vector.Y, vector.X);"},{"type":"INSERT","lineNumber":41,"content":"        }"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":44,"content":"        /// Creates a vector from an angle and magnitude"},{"type":"INSERT","lineNumber":45,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":46,"content":"        public static Vector2 FromAngle(float angle, float magnitude = 1f)"},{"type":"INSERT","lineNumber":47,"content":"        {"},{"type":"INSERT","lineNumber":48,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":49,"content":"                (float)Math.Cos(angle) * magnitude,"},{"type":"INSERT","lineNumber":50,"content":"                (float)Math.Sin(angle) * magnitude"},{"type":"INSERT","lineNumber":51,"content":"            );"},{"type":"INSERT","lineNumber":52,"content":"        }"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"INSERT","lineNumber":54,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":55,"content":"        /// Returns the perpendicular vector (rotated 90 degrees)"},{"type":"INSERT","lineNumber":56,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":57,"content":"        public static Vector2 Perpendicular(this Vector2 vector)"},{"type":"INSERT","lineNumber":58,"content":"        {"},{"type":"INSERT","lineNumber":59,"content":"            return new Vector2(-vector.Y, vector.X);"},{"type":"INSERT","lineNumber":60,"content":"        }"},{"type":"INSERT","lineNumber":61,"content":""},{"type":"INSERT","lineNumber":62,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":63,"content":"        /// Projects one vector onto another"},{"type":"INSERT","lineNumber":64,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":65,"content":"        public static Vector2 Project(this Vector2 vector, Vector2 onto)"},{"type":"INSERT","lineNumber":66,"content":"        {"},{"type":"INSERT","lineNumber":67,"content":"            float dot = Vector2.Dot(vector, onto);"},{"type":"INSERT","lineNumber":68,"content":"            float lengthSquared = onto.LengthSquared();"},{"type":"INSERT","lineNumber":69,"content":"            "},{"type":"INSERT","lineNumber":70,"content":"            if (lengthSquared < 0.0001f) return Vector2.Zero;"},{"type":"INSERT","lineNumber":71,"content":"            "},{"type":"INSERT","lineNumber":72,"content":"            return onto * (dot / lengthSquared);"},{"type":"INSERT","lineNumber":73,"content":"        }"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":76,"content":"        /// Reflects a vector off a surface with the given normal"},{"type":"INSERT","lineNumber":77,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":78,"content":"        public static Vector2 Reflect(this Vector2 vector, Vector2 normal)"},{"type":"INSERT","lineNumber":79,"content":"        {"},{"type":"INSERT","lineNumber":80,"content":"            return vector - 2f * Vector2.Dot(vector, normal) * normal;"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":84,"content":"        /// Clamps the magnitude of a vector"},{"type":"INSERT","lineNumber":85,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":86,"content":"        public static Vector2 ClampMagnitude(this Vector2 vector, float maxLength)"},{"type":"INSERT","lineNumber":87,"content":"        {"},{"type":"INSERT","lineNumber":88,"content":"            if (vector.LengthSquared() > maxLength * maxLength)"},{"type":"INSERT","lineNumber":89,"content":"            {"},{"type":"INSERT","lineNumber":90,"content":"                vector.Normalize();"},{"type":"INSERT","lineNumber":91,"content":"                return vector * maxLength;"},{"type":"INSERT","lineNumber":92,"content":"            }"},{"type":"INSERT","lineNumber":93,"content":"            return vector;"},{"type":"INSERT","lineNumber":94,"content":"        }"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":97,"content":"        /// Sets the magnitude of a vector"},{"type":"INSERT","lineNumber":98,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":99,"content":"        public static Vector2 SetMagnitude(this Vector2 vector, float magnitude)"},{"type":"INSERT","lineNumber":100,"content":"        {"},{"type":"INSERT","lineNumber":101,"content":"            if (vector.LengthSquared() < 0.0001f) return Vector2.Zero;"},{"type":"INSERT","lineNumber":102,"content":"            vector.Normalize();"},{"type":"INSERT","lineNumber":103,"content":"            return vector * magnitude;"},{"type":"INSERT","lineNumber":104,"content":"        }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"INSERT","lineNumber":106,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":107,"content":"        /// Linear interpolation between two vectors"},{"type":"INSERT","lineNumber":108,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":109,"content":"        public static Vector2 Lerp(this Vector2 from, Vector2 to, float t)"},{"type":"INSERT","lineNumber":110,"content":"        {"},{"type":"INSERT","lineNumber":111,"content":"            return Vector2.Lerp(from, to, MathHelper.Clamp(t, 0f, 1f));"},{"type":"INSERT","lineNumber":112,"content":"        }"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"INSERT","lineNumber":114,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":115,"content":"        /// Spherical linear interpolation between two vectors"},{"type":"INSERT","lineNumber":116,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":117,"content":"        public static Vector2 Slerp(this Vector2 from, Vector2 to, float t)"},{"type":"INSERT","lineNumber":118,"content":"        {"},{"type":"INSERT","lineNumber":119,"content":"            t = MathHelper.Clamp(t, 0f, 1f);"},{"type":"INSERT","lineNumber":120,"content":"            "},{"type":"INSERT","lineNumber":121,"content":"            float dot = Vector2.Dot(from.Normalized(), to.Normalized());"},{"type":"INSERT","lineNumber":122,"content":"            dot = MathHelper.Clamp(dot, -1f, 1f);"},{"type":"INSERT","lineNumber":123,"content":"            "},{"type":"INSERT","lineNumber":124,"content":"            float theta = (float)Math.Acos(dot) * t;"},{"type":"INSERT","lineNumber":125,"content":"            Vector2 relative = (to - from * dot).Normalized();"},{"type":"INSERT","lineNumber":126,"content":"            "},{"type":"INSERT","lineNumber":127,"content":"            return from * (float)Math.Cos(theta) + relative * (float)Math.Sin(theta);"},{"type":"INSERT","lineNumber":128,"content":"        }"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"INSERT","lineNumber":130,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":131,"content":"        /// Returns a normalized version of the vector without modifying the original"},{"type":"INSERT","lineNumber":132,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":133,"content":"        public static Vector2 Normalized(this Vector2 vector)"},{"type":"INSERT","lineNumber":134,"content":"        {"},{"type":"INSERT","lineNumber":135,"content":"            if (vector.LengthSquared() < 0.0001f) return Vector2.Zero;"},{"type":"INSERT","lineNumber":136,"content":"            "},{"type":"INSERT","lineNumber":137,"content":"            Vector2 result = vector;"},{"type":"INSERT","lineNumber":138,"content":"            result.Normalize();"},{"type":"INSERT","lineNumber":139,"content":"            return result;"},{"type":"INSERT","lineNumber":140,"content":"        }"},{"type":"INSERT","lineNumber":141,"content":""},{"type":"INSERT","lineNumber":142,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":143,"content":"        /// Checks if the vector is approximately zero"},{"type":"INSERT","lineNumber":144,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":145,"content":"        public static bool IsZero(this Vector2 vector, float epsilon = 0.0001f)"},{"type":"INSERT","lineNumber":146,"content":"        {"},{"type":"INSERT","lineNumber":147,"content":"            return vector.LengthSquared() < epsilon * epsilon;"},{"type":"INSERT","lineNumber":148,"content":"        }"},{"type":"INSERT","lineNumber":149,"content":""},{"type":"INSERT","lineNumber":150,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":151,"content":"        /// Rounds the vector components to the nearest integer"},{"type":"INSERT","lineNumber":152,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":153,"content":"        public static Vector2 Round(this Vector2 vector)"},{"type":"INSERT","lineNumber":154,"content":"        {"},{"type":"INSERT","lineNumber":155,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":156,"content":"                (float)Math.Round(vector.X),"},{"type":"INSERT","lineNumber":157,"content":"                (float)Math.Round(vector.Y)"},{"type":"INSERT","lineNumber":158,"content":"            );"},{"type":"INSERT","lineNumber":159,"content":"        }"},{"type":"INSERT","lineNumber":160,"content":""},{"type":"INSERT","lineNumber":161,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":162,"content":"        /// Floors the vector components"},{"type":"INSERT","lineNumber":163,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":164,"content":"        public static Vector2 Floor(this Vector2 vector)"},{"type":"INSERT","lineNumber":165,"content":"        {"},{"type":"INSERT","lineNumber":166,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":167,"content":"                (float)Math.Floor(vector.X),"},{"type":"INSERT","lineNumber":168,"content":"                (float)Math.Floor(vector.Y)"},{"type":"INSERT","lineNumber":169,"content":"            );"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":173,"content":"        /// Ceils the vector components"},{"type":"INSERT","lineNumber":174,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":175,"content":"        public static Vector2 Ceiling(this Vector2 vector)"},{"type":"INSERT","lineNumber":176,"content":"        {"},{"type":"INSERT","lineNumber":177,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":178,"content":"                (float)Math.Ceiling(vector.X),"},{"type":"INSERT","lineNumber":179,"content":"                (float)Math.Ceiling(vector.Y)"},{"type":"INSERT","lineNumber":180,"content":"            );"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":""},{"type":"INSERT","lineNumber":183,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":184,"content":"        /// Returns the absolute value of each component"},{"type":"INSERT","lineNumber":185,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":186,"content":"        public static Vector2 Abs(this Vector2 vector)"},{"type":"INSERT","lineNumber":187,"content":"        {"},{"type":"INSERT","lineNumber":188,"content":"            return new Vector2(Math.Abs(vector.X), Math.Abs(vector.Y));"},{"type":"INSERT","lineNumber":189,"content":"        }"},{"type":"INSERT","lineNumber":190,"content":""},{"type":"INSERT","lineNumber":191,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":192,"content":"        /// Converts to Point (useful for grid coordinates)"},{"type":"INSERT","lineNumber":193,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":194,"content":"        public static Point ToPoint(this Vector2 vector)"},{"type":"INSERT","lineNumber":195,"content":"        {"},{"type":"INSERT","lineNumber":196,"content":"            return new Point((int)vector.X, (int)vector.Y);"},{"type":"INSERT","lineNumber":197,"content":"        }"},{"type":"INSERT","lineNumber":198,"content":""},{"type":"INSERT","lineNumber":199,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":200,"content":"        /// Gets the distance to another vector"},{"type":"INSERT","lineNumber":201,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":202,"content":"        public static float DistanceTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":203,"content":"        {"},{"type":"INSERT","lineNumber":204,"content":"            return Vector2.Distance(from, to);"},{"type":"INSERT","lineNumber":205,"content":"        }"},{"type":"INSERT","lineNumber":206,"content":""},{"type":"INSERT","lineNumber":207,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":208,"content":"        /// Gets the squared distance to another vector (faster than DistanceTo)"},{"type":"INSERT","lineNumber":209,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":210,"content":"        public static float DistanceSquaredTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":211,"content":"        {"},{"type":"INSERT","lineNumber":212,"content":"            return Vector2.DistanceSquared(from, to);"},{"type":"INSERT","lineNumber":213,"content":"        }"},{"type":"INSERT","lineNumber":214,"content":""},{"type":"INSERT","lineNumber":215,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":216,"content":"        /// Moves towards a target position by a maximum distance"},{"type":"INSERT","lineNumber":217,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":218,"content":"        public static Vector2 MoveTowards(this Vector2 current, Vector2 target, float maxDistance)"},{"type":"INSERT","lineNumber":219,"content":"        {"},{"type":"INSERT","lineNumber":220,"content":"            Vector2 direction = target - current;"},{"type":"INSERT","lineNumber":221,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":222,"content":"            "},{"type":"INSERT","lineNumber":223,"content":"            if (distance <= maxDistance || distance < 0.0001f)"},{"type":"INSERT","lineNumber":224,"content":"                return target;"},{"type":"INSERT","lineNumber":225,"content":"                "},{"type":"INSERT","lineNumber":226,"content":"            return current + direction / distance * maxDistance;"},{"type":"INSERT","lineNumber":227,"content":"        }"},{"type":"INSERT","lineNumber":228,"content":""},{"type":"INSERT","lineNumber":229,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":230,"content":"        /// Checks if two vectors are approximately equal"},{"type":"INSERT","lineNumber":231,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":232,"content":"        public static bool Approximately(this Vector2 a, Vector2 b, float epsilon = 0.0001f)"},{"type":"INSERT","lineNumber":233,"content":"        {"},{"type":"INSERT","lineNumber":234,"content":"            return (a - b).LengthSquared() < epsilon * epsilon;"},{"type":"INSERT","lineNumber":235,"content":"        }"},{"type":"INSERT","lineNumber":236,"content":""},{"type":"INSERT","lineNumber":237,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":238,"content":"        /// Returns the component-wise minimum of two vectors"},{"type":"INSERT","lineNumber":239,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":240,"content":"        public static Vector2 Min(this Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":241,"content":"        {"},{"type":"INSERT","lineNumber":242,"content":"            return new Vector2(Math.Min(a.X, b.X), Math.Min(a.Y, b.Y));"},{"type":"INSERT","lineNumber":243,"content":"        }"},{"type":"INSERT","lineNumber":244,"content":""},{"type":"INSERT","lineNumber":245,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":246,"content":"        /// Returns the component-wise maximum of two vectors"},{"type":"INSERT","lineNumber":247,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":248,"content":"        public static Vector2 Max(this Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":249,"content":"        {"},{"type":"INSERT","lineNumber":250,"content":"            return new Vector2(Math.Max(a.X, b.X), Math.Max(a.Y, b.Y));"},{"type":"INSERT","lineNumber":251,"content":"        }"},{"type":"INSERT","lineNumber":252,"content":""},{"type":"INSERT","lineNumber":253,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":254,"content":"        /// Clamps each component of the vector between corresponding components of min and max"},{"type":"INSERT","lineNumber":255,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":256,"content":"        public static Vector2 Clamp(this Vector2 vector, Vector2 min, Vector2 max)"},{"type":"INSERT","lineNumber":257,"content":"        {"},{"type":"INSERT","lineNumber":258,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":259,"content":"                MathHelper.Clamp(vector.X, min.X, max.X),"},{"type":"INSERT","lineNumber":260,"content":"                MathHelper.Clamp(vector.Y, min.Y, max.Y)"},{"type":"INSERT","lineNumber":261,"content":"            );"},{"type":"INSERT","lineNumber":262,"content":"        }"},{"type":"INSERT","lineNumber":263,"content":""},{"type":"INSERT","lineNumber":264,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":265,"content":"        /// Returns a vector with the sign of each component (-1, 0, or 1)"},{"type":"INSERT","lineNumber":266,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":267,"content":"        public static Vector2 Sign(this Vector2 vector)"},{"type":"INSERT","lineNumber":268,"content":"        {"},{"type":"INSERT","lineNumber":269,"content":"            return new Vector2(MathHelper.Sign(vector.X), MathHelper.Sign(vector.Y));"},{"type":"INSERT","lineNumber":270,"content":"        }"},{"type":"INSERT","lineNumber":271,"content":""},{"type":"INSERT","lineNumber":272,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":273,"content":"        /// Scales one vector by another component-wise"},{"type":"INSERT","lineNumber":274,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":275,"content":"        public static Vector2 Scale(this Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":276,"content":"        {"},{"type":"INSERT","lineNumber":277,"content":"            return new Vector2(a.X * b.X, a.Y * b.Y);"},{"type":"INSERT","lineNumber":278,"content":"        }"},{"type":"INSERT","lineNumber":279,"content":""},{"type":"INSERT","lineNumber":280,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":281,"content":"        /// Returns the angle between two vectors in radians"},{"type":"INSERT","lineNumber":282,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":283,"content":"        public static float AngleTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":284,"content":"        {"},{"type":"INSERT","lineNumber":285,"content":"            Vector2 diff = to - from;"},{"type":"INSERT","lineNumber":286,"content":"            return diff.ToAngle();"},{"type":"INSERT","lineNumber":287,"content":"        }"},{"type":"INSERT","lineNumber":288,"content":""},{"type":"INSERT","lineNumber":289,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":290,"content":"        /// Returns the angle between two vectors (considering them as directions)"},{"type":"INSERT","lineNumber":291,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":292,"content":"        public static float AngleBetween(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":293,"content":"        {"},{"type":"INSERT","lineNumber":294,"content":"            from.Normalize();"},{"type":"INSERT","lineNumber":295,"content":"            to.Normalize();"},{"type":"INSERT","lineNumber":296,"content":"            "},{"type":"INSERT","lineNumber":297,"content":"            float dot = Vector2.Dot(from, to);"},{"type":"INSERT","lineNumber":298,"content":"            dot = MathHelper.Clamp(dot, -1f, 1f);"},{"type":"INSERT","lineNumber":299,"content":"            "},{"type":"INSERT","lineNumber":300,"content":"            return (float)Math.Acos(dot);"},{"type":"INSERT","lineNumber":301,"content":"        }"},{"type":"INSERT","lineNumber":302,"content":""},{"type":"INSERT","lineNumber":303,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":304,"content":"        /// Checks if a point is inside a rectangle"},{"type":"INSERT","lineNumber":305,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":306,"content":"        public static bool IsInsideRect(this Vector2 point, Rectangle rect)"},{"type":"INSERT","lineNumber":307,"content":"        {"},{"type":"INSERT","lineNumber":308,"content":"            return point.X >= rect.Left && point.X <= rect.Right &&"},{"type":"INSERT","lineNumber":309,"content":"                   point.Y >= rect.Top && point.Y <= rect.Bottom;"},{"type":"INSERT","lineNumber":310,"content":"        }"},{"type":"INSERT","lineNumber":311,"content":""},{"type":"INSERT","lineNumber":312,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":313,"content":"        /// Checks if a point is inside a circle"},{"type":"INSERT","lineNumber":314,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":315,"content":"        public static bool IsInsideCircle(this Vector2 point, Vector2 center, float radius)"},{"type":"INSERT","lineNumber":316,"content":"        {"},{"type":"INSERT","lineNumber":317,"content":"            return Vector2.DistanceSquared(point, center) <= radius * radius;"},{"type":"INSERT","lineNumber":318,"content":"        }"},{"type":"INSERT","lineNumber":319,"content":""},{"type":"INSERT","lineNumber":320,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":321,"content":"        /// Returns the closest point on a line segment to the given point"},{"type":"INSERT","lineNumber":322,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":323,"content":"        public static Vector2 ClosestPointOnLineSegment(this Vector2 point, Vector2 lineStart, Vector2 lineEnd)"},{"type":"INSERT","lineNumber":324,"content":"        {"},{"type":"INSERT","lineNumber":325,"content":"            Vector2 lineDirection = lineEnd - lineStart;"},{"type":"INSERT","lineNumber":326,"content":"            float lineLength = lineDirection.Length();"},{"type":"INSERT","lineNumber":327,"content":"            "},{"type":"INSERT","lineNumber":328,"content":"            if (lineLength < 0.0001f)"},{"type":"INSERT","lineNumber":329,"content":"                return lineStart;"},{"type":"INSERT","lineNumber":330,"content":"                "},{"type":"INSERT","lineNumber":331,"content":"            lineDirection /= lineLength;"},{"type":"INSERT","lineNumber":332,"content":"            "},{"type":"INSERT","lineNumber":333,"content":"            Vector2 toPoint = point - lineStart;"},{"type":"INSERT","lineNumber":334,"content":"            float projectionLength = Vector2.Dot(toPoint, lineDirection);"},{"type":"INSERT","lineNumber":335,"content":"            "},{"type":"INSERT","lineNumber":336,"content":"            projectionLength = MathHelper.Clamp(projectionLength, 0f, lineLength);"},{"type":"INSERT","lineNumber":337,"content":"            "},{"type":"INSERT","lineNumber":338,"content":"            return lineStart + lineDirection * projectionLength;"},{"type":"INSERT","lineNumber":339,"content":"        }"},{"type":"INSERT","lineNumber":340,"content":""},{"type":"INSERT","lineNumber":341,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":342,"content":"        /// Converts world coordinates to grid coordinates"},{"type":"INSERT","lineNumber":343,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":344,"content":"        public static Vector2 ToGridCoordinates(this Vector2 worldPosition, float tileSize = 32f)"},{"type":"INSERT","lineNumber":345,"content":"        {"},{"type":"INSERT","lineNumber":346,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":347,"content":"                (float)Math.Floor(worldPosition.X / tileSize),"},{"type":"INSERT","lineNumber":348,"content":"                (float)Math.Floor(worldPosition.Y / tileSize)"},{"type":"INSERT","lineNumber":349,"content":"            );"},{"type":"INSERT","lineNumber":350,"content":"        }"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"INSERT","lineNumber":352,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":353,"content":"        /// Converts grid coordinates to world coordinates (centered in tile)"},{"type":"INSERT","lineNumber":354,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":355,"content":"        public static Vector2 ToWorldCoordinates(this Vector2 gridPosition, float tileSize = 32f)"},{"type":"INSERT","lineNumber":356,"content":"        {"},{"type":"INSERT","lineNumber":357,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":358,"content":"                gridPosition.X * tileSize + tileSize * 0.5f,"},{"type":"INSERT","lineNumber":359,"content":"                gridPosition.Y * tileSize + tileSize * 0.5f"},{"type":"INSERT","lineNumber":360,"content":"            );"},{"type":"INSERT","lineNumber":361,"content":"        }"},{"type":"INSERT","lineNumber":362,"content":""},{"type":"INSERT","lineNumber":363,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":364,"content":"        /// Snaps a vector to a grid"},{"type":"INSERT","lineNumber":365,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":366,"content":"        public static Vector2 SnapToGrid(this Vector2 vector, float gridSize)"},{"type":"INSERT","lineNumber":367,"content":"        {"},{"type":"INSERT","lineNumber":368,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":369,"content":"                (float)Math.Round(vector.X / gridSize) * gridSize,"},{"type":"INSERT","lineNumber":370,"content":"                (float)Math.Round(vector.Y / gridSize) * gridSize"},{"type":"INSERT","lineNumber":371,"content":"            );"},{"type":"INSERT","lineNumber":372,"content":"        }"},{"type":"INSERT","lineNumber":373,"content":""},{"type":"INSERT","lineNumber":374,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":375,"content":"        /// Creates a string representation with specified decimal places"},{"type":"INSERT","lineNumber":376,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":377,"content":"        public static string ToString(this Vector2 vector, int decimalPlaces)"},{"type":"INSERT","lineNumber":378,"content":"        {"},{"type":"INSERT","lineNumber":379,"content":"            string format = \"F\" + decimalPlaces.ToString();"},{"type":"INSERT","lineNumber":380,"content":"            return $\"({vector.X.ToString(format)}, {vector.Y.ToString(format)})\";"},{"type":"INSERT","lineNumber":381,"content":"        }"},{"type":"INSERT","lineNumber":382,"content":""},{"type":"INSERT","lineNumber":383,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":384,"content":"        /// Bounces a vector off a surface with the given normal (with damping)"},{"type":"INSERT","lineNumber":385,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":386,"content":"        public static Vector2 Bounce(this Vector2 vector, Vector2 normal, float bounciness = 1f)"},{"type":"INSERT","lineNumber":387,"content":"        {"},{"type":"INSERT","lineNumber":388,"content":"            return vector.Reflect(normal) * bounciness;"},{"type":"INSERT","lineNumber":389,"content":"        }"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"INSERT","lineNumber":391,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":392,"content":"        /// Gets the dominant axis (X or Y) of the vector"},{"type":"INSERT","lineNumber":393,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":394,"content":"        public static Vector2 DominantAxis(this Vector2 vector)"},{"type":"INSERT","lineNumber":395,"content":"        {"},{"type":"INSERT","lineNumber":396,"content":"            if (Math.Abs(vector.X) > Math.Abs(vector.Y))"},{"type":"INSERT","lineNumber":397,"content":"                return new Vector2(Math.Sign(vector.X), 0);"},{"type":"INSERT","lineNumber":398,"content":"            else"},{"type":"INSERT","lineNumber":399,"content":"                return new Vector2(0, Math.Sign(vector.Y));"},{"type":"INSERT","lineNumber":400,"content":"        }"},{"type":"INSERT","lineNumber":401,"content":"    }"}]},{"timestamp":1756231288567,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"MODIFY","lineNumber":5,"content":"","oldContent":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"    }"},{"type":"DELETE","lineNumber":9,"oldContent":"        }"},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"DELETE","lineNumber":11,"oldContent":"                return new Vector2(0, Math.Sign(vector.Y));"},{"type":"DELETE","lineNumber":13,"oldContent":"            else"},{"type":"DELETE","lineNumber":15,"oldContent":"                return new Vector2(Math.Sign(vector.X), 0);"},{"type":"DELETE","lineNumber":17,"oldContent":"            if (Math.Abs(vector.X) > Math.Abs(vector.Y))"},{"type":"DELETE","lineNumber":19,"oldContent":"        {"},{"type":"DELETE","lineNumber":21,"oldContent":"        public static Vector2 DominantAxis(this Vector2 vector)"},{"type":"DELETE","lineNumber":24,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":25,"oldContent":"        /// Gets the dominant axis (X or Y) of the vector"},{"type":"DELETE","lineNumber":27,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"        }"},{"type":"DELETE","lineNumber":33,"oldContent":"            return vector.Reflect(normal) * bounciness;"},{"type":"DELETE","lineNumber":34,"oldContent":"            "},{"type":"DELETE","lineNumber":35,"oldContent":"        {"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"DELETE","lineNumber":37,"oldContent":"        public static Vector2 Bounce(this Vector2 vector, Vector2 normal, float bounciness = 1f)"},{"type":"DELETE","lineNumber":39,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":41,"oldContent":"        /// Bounces a vector off a surface with the given normal (with damping)"},{"type":"DELETE","lineNumber":43,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":46,"oldContent":""},{"type":"DELETE","lineNumber":47,"oldContent":"        }"},{"type":"DELETE","lineNumber":49,"oldContent":"            return $\"({vector.X.ToString(format)}, {vector.Y.ToString(format)})\";"},{"type":"DELETE","lineNumber":51,"oldContent":"            string format = \"F\" + decimalPlaces.ToString();"},{"type":"DELETE","lineNumber":53,"oldContent":"        {"},{"type":"DELETE","lineNumber":55,"oldContent":"        public static string ToString(this Vector2 vector, int decimalPlaces)"},{"type":"DELETE","lineNumber":57,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":59,"oldContent":"        /// Creates a string representation with specified decimal places"},{"type":"DELETE","lineNumber":61,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"DELETE","lineNumber":65,"oldContent":"        }"},{"type":"DELETE","lineNumber":67,"oldContent":"            );"},{"type":"DELETE","lineNumber":69,"oldContent":"                (float)Math.Round(vector.Y / gridSize) * gridSize"},{"type":"DELETE","lineNumber":71,"oldContent":"                (float)Math.Round(vector.X / gridSize) * gridSize,"},{"type":"DELETE","lineNumber":73,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":75,"oldContent":"        {"},{"type":"DELETE","lineNumber":77,"oldContent":"        public static Vector2 SnapToGrid(this Vector2 vector, float gridSize)"},{"type":"DELETE","lineNumber":79,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":81,"oldContent":"        /// Snaps a vector to a grid"},{"type":"DELETE","lineNumber":83,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"        }"},{"type":"DELETE","lineNumber":89,"oldContent":"            );"},{"type":"DELETE","lineNumber":91,"oldContent":"                gridPosition.Y * tileSize + tileSize * 0.5f"},{"type":"DELETE","lineNumber":93,"oldContent":"                gridPosition.X * tileSize + tileSize * 0.5f,"},{"type":"DELETE","lineNumber":95,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":97,"oldContent":"        {"},{"type":"DELETE","lineNumber":99,"oldContent":"        public static Vector2 ToWorldCoordinates(this Vector2 gridPosition, float tileSize = 32f)"},{"type":"DELETE","lineNumber":101,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":103,"oldContent":"        /// Converts grid coordinates to world coordinates (centered in tile)"},{"type":"DELETE","lineNumber":105,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":109,"oldContent":"        }"},{"type":"DELETE","lineNumber":111,"oldContent":"            );"},{"type":"DELETE","lineNumber":113,"oldContent":"                (float)Math.Floor(worldPosition.Y / tileSize)"},{"type":"DELETE","lineNumber":115,"oldContent":"                (float)Math.Floor(worldPosition.X / tileSize),"},{"type":"DELETE","lineNumber":117,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":119,"oldContent":"        {"},{"type":"DELETE","lineNumber":121,"oldContent":"        public static Vector2 ToGridCoordinates(this Vector2 worldPosition, float tileSize = 32f)"},{"type":"DELETE","lineNumber":123,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":125,"oldContent":"        /// Converts world coordinates to grid coordinates"},{"type":"DELETE","lineNumber":127,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":129,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"        }"},{"type":"DELETE","lineNumber":132,"oldContent":"            "},{"type":"DELETE","lineNumber":133,"oldContent":"            return lineStart + lineDirection * projectionLength;"},{"type":"INSERT","lineNumber":69,"content":""},{"type":"DELETE","lineNumber":135,"oldContent":"            "},{"type":"DELETE","lineNumber":136,"oldContent":"            "},{"type":"DELETE","lineNumber":137,"oldContent":"            projectionLength = MathHelper.Clamp(projectionLength, 0f, lineLength);"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"DELETE","lineNumber":139,"oldContent":"            "},{"type":"DELETE","lineNumber":141,"oldContent":"            float projectionLength = Vector2.Dot(toPoint, lineDirection);"},{"type":"DELETE","lineNumber":143,"oldContent":"            Vector2 toPoint = point - lineStart;"},{"type":"DELETE","lineNumber":145,"oldContent":"            "},{"type":"DELETE","lineNumber":147,"oldContent":"            lineDirection /= lineLength;"},{"type":"DELETE","lineNumber":149,"oldContent":"                "},{"type":"DELETE","lineNumber":151,"oldContent":"                return lineStart;"},{"type":"DELETE","lineNumber":153,"oldContent":"            if (lineLength < 0.0001f)"},{"type":"DELETE","lineNumber":155,"oldContent":"            "},{"type":"DELETE","lineNumber":157,"oldContent":"            float lineLength = lineDirection.Length();"},{"type":"DELETE","lineNumber":159,"oldContent":"            Vector2 lineDirection = lineEnd - lineStart;"},{"type":"DELETE","lineNumber":161,"oldContent":"        {"},{"type":"DELETE","lineNumber":163,"oldContent":"        public static Vector2 ClosestPointOnLineSegment(this Vector2 point, Vector2 lineStart, Vector2 lineEnd)"},{"type":"DELETE","lineNumber":165,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":167,"oldContent":"        /// Returns the closest point on a line segment to the given point"},{"type":"DELETE","lineNumber":169,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":171,"oldContent":""},{"type":"DELETE","lineNumber":173,"oldContent":"        }"},{"type":"DELETE","lineNumber":175,"oldContent":"            return Vector2.DistanceSquared(point, center) <= radius * radius;"},{"type":"DELETE","lineNumber":177,"oldContent":"        {"},{"type":"DELETE","lineNumber":179,"oldContent":"        public static bool IsInsideCircle(this Vector2 point, Vector2 center, float radius)"},{"type":"INSERT","lineNumber":93,"content":""},{"type":"DELETE","lineNumber":181,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":183,"oldContent":"        /// Checks if a point is inside a circle"},{"type":"DELETE","lineNumber":186,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":189,"oldContent":"        }"},{"type":"DELETE","lineNumber":191,"oldContent":"                   point.Y >= rect.Top && point.Y <= rect.Bottom;"},{"type":"DELETE","lineNumber":193,"oldContent":"            return point.X >= rect.Left && point.X <= rect.Right &&"},{"type":"DELETE","lineNumber":195,"oldContent":"        {"},{"type":"DELETE","lineNumber":197,"oldContent":"        public static bool IsInsideRect(this Vector2 point, Rectangle rect)"},{"type":"DELETE","lineNumber":199,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":201,"oldContent":"        /// Checks if a point is inside a rectangle"},{"type":"DELETE","lineNumber":203,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":205,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"        }"},{"type":"DELETE","lineNumber":209,"oldContent":"            return (float)Math.Acos(dot);"},{"type":"DELETE","lineNumber":211,"oldContent":"            "},{"type":"DELETE","lineNumber":213,"oldContent":"            dot = MathHelper.Clamp(dot, -1f, 1f);"},{"type":"DELETE","lineNumber":215,"oldContent":"            float dot = Vector2.Dot(from, to);"},{"type":"DELETE","lineNumber":217,"oldContent":"            "},{"type":"DELETE","lineNumber":219,"oldContent":"            to.Normalize();"},{"type":"DELETE","lineNumber":221,"oldContent":"            from.Normalize();"},{"type":"DELETE","lineNumber":223,"oldContent":"        {"},{"type":"DELETE","lineNumber":225,"oldContent":"        public static float AngleBetween(this Vector2 from, Vector2 to)"},{"type":"DELETE","lineNumber":227,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":229,"oldContent":"        /// Returns the angle between two vectors (considering them as directions)"},{"type":"DELETE","lineNumber":231,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":234,"oldContent":"            "},{"type":"DELETE","lineNumber":235,"oldContent":"        }"},{"type":"DELETE","lineNumber":237,"oldContent":"            return diff.ToAngle();"},{"type":"DELETE","lineNumber":239,"oldContent":"            Vector2 diff = to - from;"},{"type":"DELETE","lineNumber":240,"oldContent":"            "},{"type":"DELETE","lineNumber":241,"oldContent":"        {"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"DELETE","lineNumber":243,"oldContent":"        public static float AngleTo(this Vector2 from, Vector2 to)"},{"type":"DELETE","lineNumber":245,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":246,"oldContent":"            "},{"type":"DELETE","lineNumber":247,"oldContent":"        /// Returns the angle between two vectors in radians"},{"type":"INSERT","lineNumber":127,"content":""},{"type":"DELETE","lineNumber":249,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":252,"oldContent":""},{"type":"DELETE","lineNumber":253,"oldContent":"        }"},{"type":"DELETE","lineNumber":255,"oldContent":"            return new Vector2(a.X * b.X, a.Y * b.Y);"},{"type":"DELETE","lineNumber":257,"oldContent":"        {"},{"type":"DELETE","lineNumber":259,"oldContent":"        public static Vector2 Scale(this Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":261,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":263,"oldContent":"        /// Scales one vector by another component-wise"},{"type":"DELETE","lineNumber":265,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":266,"oldContent":"            "},{"type":"DELETE","lineNumber":269,"oldContent":"        }"},{"type":"DELETE","lineNumber":271,"oldContent":"            return new Vector2(MathHelper.Sign(vector.X), MathHelper.Sign(vector.Y));"},{"type":"DELETE","lineNumber":273,"oldContent":"        {"},{"type":"DELETE","lineNumber":275,"oldContent":"        public static Vector2 Sign(this Vector2 vector)"},{"type":"DELETE","lineNumber":277,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":279,"oldContent":"        /// Returns a vector with the sign of each component (-1, 0, or 1)"},{"type":"DELETE","lineNumber":281,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":283,"oldContent":""},{"type":"DELETE","lineNumber":285,"oldContent":"        }"},{"type":"DELETE","lineNumber":287,"oldContent":"            );"},{"type":"DELETE","lineNumber":289,"oldContent":"                MathHelper.Clamp(vector.Y, min.Y, max.Y)"},{"type":"DELETE","lineNumber":291,"oldContent":"                MathHelper.Clamp(vector.X, min.X, max.X),"},{"type":"DELETE","lineNumber":293,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":295,"oldContent":"        {"},{"type":"DELETE","lineNumber":297,"oldContent":"        public static Vector2 Clamp(this Vector2 vector, Vector2 min, Vector2 max)"},{"type":"DELETE","lineNumber":299,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":301,"oldContent":"        /// Clamps each component of the vector between corresponding components of min and max"},{"type":"DELETE","lineNumber":303,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":305,"oldContent":""},{"type":"DELETE","lineNumber":307,"oldContent":"        }"},{"type":"DELETE","lineNumber":309,"oldContent":"            return new Vector2(Math.Max(a.X, b.X), Math.Max(a.Y, b.Y));"},{"type":"DELETE","lineNumber":311,"oldContent":"        {"},{"type":"DELETE","lineNumber":313,"oldContent":"        public static Vector2 Max(this Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":315,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":317,"oldContent":"        /// Returns the component-wise maximum of two vectors"},{"type":"DELETE","lineNumber":319,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":321,"oldContent":""},{"type":"DELETE","lineNumber":323,"oldContent":"        }"},{"type":"DELETE","lineNumber":325,"oldContent":"            return new Vector2(Math.Min(a.X, b.X), Math.Min(a.Y, b.Y));"},{"type":"DELETE","lineNumber":327,"oldContent":"        {"},{"type":"DELETE","lineNumber":329,"oldContent":"        public static Vector2 Min(this Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":331,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":333,"oldContent":"        /// Returns the component-wise minimum of two vectors"},{"type":"DELETE","lineNumber":335,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":337,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":"        }"},{"type":"DELETE","lineNumber":341,"oldContent":"            return (a - b).LengthSquared() < epsilon * epsilon;"},{"type":"DELETE","lineNumber":343,"oldContent":"        {"},{"type":"DELETE","lineNumber":345,"oldContent":"        public static bool Approximately(this Vector2 a, Vector2 b, float epsilon = 0.0001f)"},{"type":"DELETE","lineNumber":347,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":349,"oldContent":"        /// Checks if two vectors are approximately equal"},{"type":"DELETE","lineNumber":351,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":353,"oldContent":""},{"type":"DELETE","lineNumber":356,"oldContent":"        }"},{"type":"DELETE","lineNumber":357,"oldContent":"            return current + direction / distance * maxDistance;"},{"type":"DELETE","lineNumber":359,"oldContent":"                "},{"type":"DELETE","lineNumber":361,"oldContent":"                return target;"},{"type":"DELETE","lineNumber":363,"oldContent":"            if (distance <= maxDistance || distance < 0.0001f)"},{"type":"DELETE","lineNumber":365,"oldContent":"            "},{"type":"DELETE","lineNumber":367,"oldContent":"            float distance = direction.Length();"},{"type":"DELETE","lineNumber":369,"oldContent":"            Vector2 direction = target - current;"},{"type":"INSERT","lineNumber":190,"content":"        }"},{"type":"INSERT","lineNumber":191,"content":""},{"type":"INSERT","lineNumber":192,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":193,"content":"        /// Converts to Point (useful for grid coordinates)"},{"type":"INSERT","lineNumber":194,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":195,"content":"        public static Point ToPoint(this Vector2 vector)"},{"type":"INSERT","lineNumber":197,"content":"            return new Point((int)vector.X, (int)vector.Y);"},{"type":"DELETE","lineNumber":373,"oldContent":"        public static Vector2 MoveTowards(this Vector2 current, Vector2 target, float maxDistance)"},{"type":"INSERT","lineNumber":200,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":201,"content":"        /// Gets the distance to another vector"},{"type":"INSERT","lineNumber":203,"content":"        public static float DistanceTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":204,"content":"        {"},{"type":"INSERT","lineNumber":205,"content":"            return Vector2.Distance(from, to);"},{"type":"INSERT","lineNumber":206,"content":"        }"},{"type":"INSERT","lineNumber":207,"content":""},{"type":"INSERT","lineNumber":209,"content":"        /// Gets the squared distance to another vector (faster than DistanceTo)"},{"type":"INSERT","lineNumber":210,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":211,"content":"        public static float DistanceSquaredTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":212,"content":"        {"},{"type":"INSERT","lineNumber":213,"content":"            return Vector2.DistanceSquared(from, to);"},{"type":"INSERT","lineNumber":214,"content":"        }"},{"type":"INSERT","lineNumber":215,"content":""},{"type":"INSERT","lineNumber":216,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":378,"oldContent":"        /// Converts to Point (useful for grid coordinates)"},{"type":"INSERT","lineNumber":218,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":219,"content":"        public static Vector2 MoveTowards(this Vector2 current, Vector2 target, float maxDistance)"},{"type":"INSERT","lineNumber":220,"content":"        {"},{"type":"INSERT","lineNumber":221,"content":"            Vector2 direction = target - current;"},{"type":"INSERT","lineNumber":222,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"            if (distance <= maxDistance || distance < 0.0001f)"},{"type":"INSERT","lineNumber":225,"content":"                return target;"},{"type":"INSERT","lineNumber":226,"content":""},{"type":"INSERT","lineNumber":227,"content":"            return current + direction / distance * maxDistance;"},{"type":"INSERT","lineNumber":228,"content":"        }"},{"type":"INSERT","lineNumber":229,"content":""},{"type":"INSERT","lineNumber":231,"content":"        /// Checks if two vectors are approximately equal"},{"type":"INSERT","lineNumber":233,"content":"        public static bool Approximately(this Vector2 a, Vector2 b, float epsilon = 0.0001f)"},{"type":"INSERT","lineNumber":234,"content":"        {"},{"type":"INSERT","lineNumber":235,"content":"            return (a - b).LengthSquared() < epsilon * epsilon;"},{"type":"INSERT","lineNumber":236,"content":"        }"},{"type":"DELETE","lineNumber":382,"oldContent":"        public static Point ToPoint(this Vector2 vector)"},{"type":"INSERT","lineNumber":238,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":239,"content":"        /// Returns the component-wise minimum of two vectors"},{"type":"INSERT","lineNumber":240,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":241,"content":"        public static Vector2 Min(this Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":242,"content":"        {"},{"type":"INSERT","lineNumber":243,"content":"            return new Vector2(Math.Min(a.X, b.X), Math.Min(a.Y, b.Y));"},{"type":"INSERT","lineNumber":245,"content":""},{"type":"INSERT","lineNumber":246,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":247,"content":"        /// Returns the component-wise maximum of two vectors"},{"type":"INSERT","lineNumber":248,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":249,"content":"        public static Vector2 Max(this Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":385,"oldContent":"            return Vector2.DistanceSquared(from, to);"},{"type":"DELETE","lineNumber":386,"oldContent":"            return new Point((int)vector.X, (int)vector.Y);"},{"type":"INSERT","lineNumber":251,"content":"            return new Vector2(Math.Max(a.X, b.X), Math.Max(a.Y, b.Y));"},{"type":"INSERT","lineNumber":252,"content":"        }"},{"type":"INSERT","lineNumber":253,"content":""},{"type":"INSERT","lineNumber":254,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":255,"content":"        /// Clamps each component of the vector between corresponding components of min and max"},{"type":"INSERT","lineNumber":256,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":257,"content":"        public static Vector2 Clamp(this Vector2 vector, Vector2 min, Vector2 max)"},{"type":"INSERT","lineNumber":259,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":260,"content":"                MathHelper.Clamp(vector.X, min.X, max.X),"},{"type":"INSERT","lineNumber":261,"content":"                MathHelper.Clamp(vector.Y, min.Y, max.Y)"},{"type":"INSERT","lineNumber":262,"content":"            );"},{"type":"DELETE","lineNumber":389,"oldContent":"        public static float DistanceSquaredTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":265,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":266,"content":"        /// Returns a vector with the sign of each component (-1, 0, or 1)"},{"type":"INSERT","lineNumber":268,"content":"        public static Vector2 Sign(this Vector2 vector)"},{"type":"INSERT","lineNumber":269,"content":"        {"},{"type":"INSERT","lineNumber":270,"content":"            return new Vector2(MathHelper.Sign(vector.X), MathHelper.Sign(vector.Y));"},{"type":"INSERT","lineNumber":271,"content":"        }"},{"type":"INSERT","lineNumber":272,"content":""},{"type":"DELETE","lineNumber":393,"oldContent":"        /// Gets the squared distance to another vector (faster than DistanceTo)"},{"type":"DELETE","lineNumber":394,"oldContent":"        /// Gets the distance to another vector"},{"type":"INSERT","lineNumber":274,"content":"        /// Scales one vector by another component-wise"},{"type":"INSERT","lineNumber":275,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":276,"content":"        public static Vector2 Scale(this Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":277,"content":"        {"},{"type":"INSERT","lineNumber":278,"content":"            return new Vector2(a.X * b.X, a.Y * b.Y);"},{"type":"INSERT","lineNumber":279,"content":"        }"},{"type":"INSERT","lineNumber":280,"content":""},{"type":"INSERT","lineNumber":282,"content":"        /// Returns the angle between two vectors in radians"},{"type":"INSERT","lineNumber":284,"content":"        public static float AngleTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":285,"content":"        {"},{"type":"INSERT","lineNumber":286,"content":"            Vector2 diff = to - from;"},{"type":"INSERT","lineNumber":287,"content":"            return diff.ToAngle();"},{"type":"INSERT","lineNumber":288,"content":"        }"},{"type":"DELETE","lineNumber":398,"oldContent":"        public static float DistanceTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":290,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":291,"content":"        /// Returns the angle between two vectors (considering them as directions)"},{"type":"INSERT","lineNumber":292,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":293,"content":"        public static float AngleBetween(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":294,"content":"        {"},{"type":"INSERT","lineNumber":295,"content":"            from.Normalize();"},{"type":"INSERT","lineNumber":296,"content":"            to.Normalize();"},{"type":"INSERT","lineNumber":297,"content":""},{"type":"INSERT","lineNumber":298,"content":"            float dot = Vector2.Dot(from, to);"},{"type":"INSERT","lineNumber":299,"content":"            dot = MathHelper.Clamp(dot, -1f, 1f);"},{"type":"INSERT","lineNumber":300,"content":""},{"type":"INSERT","lineNumber":301,"content":"            return (float)Math.Acos(dot);"},{"type":"INSERT","lineNumber":303,"content":""},{"type":"INSERT","lineNumber":304,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":305,"content":"        /// Checks if a point is inside a rectangle"},{"type":"INSERT","lineNumber":306,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":307,"content":"        public static bool IsInsideRect(this Vector2 point, Rectangle rect)"},{"type":"DELETE","lineNumber":401,"oldContent":"            return Vector2.Distance(from, to);"},{"type":"INSERT","lineNumber":309,"content":"            return point.X >= rect.Left && point.X <= rect.Right &&"},{"type":"INSERT","lineNumber":310,"content":"                   point.Y >= rect.Top && point.Y <= rect.Bottom;"},{"type":"INSERT","lineNumber":311,"content":"        }"},{"type":"INSERT","lineNumber":312,"content":""},{"type":"INSERT","lineNumber":313,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":314,"content":"        /// Checks if a point is inside a circle"},{"type":"INSERT","lineNumber":315,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":316,"content":"        public static bool IsInsideCircle(this Vector2 point, Vector2 center, float radius)"},{"type":"INSERT","lineNumber":317,"content":"        {"},{"type":"INSERT","lineNumber":318,"content":"            return Vector2.DistanceSquared(point, center) <= radius * radius;"},{"type":"INSERT","lineNumber":319,"content":"        }"},{"type":"INSERT","lineNumber":320,"content":""},{"type":"INSERT","lineNumber":321,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":322,"content":"        /// Returns the closest point on a line segment to the given point"},{"type":"INSERT","lineNumber":323,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":324,"content":"        public static Vector2 ClosestPointOnLineSegment(this Vector2 point, Vector2 lineStart, Vector2 lineEnd)"},{"type":"INSERT","lineNumber":325,"content":"        {"},{"type":"INSERT","lineNumber":326,"content":"            Vector2 lineDirection = lineEnd - lineStart;"},{"type":"INSERT","lineNumber":327,"content":"            float lineLength = lineDirection.Length();"},{"type":"INSERT","lineNumber":328,"content":""},{"type":"INSERT","lineNumber":329,"content":"            if (lineLength < 0.0001f)"},{"type":"INSERT","lineNumber":330,"content":"                return lineStart;"},{"type":"INSERT","lineNumber":331,"content":""},{"type":"INSERT","lineNumber":332,"content":"            lineDirection /= lineLength;"},{"type":"INSERT","lineNumber":333,"content":""},{"type":"INSERT","lineNumber":334,"content":"            Vector2 toPoint = point - lineStart;"},{"type":"INSERT","lineNumber":335,"content":"            float projectionLength = Vector2.Dot(toPoint, lineDirection);"},{"type":"INSERT","lineNumber":336,"content":""},{"type":"INSERT","lineNumber":337,"content":"            projectionLength = MathHelper.Clamp(projectionLength, 0f, lineLength);"},{"type":"INSERT","lineNumber":338,"content":""},{"type":"INSERT","lineNumber":339,"content":"            return lineStart + lineDirection * projectionLength;"},{"type":"INSERT","lineNumber":340,"content":"        }"},{"type":"INSERT","lineNumber":341,"content":""},{"type":"INSERT","lineNumber":342,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":343,"content":"        /// Converts world coordinates to grid coordinates"},{"type":"INSERT","lineNumber":344,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":345,"content":"        public static Vector2 ToGridCoordinates(this Vector2 worldPosition, float tileSize = 32f)"},{"type":"INSERT","lineNumber":346,"content":"        {"},{"type":"INSERT","lineNumber":347,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":348,"content":"                (float)Math.Floor(worldPosition.X / tileSize),"},{"type":"INSERT","lineNumber":349,"content":"                (float)Math.Floor(worldPosition.Y / tileSize)"},{"type":"INSERT","lineNumber":350,"content":"            );"},{"type":"INSERT","lineNumber":351,"content":"        }"},{"type":"INSERT","lineNumber":352,"content":""},{"type":"INSERT","lineNumber":353,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":354,"content":"        /// Converts grid coordinates to world coordinates (centered in tile)"},{"type":"INSERT","lineNumber":355,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":356,"content":"        public static Vector2 ToWorldCoordinates(this Vector2 gridPosition, float tileSize = 32f)"},{"type":"INSERT","lineNumber":357,"content":"        {"},{"type":"INSERT","lineNumber":358,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":359,"content":"                gridPosition.X * tileSize + tileSize * 0.5f,"},{"type":"INSERT","lineNumber":360,"content":"                gridPosition.Y * tileSize + tileSize * 0.5f"},{"type":"INSERT","lineNumber":361,"content":"            );"},{"type":"INSERT","lineNumber":362,"content":"        }"},{"type":"INSERT","lineNumber":363,"content":""},{"type":"INSERT","lineNumber":364,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":365,"content":"        /// Snaps a vector to a grid"},{"type":"INSERT","lineNumber":366,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":367,"content":"        public static Vector2 SnapToGrid(this Vector2 vector, float gridSize)"},{"type":"INSERT","lineNumber":368,"content":"        {"},{"type":"INSERT","lineNumber":369,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":370,"content":"                (float)Math.Round(vector.X / gridSize) * gridSize,"},{"type":"INSERT","lineNumber":371,"content":"                (float)Math.Round(vector.Y / gridSize) * gridSize"},{"type":"INSERT","lineNumber":372,"content":"            );"},{"type":"INSERT","lineNumber":373,"content":"        }"},{"type":"INSERT","lineNumber":374,"content":""},{"type":"INSERT","lineNumber":375,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":376,"content":"        /// Creates a string representation with specified decimal places"},{"type":"INSERT","lineNumber":377,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":378,"content":"        public static string ToString(this Vector2 vector, int decimalPlaces)"},{"type":"INSERT","lineNumber":379,"content":"        {"},{"type":"INSERT","lineNumber":380,"content":"            string format = \"F\" + decimalPlaces.ToString();"},{"type":"INSERT","lineNumber":381,"content":"            return $\"({vector.X.ToString(format)}, {vector.Y.ToString(format)})\";"},{"type":"INSERT","lineNumber":382,"content":"        }"},{"type":"INSERT","lineNumber":383,"content":""},{"type":"INSERT","lineNumber":384,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":385,"content":"        /// Bounces a vector off a surface with the given normal (with damping)"},{"type":"INSERT","lineNumber":386,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":387,"content":"        public static Vector2 Bounce(this Vector2 vector, Vector2 normal, float bounciness = 1f)"},{"type":"INSERT","lineNumber":388,"content":"        {"},{"type":"INSERT","lineNumber":389,"content":"            return vector.Reflect(normal) * bounciness;"},{"type":"INSERT","lineNumber":390,"content":"        }"},{"type":"INSERT","lineNumber":391,"content":""},{"type":"INSERT","lineNumber":392,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":393,"content":"        /// Gets the dominant axis (X or Y) of the vector"},{"type":"INSERT","lineNumber":394,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":395,"content":"        public static Vector2 DominantAxis(this Vector2 vector)"},{"type":"INSERT","lineNumber":396,"content":"        {"},{"type":"INSERT","lineNumber":397,"content":"            if (Math.Abs(vector.X) > Math.Abs(vector.Y))"},{"type":"INSERT","lineNumber":398,"content":"                return new Vector2(Math.Sign(vector.X), 0);"},{"type":"INSERT","lineNumber":399,"content":"            else"},{"type":"INSERT","lineNumber":400,"content":"                return new Vector2(0, Math.Sign(vector.Y));"},{"type":"INSERT","lineNumber":401,"content":"        }"},{"type":"INSERT","lineNumber":402,"content":"    }"},{"type":"INSERT","lineNumber":403,"content":"}"}]},{"timestamp":1756231408580,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"INSERT","lineNumber":20,"content":""},{"type":"DELETE","lineNumber":27,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":28,"oldContent":"        /// Rotates a vector around a pivot point"},{"type":"DELETE","lineNumber":29,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":30,"oldContent":"        public static Vector2 RotateAround(this Vector2 vector, Vector2 pivot, float angle)"},{"type":"DELETE","lineNumber":31,"oldContent":"        {"},{"type":"DELETE","lineNumber":32,"oldContent":"            return (vector - pivot).Rotate(angle) + pivot;"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"INSERT","lineNumber":27,"content":"            /// <summary>"},{"type":"INSERT","lineNumber":28,"content":"            /// Rotates a vector around a pivot point"},{"type":"INSERT","lineNumber":29,"content":"            /// </summary>"},{"type":"INSERT","lineNumber":30,"content":"            public static Vector2 RotateAround(this Vector2 vector, Vector2 pivot, float angle)"},{"type":"INSERT","lineNumber":31,"content":"            {"},{"type":"INSERT","lineNumber":32,"content":"                Vector2 offset = vector - pivot;"},{"type":"INSERT","lineNumber":33,"content":"                float cos = (float)Math.Cos(angle);"},{"type":"INSERT","lineNumber":34,"content":"                float sin = (float)Math.Sin(angle);"},{"type":"INSERT","lineNumber":35,"content":"        "},{"type":"INSERT","lineNumber":36,"content":"                Vector2 rotatedOffset = new Vector2("},{"type":"INSERT","lineNumber":37,"content":"                    offset.X * cos - offset.Y * sin,"},{"type":"INSERT","lineNumber":38,"content":"                    offset.X * sin + offset.Y * cos"},{"type":"INSERT","lineNumber":39,"content":"                );"},{"type":"INSERT","lineNumber":40,"content":"        "},{"type":"INSERT","lineNumber":41,"content":"                return rotatedOffset + pivot;"},{"type":"INSERT","lineNumber":42,"content":"            }"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":102,"content":""},{"type":"INSERT","lineNumber":108,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":109,"content":"        public static Vector2 SetMagnitude(this Vector2 vector, float magnitude)"},{"type":"INSERT","lineNumber":110,"content":"        {"},{"type":"INSERT","lineNumber":111,"content":"            if (vector.LengthSquared() < 0.0001f) return Vector2.Zero;"},{"type":"INSERT","lineNumber":112,"content":"            vector.Normalize();"},{"type":"INSERT","lineNumber":113,"content":"            return vector * magnitude;"},{"type":"INSERT","lineNumber":115,"content":""},{"type":"INSERT","lineNumber":116,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":117,"content":"        /// Linear interpolation between two vectors"},{"type":"INSERT","lineNumber":119,"content":"        public static Vector2 Lerp(this Vector2 from, Vector2 to, float t)"},{"type":"INSERT","lineNumber":120,"content":"        {"},{"type":"INSERT","lineNumber":121,"content":"            return Vector2.Lerp(from, to, MathHelper.Clamp(t, 0f, 1f));"},{"type":"INSERT","lineNumber":122,"content":"        }"},{"type":"DELETE","lineNumber":105,"oldContent":"        public static Vector2 SetMagnitude(this Vector2 vector, float magnitude)"},{"type":"DELETE","lineNumber":106,"oldContent":"        /// Converts to Point (useful for grid coordinates)"},{"type":"INSERT","lineNumber":125,"content":"        /// Spherical linear interpolation between two vectors"},{"type":"INSERT","lineNumber":127,"content":"        public static Vector2 Slerp(this Vector2 from, Vector2 to, float t)"},{"type":"DELETE","lineNumber":109,"oldContent":"        public static Point ToPoint(this Vector2 vector)"},{"type":"INSERT","lineNumber":129,"content":"            t = MathHelper.Clamp(t, 0f, 1f);"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"INSERT","lineNumber":131,"content":"            float dot = Vector2.Dot(from.Normalized(), to.Normalized());"},{"type":"INSERT","lineNumber":132,"content":"            dot = MathHelper.Clamp(dot, -1f, 1f);"},{"type":"INSERT","lineNumber":133,"content":""},{"type":"INSERT","lineNumber":134,"content":"            float theta = (float)Math.Acos(dot) * t;"},{"type":"INSERT","lineNumber":135,"content":"            Vector2 relative = (to - from * dot).Normalized();"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"            return from * (float)Math.Cos(theta) + relative * (float)Math.Sin(theta);"},{"type":"INSERT","lineNumber":138,"content":"        }"},{"type":"INSERT","lineNumber":139,"content":""},{"type":"INSERT","lineNumber":140,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":141,"content":"        /// Returns a normalized version of the vector without modifying the original"},{"type":"INSERT","lineNumber":142,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":143,"content":"        public static Vector2 Normalized(this Vector2 vector)"},{"type":"INSERT","lineNumber":144,"content":"        {"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"            Vector2 result = vector;"},{"type":"INSERT","lineNumber":148,"content":"            result.Normalize();"},{"type":"INSERT","lineNumber":149,"content":"            return result;"},{"type":"INSERT","lineNumber":150,"content":"        }"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"INSERT","lineNumber":152,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":153,"content":"        /// Checks if the vector is approximately zero"},{"type":"INSERT","lineNumber":154,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":155,"content":"        public static bool IsZero(this Vector2 vector, float epsilon = 0.0001f)"},{"type":"INSERT","lineNumber":156,"content":"        {"},{"type":"INSERT","lineNumber":157,"content":"            return vector.LengthSquared() < epsilon * epsilon;"},{"type":"INSERT","lineNumber":158,"content":"        }"},{"type":"INSERT","lineNumber":159,"content":""},{"type":"INSERT","lineNumber":160,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":161,"content":"        /// Rounds the vector components to the nearest integer"},{"type":"INSERT","lineNumber":162,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":163,"content":"        public static Vector2 Round(this Vector2 vector)"},{"type":"INSERT","lineNumber":164,"content":"        {"},{"type":"INSERT","lineNumber":165,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":166,"content":"                (float)Math.Round(vector.X),"},{"type":"INSERT","lineNumber":167,"content":"                (float)Math.Round(vector.Y)"},{"type":"INSERT","lineNumber":168,"content":"            );"},{"type":"INSERT","lineNumber":169,"content":"        }"},{"type":"INSERT","lineNumber":170,"content":""},{"type":"INSERT","lineNumber":171,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":172,"content":"        /// Floors the vector components"},{"type":"INSERT","lineNumber":173,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":174,"content":"        public static Vector2 Floor(this Vector2 vector)"},{"type":"INSERT","lineNumber":175,"content":"        {"},{"type":"INSERT","lineNumber":176,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":177,"content":"                (float)Math.Floor(vector.X),"},{"type":"INSERT","lineNumber":178,"content":"                (float)Math.Floor(vector.Y)"},{"type":"INSERT","lineNumber":179,"content":"            );"},{"type":"INSERT","lineNumber":180,"content":"        }"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":183,"content":"        /// Ceils the vector components"},{"type":"INSERT","lineNumber":184,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":185,"content":"        public static Vector2 Ceiling(this Vector2 vector)"},{"type":"INSERT","lineNumber":186,"content":"        {"},{"type":"INSERT","lineNumber":187,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":188,"content":"                (float)Math.Ceiling(vector.X),"},{"type":"INSERT","lineNumber":189,"content":"                (float)Math.Ceiling(vector.Y)"},{"type":"INSERT","lineNumber":190,"content":"            );"},{"type":"INSERT","lineNumber":191,"content":"        }"},{"type":"INSERT","lineNumber":192,"content":""},{"type":"INSERT","lineNumber":193,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":194,"content":"        /// Returns the absolute value of each component"},{"type":"INSERT","lineNumber":195,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":196,"content":"        public static Vector2 Abs(this Vector2 vector)"},{"type":"INSERT","lineNumber":197,"content":"        {"},{"type":"INSERT","lineNumber":198,"content":"            return new Vector2(Math.Abs(vector.X), Math.Abs(vector.Y));"},{"type":"INSERT","lineNumber":199,"content":"        }"},{"type":"INSERT","lineNumber":200,"content":""},{"type":"INSERT","lineNumber":201,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":202,"content":"        /// Converts to Point (useful for grid coordinates)"},{"type":"INSERT","lineNumber":203,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":204,"content":"        public static Point ToPoint(this Vector2 vector)"},{"type":"INSERT","lineNumber":205,"content":"        {"},{"type":"DELETE","lineNumber":112,"oldContent":"            vector.Normalize();"},{"type":"INSERT","lineNumber":207,"content":"        }"},{"type":"INSERT","lineNumber":208,"content":""},{"type":"DELETE","lineNumber":114,"oldContent":"            return vector * magnitude;"},{"type":"DELETE","lineNumber":116,"oldContent":"        }"},{"type":"INSERT","lineNumber":211,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":119,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":124,"oldContent":"        /// Linear interpolation between two vectors"},{"type":"INSERT","lineNumber":217,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":127,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":130,"oldContent":"        public static Vector2 Lerp(this Vector2 from, Vector2 to, float t)"},{"type":"DELETE","lineNumber":133,"oldContent":"        {"},{"type":"DELETE","lineNumber":136,"oldContent":"            return Vector2.Lerp(from, to, MathHelper.Clamp(t, 0f, 1f));"},{"type":"INSERT","lineNumber":226,"content":"        /// Moves towards a target position by a maximum distance"},{"type":"DELETE","lineNumber":138,"oldContent":"        }"},{"type":"DELETE","lineNumber":141,"oldContent":""},{"type":"DELETE","lineNumber":144,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":147,"oldContent":"        /// Spherical linear interpolation between two vectors"},{"type":"DELETE","lineNumber":150,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":153,"oldContent":"        public static Vector2 Slerp(this Vector2 from, Vector2 to, float t)"},{"type":"DELETE","lineNumber":155,"oldContent":"        {"},{"type":"INSERT","lineNumber":239,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":157,"oldContent":"            t = MathHelper.Clamp(t, 0f, 1f);"},{"type":"INSERT","lineNumber":241,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"DELETE","lineNumber":163,"oldContent":"            float dot = Vector2.Dot(from.Normalized(), to.Normalized());"},{"type":"INSERT","lineNumber":246,"content":""},{"type":"DELETE","lineNumber":165,"oldContent":"            dot = MathHelper.Clamp(dot, -1f, 1f);"},{"type":"DELETE","lineNumber":170,"oldContent":"            float theta = (float)Math.Acos(dot) * t;"},{"type":"DELETE","lineNumber":172,"oldContent":"            Vector2 relative = (to - from * dot).Normalized();"},{"type":"INSERT","lineNumber":253,"content":"        }"},{"type":"DELETE","lineNumber":177,"oldContent":"            return from * (float)Math.Cos(theta) + relative * (float)Math.Sin(theta);"},{"type":"DELETE","lineNumber":179,"oldContent":"        }"},{"type":"INSERT","lineNumber":259,"content":"        {"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"DELETE","lineNumber":185,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":188,"oldContent":"        /// Returns a normalized version of the vector without modifying the original"},{"type":"DELETE","lineNumber":190,"oldContent":"        /// </summary>"},{"type":"INSERT","lineNumber":267,"content":"        {"},{"type":"DELETE","lineNumber":193,"oldContent":"        public static Vector2 Normalized(this Vector2 vector)"},{"type":"DELETE","lineNumber":196,"oldContent":"        {"},{"type":"DELETE","lineNumber":197,"oldContent":"            if (vector.LengthSquared() < 0.0001f) return Vector2.Zero;"},{"type":"INSERT","lineNumber":272,"content":"        }"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"DELETE","lineNumber":200,"oldContent":""},{"type":"INSERT","lineNumber":276,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":202,"oldContent":"            Vector2 result = vector;"},{"type":"DELETE","lineNumber":205,"oldContent":"            result.Normalize();"},{"type":"DELETE","lineNumber":208,"oldContent":"            return result;"},{"type":"INSERT","lineNumber":282,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":210,"oldContent":"        }"},{"type":"DELETE","lineNumber":213,"oldContent":""},{"type":"DELETE","lineNumber":216,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":219,"oldContent":"        /// Checks if the vector is approximately zero"},{"type":"INSERT","lineNumber":290,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":223,"oldContent":"        public static bool IsZero(this Vector2 vector, float epsilon = 0.0001f)"},{"type":"DELETE","lineNumber":226,"oldContent":"        {"},{"type":"DELETE","lineNumber":229,"oldContent":"            return vector.LengthSquared() < epsilon * epsilon;"},{"type":"INSERT","lineNumber":298,"content":""},{"type":"DELETE","lineNumber":231,"oldContent":"        }"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"DELETE","lineNumber":237,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":240,"oldContent":"        /// Rounds the vector components to the nearest integer"},{"type":"DELETE","lineNumber":243,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":246,"oldContent":"        public static Vector2 Round(this Vector2 vector)"},{"type":"DELETE","lineNumber":248,"oldContent":"        {"},{"type":"INSERT","lineNumber":311,"content":"        }"},{"type":"DELETE","lineNumber":251,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":254,"oldContent":"                (float)Math.Round(vector.X),"},{"type":"DELETE","lineNumber":256,"oldContent":"                (float)Math.Round(vector.Y)"},{"type":"INSERT","lineNumber":317,"content":"        {"},{"type":"DELETE","lineNumber":259,"oldContent":"            );"},{"type":"DELETE","lineNumber":262,"oldContent":"        }"},{"type":"DELETE","lineNumber":265,"oldContent":""},{"type":"DELETE","lineNumber":268,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":271,"oldContent":"        /// Floors the vector components"},{"type":"DELETE","lineNumber":274,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":277,"oldContent":"        public static Vector2 Floor(this Vector2 vector)"},{"type":"DELETE","lineNumber":281,"oldContent":"        {"},{"type":"DELETE","lineNumber":283,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":286,"oldContent":"                (float)Math.Floor(vector.X),"},{"type":"DELETE","lineNumber":289,"oldContent":"                (float)Math.Floor(vector.Y)"},{"type":"DELETE","lineNumber":292,"oldContent":"            );"},{"type":"DELETE","lineNumber":295,"oldContent":"        }"},{"type":"DELETE","lineNumber":298,"oldContent":""},{"type":"DELETE","lineNumber":301,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":304,"oldContent":"        /// Ceils the vector components"},{"type":"DELETE","lineNumber":307,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":310,"oldContent":"        public static Vector2 Ceiling(this Vector2 vector)"},{"type":"DELETE","lineNumber":313,"oldContent":"        {"},{"type":"DELETE","lineNumber":316,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":319,"oldContent":"                (float)Math.Ceiling(vector.X),"},{"type":"DELETE","lineNumber":322,"oldContent":"                (float)Math.Ceiling(vector.Y)"},{"type":"DELETE","lineNumber":325,"oldContent":"            );"},{"type":"DELETE","lineNumber":327,"oldContent":"        }"},{"type":"DELETE","lineNumber":331,"oldContent":""},{"type":"DELETE","lineNumber":334,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":337,"oldContent":"        /// Returns the absolute value of each component"},{"type":"DELETE","lineNumber":340,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":343,"oldContent":"        public static Vector2 Abs(this Vector2 vector)"},{"type":"DELETE","lineNumber":346,"oldContent":"        {"},{"type":"DELETE","lineNumber":349,"oldContent":"            return new Vector2(Math.Abs(vector.X), Math.Abs(vector.Y));"},{"type":"DELETE","lineNumber":351,"oldContent":"        {"},{"type":"DELETE","lineNumber":354,"oldContent":"        }"},{"type":"DELETE","lineNumber":356,"oldContent":""},{"type":"DELETE","lineNumber":358,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":360,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":362,"oldContent":"        /// Moves towards a target position by a maximum distance"},{"type":"DELETE","lineNumber":365,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":367,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":369,"oldContent":""},{"type":"DELETE","lineNumber":372,"oldContent":"        }"},{"type":"DELETE","lineNumber":374,"oldContent":"        {"},{"type":"DELETE","lineNumber":379,"oldContent":"        {"},{"type":"DELETE","lineNumber":380,"oldContent":"        }"},{"type":"DELETE","lineNumber":384,"oldContent":""},{"type":"DELETE","lineNumber":385,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":387,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":391,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":393,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":395,"oldContent":""},{"type":"DELETE","lineNumber":398,"oldContent":"        }"},{"type":"DELETE","lineNumber":400,"oldContent":"        {"}]},{"timestamp":1756231411731,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"MODIFY","lineNumber":20,"content":"","oldContent":""},{"type":"DELETE","lineNumber":27,"oldContent":"            /// <summary>"},{"type":"DELETE","lineNumber":28,"oldContent":"            /// Rotates a vector around a pivot point"},{"type":"DELETE","lineNumber":29,"oldContent":"            /// </summary>"},{"type":"DELETE","lineNumber":30,"oldContent":"            public static Vector2 RotateAround(this Vector2 vector, Vector2 pivot, float angle)"},{"type":"DELETE","lineNumber":31,"oldContent":"            {"},{"type":"DELETE","lineNumber":32,"oldContent":"                Vector2 offset = vector - pivot;"},{"type":"DELETE","lineNumber":33,"oldContent":"                float cos = (float)Math.Cos(angle);"},{"type":"DELETE","lineNumber":34,"oldContent":"                float sin = (float)Math.Sin(angle);"},{"type":"INSERT","lineNumber":27,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":28,"content":"        /// Rotates a vector around a pivot point"},{"type":"INSERT","lineNumber":29,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":30,"content":"        public static Vector2 RotateAround(this Vector2 vector, Vector2 pivot, float angle)"},{"type":"INSERT","lineNumber":31,"content":"        {"},{"type":"INSERT","lineNumber":32,"content":"            Vector2 offset = vector - pivot;"},{"type":"INSERT","lineNumber":33,"content":"            float cos = (float)Math.Cos(angle);"},{"type":"INSERT","lineNumber":34,"content":"            float sin = (float)Math.Sin(angle);"},{"type":"INSERT","lineNumber":35,"content":"    "},{"type":"INSERT","lineNumber":36,"content":"            Vector2 rotatedOffset = new Vector2("},{"type":"INSERT","lineNumber":37,"content":"                offset.X * cos - offset.Y * sin,"},{"type":"INSERT","lineNumber":38,"content":"                offset.X * sin + offset.Y * cos"},{"type":"INSERT","lineNumber":39,"content":"            );"},{"type":"INSERT","lineNumber":40,"content":"    "},{"type":"INSERT","lineNumber":41,"content":"            return rotatedOffset + pivot;"},{"type":"INSERT","lineNumber":42,"content":"        }"},{"type":"DELETE","lineNumber":36,"oldContent":"        "},{"type":"DELETE","lineNumber":38,"oldContent":"                Vector2 rotatedOffset = new Vector2("},{"type":"DELETE","lineNumber":40,"oldContent":"                    offset.X * cos - offset.Y * sin,"},{"type":"DELETE","lineNumber":42,"oldContent":"                    offset.X * sin + offset.Y * cos"},{"type":"DELETE","lineNumber":43,"oldContent":"                );"},{"type":"DELETE","lineNumber":45,"oldContent":"        "},{"type":"DELETE","lineNumber":46,"oldContent":"                return rotatedOffset + pivot;"},{"type":"DELETE","lineNumber":48,"oldContent":"            }"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":80,"content":""},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"INSERT","lineNumber":102,"content":""},{"type":"DELETE","lineNumber":107,"oldContent":"        }"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":111,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":112,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":113,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":114,"oldContent":"        {"},{"type":"DELETE","lineNumber":118,"oldContent":"            if (vector.LengthSquared() < 0.0001f) return Vector2.Zero;"},{"type":"DELETE","lineNumber":119,"oldContent":"            return new Point((int)vector.X, (int)vector.Y);"},{"type":"DELETE","lineNumber":122,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":114,"content":"        }"},{"type":"DELETE","lineNumber":124,"oldContent":"        /// Gets the distance to another vector"},{"type":"DELETE","lineNumber":127,"oldContent":"        public static float DistanceTo(this Vector2 from, Vector2 to)"},{"type":"DELETE","lineNumber":128,"oldContent":"        {"},{"type":"INSERT","lineNumber":118,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":131,"oldContent":"            return Vector2.Distance(from, to);"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"INSERT","lineNumber":124,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":137,"oldContent":"        /// Gets the squared distance to another vector (faster than DistanceTo)"},{"type":"DELETE","lineNumber":140,"oldContent":"        public static float DistanceSquaredTo(this Vector2 from, Vector2 to)"},{"type":"DELETE","lineNumber":141,"oldContent":"            t = MathHelper.Clamp(t, 0f, 1f);"},{"type":"INSERT","lineNumber":129,"content":"            t = MathHelper.Clamp(t, 0f, 1f);"},{"type":"DELETE","lineNumber":145,"oldContent":"            return Vector2.DistanceSquared(from, to);"},{"type":"DELETE","lineNumber":147,"oldContent":"        }"},{"type":"DELETE","lineNumber":150,"oldContent":""},{"type":"DELETE","lineNumber":152,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":155,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":158,"oldContent":"        public static Vector2 MoveTowards(this Vector2 current, Vector2 target, float maxDistance)"},{"type":"DELETE","lineNumber":160,"oldContent":"        {"},{"type":"DELETE","lineNumber":163,"oldContent":"            Vector2 direction = target - current;"},{"type":"DELETE","lineNumber":165,"oldContent":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":145,"content":"            if (vector.LengthSquared() < 0.0001f) return Vector2.Zero;"},{"type":"DELETE","lineNumber":168,"oldContent":""},{"type":"DELETE","lineNumber":169,"oldContent":"            if (distance <= maxDistance || distance < 0.0001f)"},{"type":"DELETE","lineNumber":172,"oldContent":"                return target;"},{"type":"DELETE","lineNumber":174,"oldContent":""},{"type":"DELETE","lineNumber":177,"oldContent":"            return current + direction / distance * maxDistance;"},{"type":"DELETE","lineNumber":179,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":185,"oldContent":"        /// Checks if two vectors are approximately equal"},{"type":"DELETE","lineNumber":188,"oldContent":"        public static bool Approximately(this Vector2 a, Vector2 b, float epsilon = 0.0001f)"},{"type":"DELETE","lineNumber":191,"oldContent":"        {"},{"type":"DELETE","lineNumber":193,"oldContent":"            return (a - b).LengthSquared() < epsilon * epsilon;"},{"type":"DELETE","lineNumber":195,"oldContent":"        }"},{"type":"DELETE","lineNumber":198,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":201,"oldContent":"        /// Returns the component-wise minimum of two vectors"},{"type":"DELETE","lineNumber":203,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":205,"oldContent":"        public static Vector2 Min(this Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":207,"oldContent":"        {"},{"type":"DELETE","lineNumber":210,"oldContent":"            return new Vector2(Math.Min(a.X, b.X), Math.Min(a.Y, b.Y));"},{"type":"DELETE","lineNumber":213,"oldContent":""},{"type":"DELETE","lineNumber":215,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":217,"oldContent":"        /// Returns the component-wise maximum of two vectors"},{"type":"DELETE","lineNumber":219,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":222,"oldContent":"        public static Vector2 Max(this Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":225,"oldContent":"            return new Vector2(Math.Max(a.X, b.X), Math.Max(a.Y, b.Y));"},{"type":"DELETE","lineNumber":228,"oldContent":"        }"},{"type":"DELETE","lineNumber":230,"oldContent":""},{"type":"DELETE","lineNumber":232,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":235,"oldContent":"        /// Clamps each component of the vector between corresponding components of min and max"},{"type":"DELETE","lineNumber":237,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":240,"oldContent":"        public static Vector2 Clamp(this Vector2 vector, Vector2 min, Vector2 max)"},{"type":"DELETE","lineNumber":243,"oldContent":"            return new Vector2("},{"type":"DELETE","lineNumber":245,"oldContent":"                MathHelper.Clamp(vector.X, min.X, max.X),"},{"type":"DELETE","lineNumber":248,"oldContent":"                MathHelper.Clamp(vector.Y, min.Y, max.Y)"},{"type":"DELETE","lineNumber":250,"oldContent":"            );"},{"type":"DELETE","lineNumber":254,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":256,"oldContent":"        /// Returns a vector with the sign of each component (-1, 0, or 1)"},{"type":"DELETE","lineNumber":259,"oldContent":"        public static Vector2 Sign(this Vector2 vector)"},{"type":"DELETE","lineNumber":262,"oldContent":"        {"},{"type":"DELETE","lineNumber":264,"oldContent":"            return new Vector2(MathHelper.Sign(vector.X), MathHelper.Sign(vector.Y));"},{"type":"INSERT","lineNumber":206,"content":"            return new Point((int)vector.X, (int)vector.Y);"},{"type":"INSERT","lineNumber":208,"content":""},{"type":"INSERT","lineNumber":209,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":210,"content":"        /// Gets the distance to another vector"},{"type":"INSERT","lineNumber":211,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":212,"content":"        public static float DistanceTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":213,"content":"        {"},{"type":"INSERT","lineNumber":214,"content":"            return Vector2.Distance(from, to);"},{"type":"INSERT","lineNumber":217,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":218,"content":"        /// Gets the squared distance to another vector (faster than DistanceTo)"},{"type":"INSERT","lineNumber":219,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":220,"content":"        public static float DistanceSquaredTo(this Vector2 from, Vector2 to)"},{"type":"INSERT","lineNumber":221,"content":"        {"},{"type":"INSERT","lineNumber":222,"content":"            return Vector2.DistanceSquared(from, to);"},{"type":"INSERT","lineNumber":223,"content":"        }"},{"type":"DELETE","lineNumber":270,"oldContent":"        /// Scales one vector by another component-wise"},{"type":"INSERT","lineNumber":225,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":226,"content":"        /// Moves towards a target position by a maximum distance"},{"type":"INSERT","lineNumber":228,"content":"        public static Vector2 MoveTowards(this Vector2 current, Vector2 target, float maxDistance)"},{"type":"INSERT","lineNumber":229,"content":"        {"},{"type":"INSERT","lineNumber":230,"content":"            Vector2 direction = target - current;"},{"type":"INSERT","lineNumber":231,"content":"            float distance = direction.Length();"},{"type":"INSERT","lineNumber":232,"content":""},{"type":"INSERT","lineNumber":233,"content":"            if (distance <= maxDistance || distance < 0.0001f)"},{"type":"INSERT","lineNumber":234,"content":"                return target;"},{"type":"INSERT","lineNumber":235,"content":""},{"type":"INSERT","lineNumber":236,"content":"            return current + direction / distance * maxDistance;"},{"type":"INSERT","lineNumber":237,"content":"        }"},{"type":"INSERT","lineNumber":238,"content":""},{"type":"INSERT","lineNumber":239,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":240,"content":"        /// Checks if two vectors are approximately equal"},{"type":"INSERT","lineNumber":242,"content":"        public static bool Approximately(this Vector2 a, Vector2 b, float epsilon = 0.0001f)"},{"type":"INSERT","lineNumber":243,"content":"        {"},{"type":"INSERT","lineNumber":244,"content":"            return (a - b).LengthSquared() < epsilon * epsilon;"},{"type":"INSERT","lineNumber":245,"content":"        }"},{"type":"INSERT","lineNumber":246,"content":""},{"type":"INSERT","lineNumber":247,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":248,"content":"        /// Returns the component-wise minimum of two vectors"},{"type":"INSERT","lineNumber":249,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":250,"content":"        public static Vector2 Min(this Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":251,"content":"        {"},{"type":"INSERT","lineNumber":252,"content":"            return new Vector2(Math.Min(a.X, b.X), Math.Min(a.Y, b.Y));"},{"type":"INSERT","lineNumber":253,"content":"        }"},{"type":"INSERT","lineNumber":254,"content":""},{"type":"INSERT","lineNumber":255,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":256,"content":"        /// Returns the component-wise maximum of two vectors"},{"type":"INSERT","lineNumber":257,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":258,"content":"        public static Vector2 Max(this Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":259,"content":"        {"},{"type":"INSERT","lineNumber":260,"content":"            return new Vector2(Math.Max(a.X, b.X), Math.Max(a.Y, b.Y));"},{"type":"INSERT","lineNumber":261,"content":"        }"},{"type":"INSERT","lineNumber":262,"content":""},{"type":"INSERT","lineNumber":263,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":264,"content":"        /// Clamps each component of the vector between corresponding components of min and max"},{"type":"INSERT","lineNumber":265,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":266,"content":"        public static Vector2 Clamp(this Vector2 vector, Vector2 min, Vector2 max)"},{"type":"INSERT","lineNumber":267,"content":"        {"},{"type":"INSERT","lineNumber":268,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":269,"content":"                MathHelper.Clamp(vector.X, min.X, max.X),"},{"type":"INSERT","lineNumber":270,"content":"                MathHelper.Clamp(vector.Y, min.Y, max.Y)"},{"type":"INSERT","lineNumber":271,"content":"            );"},{"type":"INSERT","lineNumber":272,"content":"        }"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"INSERT","lineNumber":274,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":275,"content":"        /// Returns a vector with the sign of each component (-1, 0, or 1)"},{"type":"INSERT","lineNumber":276,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":277,"content":"        public static Vector2 Sign(this Vector2 vector)"},{"type":"INSERT","lineNumber":278,"content":"        {"},{"type":"INSERT","lineNumber":279,"content":"            return new Vector2(MathHelper.Sign(vector.X), MathHelper.Sign(vector.Y));"},{"type":"INSERT","lineNumber":280,"content":"        }"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":283,"content":"        /// Scales one vector by another component-wise"},{"type":"INSERT","lineNumber":284,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":276,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":290,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":284,"oldContent":"        /// Moves towards a target position by a maximum distance"},{"type":"INSERT","lineNumber":298,"content":""},{"type":"DELETE","lineNumber":293,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":295,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":300,"oldContent":""},{"type":"INSERT","lineNumber":311,"content":"        }"},{"type":"DELETE","lineNumber":305,"oldContent":"        }"},{"type":"INSERT","lineNumber":317,"content":"        {"},{"type":"DELETE","lineNumber":310,"oldContent":"        {"},{"type":"DELETE","lineNumber":316,"oldContent":"        {"},{"type":"DELETE","lineNumber":321,"oldContent":"        }"},{"type":"DELETE","lineNumber":323,"oldContent":""},{"type":"DELETE","lineNumber":325,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":330,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":336,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":343,"oldContent":""},{"type":"DELETE","lineNumber":352,"oldContent":"        }"},{"type":"DELETE","lineNumber":357,"oldContent":"        {"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Utilities/RandomHelper.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Utilities/RandomHelper.cs","baseContent":"namespace DungeonExplorer.Utilities;\n\npublic class RandomHelper\n{\n    \n}","baseTimestamp":1756230554385,"deltas":[{"timestamp":1756231191837,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Utilities;"},{"type":"INSERT","lineNumber":1,"content":"// RandomHelper.cs - Random utility functions"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"INSERT","lineNumber":5,"content":"using System.Collections.Generic;"},{"type":"INSERT","lineNumber":6,"content":"using System.Linq;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class RandomHelper"},{"type":"INSERT","lineNumber":8,"content":"namespace DungeonExplorer.Utilities"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":10,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":11,"content":"    /// Collection of random utility functions"},{"type":"INSERT","lineNumber":12,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":13,"content":"    public static class RandomHelper"},{"type":"INSERT","lineNumber":14,"content":"    {"},{"type":"INSERT","lineNumber":15,"content":"        private static Random _random = new Random();"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":18,"content":"        /// Sets the seed for the random number generator"},{"type":"INSERT","lineNumber":19,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":20,"content":"        public static void SetSeed(int seed)"},{"type":"INSERT","lineNumber":21,"content":"        {"},{"type":"INSERT","lineNumber":22,"content":"            _random = new Random(seed);"},{"type":"INSERT","lineNumber":23,"content":"        }"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":26,"content":"        /// Returns a random float between min and max"},{"type":"INSERT","lineNumber":27,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":28,"content":"        public static float Range(float min, float max)"},{"type":"INSERT","lineNumber":29,"content":"        {"},{"type":"INSERT","lineNumber":30,"content":"            return min + (float)_random.NextDouble() * (max - min);"},{"type":"INSERT","lineNumber":31,"content":"        }"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":34,"content":"        /// Returns a random integer between min (inclusive) and max (exclusive)"},{"type":"INSERT","lineNumber":35,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":36,"content":"        public static int Range(int min, int max)"},{"type":"INSERT","lineNumber":37,"content":"        {"},{"type":"INSERT","lineNumber":38,"content":"            return _random.Next(min, max);"},{"type":"INSERT","lineNumber":39,"content":"        }"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":42,"content":"        /// Returns a random Vector2 within a circle"},{"type":"INSERT","lineNumber":43,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":44,"content":"        public static Vector2 InsideUnitCircle()"},{"type":"INSERT","lineNumber":45,"content":"        {"},{"type":"INSERT","lineNumber":46,"content":"            float angle = Range(0f, MathHelper.TWO_PI);"},{"type":"INSERT","lineNumber":47,"content":"            float radius = (float)Math.Sqrt(_random.NextDouble());"},{"type":"INSERT","lineNumber":48,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":49,"content":"                (float)Math.Cos(angle) * radius,"},{"type":"INSERT","lineNumber":50,"content":"                (float)Math.Sin(angle) * radius"},{"type":"INSERT","lineNumber":51,"content":"            );"},{"type":"INSERT","lineNumber":52,"content":"        }"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"INSERT","lineNumber":54,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":55,"content":"        /// Returns a random Vector2 on the edge of a unit circle"},{"type":"INSERT","lineNumber":56,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":57,"content":"        public static Vector2 OnUnitCircle()"},{"type":"INSERT","lineNumber":58,"content":"        {"},{"type":"INSERT","lineNumber":59,"content":"            float angle = Range(0f, MathHelper.TWO_PI);"},{"type":"INSERT","lineNumber":60,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":61,"content":"                (float)Math.Cos(angle),"},{"type":"INSERT","lineNumber":62,"content":"                (float)Math.Sin(angle)"},{"type":"INSERT","lineNumber":63,"content":"            );"},{"type":"INSERT","lineNumber":64,"content":"        }"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":67,"content":"        /// Returns a random Vector2 within specified bounds"},{"type":"INSERT","lineNumber":68,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":69,"content":"        public static Vector2 InsideRect(Rectangle bounds)"},{"type":"INSERT","lineNumber":70,"content":"        {"},{"type":"INSERT","lineNumber":71,"content":"            return new Vector2("},{"type":"INSERT","lineNumber":72,"content":"                Range(bounds.Left, bounds.Right),"},{"type":"INSERT","lineNumber":73,"content":"                Range(bounds.Top, bounds.Bottom)"},{"type":"INSERT","lineNumber":74,"content":"            );"},{"type":"INSERT","lineNumber":75,"content":"        }"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":78,"content":"        /// Returns a random boolean value"},{"type":"INSERT","lineNumber":79,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":80,"content":"        public static bool Bool()"},{"type":"INSERT","lineNumber":81,"content":"        {"},{"type":"INSERT","lineNumber":82,"content":"            return _random.Next(2) == 0;"},{"type":"INSERT","lineNumber":83,"content":"        }"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"INSERT","lineNumber":85,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":86,"content":"        /// Returns true with the specified probability (0.0 to 1.0)"},{"type":"INSERT","lineNumber":87,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":88,"content":"        public static bool Chance(float probability)"},{"type":"INSERT","lineNumber":89,"content":"        {"},{"type":"INSERT","lineNumber":90,"content":"            return _random.NextDouble() < probability;"},{"type":"INSERT","lineNumber":91,"content":"        }"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":94,"content":"        /// Returns a random element from an array"},{"type":"INSERT","lineNumber":95,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":96,"content":"        public static T Choose<T>(params T[] options)"},{"type":"INSERT","lineNumber":97,"content":"        {"},{"type":"INSERT","lineNumber":98,"content":"            if (options.Length == 0) throw new ArgumentException(\"No options provided\");"},{"type":"INSERT","lineNumber":99,"content":"            return options[_random.Next(options.Length)];"},{"type":"INSERT","lineNumber":100,"content":"        }"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":103,"content":"        /// Returns a random element from a list"},{"type":"INSERT","lineNumber":104,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":105,"content":"        public static T Choose<T>(List<T> list)"},{"type":"INSERT","lineNumber":106,"content":"        {"},{"type":"INSERT","lineNumber":107,"content":"            if (list.Count == 0) throw new ArgumentException(\"List is empty\");"},{"type":"INSERT","lineNumber":108,"content":"            return list[_random.Next(list.Count)];"},{"type":"INSERT","lineNumber":109,"content":"        }"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":112,"content":"        /// Shuffles a list in place using Fisher-Yates algorithm"},{"type":"INSERT","lineNumber":113,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":114,"content":"        public static void Shuffle<T>(List<T> list)"},{"type":"INSERT","lineNumber":115,"content":"        {"},{"type":"INSERT","lineNumber":116,"content":"            for (int i = list.Count - 1; i > 0; i--)"},{"type":"INSERT","lineNumber":117,"content":"            {"},{"type":"INSERT","lineNumber":118,"content":"                int j = _random.Next(i + 1);"},{"type":"INSERT","lineNumber":119,"content":"                T temp = list[i];"},{"type":"INSERT","lineNumber":120,"content":"                list[i] = list[j];"},{"type":"INSERT","lineNumber":121,"content":"                list[j] = temp;"},{"type":"INSERT","lineNumber":122,"content":"            }"},{"type":"INSERT","lineNumber":123,"content":"        }"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"INSERT","lineNumber":125,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":126,"content":"        /// Returns a shuffled copy of the list"},{"type":"INSERT","lineNumber":127,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":128,"content":"        public static List<T> Shuffled<T>(List<T> list)"},{"type":"INSERT","lineNumber":129,"content":"        {"},{"type":"INSERT","lineNumber":130,"content":"            var result = new List<T>(list);"},{"type":"INSERT","lineNumber":131,"content":"            Shuffle(result);"},{"type":"INSERT","lineNumber":132,"content":"            return result;"},{"type":"INSERT","lineNumber":133,"content":"        }"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"INSERT","lineNumber":135,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":136,"content":"        /// Returns multiple unique random elements from a list"},{"type":"INSERT","lineNumber":137,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":138,"content":"        public static List<T> Choose<T>(List<T> list, int count)"},{"type":"INSERT","lineNumber":139,"content":"        {"},{"type":"INSERT","lineNumber":140,"content":"            if (count > list.Count)"},{"type":"INSERT","lineNumber":141,"content":"                throw new ArgumentException(\"Count cannot exceed list size\");"},{"type":"INSERT","lineNumber":142,"content":""},{"type":"INSERT","lineNumber":143,"content":"            var shuffled = Shuffled(list);"},{"type":"INSERT","lineNumber":144,"content":"            return shuffled.Take(count).ToList();"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":148,"content":"        /// Weighted random selection"},{"type":"INSERT","lineNumber":149,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":150,"content":"        public static T WeightedChoice<T>(Dictionary<T, float> weightedOptions)"},{"type":"INSERT","lineNumber":151,"content":"        {"},{"type":"INSERT","lineNumber":152,"content":"            float totalWeight = weightedOptions.Values.Sum();"},{"type":"INSERT","lineNumber":153,"content":"            float randomWeight = Range(0f, totalWeight);"},{"type":"INSERT","lineNumber":154,"content":"            "},{"type":"INSERT","lineNumber":155,"content":"            float currentWeight = 0f;"},{"type":"INSERT","lineNumber":156,"content":"            foreach (var kvp in weightedOptions)"},{"type":"INSERT","lineNumber":157,"content":"            {"},{"type":"INSERT","lineNumber":158,"content":"                currentWeight += kvp.Value;"},{"type":"INSERT","lineNumber":159,"content":"                if (randomWeight <= currentWeight)"},{"type":"INSERT","lineNumber":160,"content":"                    return kvp.Key;"},{"type":"INSERT","lineNumber":161,"content":"            }"},{"type":"INSERT","lineNumber":162,"content":""},{"type":"INSERT","lineNumber":163,"content":"            // Fallback to first option"},{"type":"INSERT","lineNumber":164,"content":"            return weightedOptions.Keys.First();"},{"type":"INSERT","lineNumber":165,"content":"        }"},{"type":"INSERT","lineNumber":166,"content":""},{"type":"INSERT","lineNumber":167,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":168,"content":"        /// Returns a random color"},{"type":"INSERT","lineNumber":169,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":170,"content":"        public static Color RandomColor()"},{"type":"INSERT","lineNumber":171,"content":"        {"},{"type":"INSERT","lineNumber":172,"content":"            return new Color("},{"type":"INSERT","lineNumber":173,"content":"                _random.Next(256),"},{"type":"INSERT","lineNumber":174,"content":"                _random.Next(256),"},{"type":"INSERT","lineNumber":175,"content":"                _random.Next(256)"},{"type":"INSERT","lineNumber":176,"content":"            );"},{"type":"INSERT","lineNumber":177,"content":"        }"},{"type":"INSERT","lineNumber":178,"content":""},{"type":"INSERT","lineNumber":179,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":180,"content":"        /// Returns a random color with specified alpha"},{"type":"INSERT","lineNumber":181,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":182,"content":"        public static Color RandomColor(byte alpha)"},{"type":"INSERT","lineNumber":183,"content":"        {"},{"type":"INSERT","lineNumber":184,"content":"            return new Color("},{"type":"INSERT","lineNumber":185,"content":"                _random.Next(256),"},{"type":"INSERT","lineNumber":186,"content":"                _random.Next(256),"},{"type":"INSERT","lineNumber":187,"content":"                _random.Next(256),"},{"type":"INSERT","lineNumber":188,"content":"                alpha"},{"type":"INSERT","lineNumber":189,"content":"            );"},{"type":"INSERT","lineNumber":190,"content":"        }"},{"type":"INSERT","lineNumber":191,"content":""},{"type":"INSERT","lineNumber":192,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":193,"content":"        /// Returns a random rotation (0 to 2π)"},{"type":"INSERT","lineNumber":194,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":195,"content":"        public static float RandomRotation()"},{"type":"INSERT","lineNumber":196,"content":"        {"},{"type":"INSERT","lineNumber":197,"content":"            return Range(0f, MathHelper.TWO_PI);"},{"type":"INSERT","lineNumber":198,"content":"        }"},{"type":"INSERT","lineNumber":199,"content":""},{"type":"INSERT","lineNumber":200,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":201,"content":"        /// Returns a random direction vector (normalized)"},{"type":"INSERT","lineNumber":202,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":203,"content":"        public static Vector2 RandomDirection()"},{"type":"INSERT","lineNumber":204,"content":"        {"},{"type":"INSERT","lineNumber":205,"content":"            return OnUnitCircle();"},{"type":"INSERT","lineNumber":206,"content":"        }"},{"type":"INSERT","lineNumber":207,"content":"    }"}]}]},"C:/Users/tagli/RiderProjects/DungeonExplorer/Utilities/MathHelper.cs":{"filePath":"C:/Users/tagli/RiderProjects/DungeonExplorer/Utilities/MathHelper.cs","baseContent":"namespace DungeonExplorer.Utilities;\n\npublic class MathHelper\n{\n    \n}","baseTimestamp":1756230561048,"deltas":[{"timestamp":1756231161261,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// ============================================","oldContent":"namespace DungeonExplorer.Utilities;"},{"type":"INSERT","lineNumber":1,"content":"// MathHelper.cs - Mathematical utility functions"},{"type":"INSERT","lineNumber":2,"content":"// ============================================"},{"type":"INSERT","lineNumber":3,"content":"using Microsoft.Xna.Framework;"},{"type":"INSERT","lineNumber":4,"content":"using System;"},{"type":"DELETE","lineNumber":2,"oldContent":"public class MathHelper"},{"type":"INSERT","lineNumber":6,"content":"namespace DungeonExplorer.Utilities"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    /// <summary>"},{"type":"INSERT","lineNumber":9,"content":"    /// Collection of mathematical helper functions"},{"type":"INSERT","lineNumber":10,"content":"    /// </summary>"},{"type":"INSERT","lineNumber":11,"content":"    public static class MathHelper"},{"type":"INSERT","lineNumber":12,"content":"    {"},{"type":"INSERT","lineNumber":13,"content":"        public const float PI = (float)Math.PI;"},{"type":"INSERT","lineNumber":14,"content":"        public const float TWO_PI = PI * 2f;"},{"type":"INSERT","lineNumber":15,"content":"        public const float HALF_PI = PI * 0.5f;"},{"type":"INSERT","lineNumber":16,"content":"        public const float DEG_TO_RAD = PI / 180f;"},{"type":"INSERT","lineNumber":17,"content":"        public const float RAD_TO_DEG = 180f / PI;"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":20,"content":"        /// Ping-pong a value between 0 and length"},{"type":"INSERT","lineNumber":21,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":22,"content":"        public static float PingPong(float t, float length)"},{"type":"INSERT","lineNumber":23,"content":"        {"},{"type":"INSERT","lineNumber":24,"content":"            t = Repeat(t, length * 2f);"},{"type":"INSERT","lineNumber":25,"content":"            return length - Math.Abs(t - length);"},{"type":"INSERT","lineNumber":26,"content":"        }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":29,"content":"        /// Inverse linear interpolation - finds t for lerp(a, b, t) = value"},{"type":"INSERT","lineNumber":30,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":31,"content":"        public static float InverseLerp(float a, float b, float value)"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"            if (Math.Abs(a - b) < 0.0001f) return 0f;"},{"type":"INSERT","lineNumber":34,"content":"            return (value - a) / (b - a);"},{"type":"INSERT","lineNumber":35,"content":"        }"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":38,"content":"        /// Remaps a value from one range to another"},{"type":"INSERT","lineNumber":39,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":40,"content":"        public static float Remap(float value, float fromMin, float fromMax, float toMin, float toMax)"},{"type":"INSERT","lineNumber":41,"content":"        {"},{"type":"INSERT","lineNumber":42,"content":"            float t = InverseLerp(fromMin, fromMax, value);"},{"type":"INSERT","lineNumber":43,"content":"            return Lerp(toMin, toMax, t);"},{"type":"INSERT","lineNumber":44,"content":"        }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":47,"content":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"INSERT","lineNumber":48,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":49,"content":"        public static int NextPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":50,"content":"        {"},{"type":"INSERT","lineNumber":51,"content":"            value--;"},{"type":"INSERT","lineNumber":52,"content":"            value |= value >> 1;"},{"type":"INSERT","lineNumber":53,"content":"            value |= value >> 2;"},{"type":"INSERT","lineNumber":54,"content":"            value |= value >> 4;"},{"type":"INSERT","lineNumber":55,"content":"            value |= value >> 8;"},{"type":"INSERT","lineNumber":56,"content":"            value |= value >> 16;"},{"type":"INSERT","lineNumber":57,"content":"            value++;"},{"type":"INSERT","lineNumber":58,"content":"            return value;"},{"type":"INSERT","lineNumber":59,"content":"        }"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":62,"content":"        /// Checks if a number is a power of 2"},{"type":"INSERT","lineNumber":63,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":64,"content":"        public static bool IsPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":65,"content":"        {"},{"type":"INSERT","lineNumber":66,"content":"            return value > 0 && (value & (value - 1)) == 0;"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":70,"content":"        /// Calculates the distance squared between two points (faster than Distance)"},{"type":"INSERT","lineNumber":71,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":72,"content":"        public static float DistanceSquared(Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":73,"content":"        {"},{"type":"INSERT","lineNumber":74,"content":"            float dx = b.X - a.X;"},{"type":"INSERT","lineNumber":75,"content":"            float dy = b.Y - a.Y;"},{"type":"INSERT","lineNumber":76,"content":"            return dx * dx + dy * dy;"},{"type":"INSERT","lineNumber":77,"content":"        }"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":80,"content":"        /// Moves a value towards a target by a maximum step"},{"type":"INSERT","lineNumber":81,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":82,"content":"        public static float MoveTowards(float current, float target, float maxDelta)"},{"type":"INSERT","lineNumber":83,"content":"        {"},{"type":"INSERT","lineNumber":84,"content":"            if (Math.Abs(target - current) <= maxDelta)"},{"type":"INSERT","lineNumber":85,"content":"                return target;"},{"type":"INSERT","lineNumber":86,"content":"            return current + Math.Sign(target - current) * maxDelta;"},{"type":"INSERT","lineNumber":87,"content":"        }"},{"type":"INSERT","lineNumber":88,"content":"    }"}]},{"timestamp":1756231167764,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":7,"oldContent":"}"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"DELETE","lineNumber":9,"oldContent":"    }"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"DELETE","lineNumber":12,"oldContent":"            return current + Math.Sign(target - current) * maxDelta;"},{"type":"DELETE","lineNumber":14,"oldContent":"                return target;"},{"type":"DELETE","lineNumber":16,"oldContent":"            if (Math.Abs(target - current) <= maxDelta)"},{"type":"DELETE","lineNumber":18,"oldContent":"        {"},{"type":"DELETE","lineNumber":20,"oldContent":"        public static float MoveTowards(float current, float target, float maxDelta)"},{"type":"DELETE","lineNumber":22,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":24,"oldContent":"        /// Moves a value towards a target by a maximum step"},{"type":"DELETE","lineNumber":26,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        }"},{"type":"DELETE","lineNumber":32,"oldContent":"            return dx * dx + dy * dy;"},{"type":"DELETE","lineNumber":34,"oldContent":"            float dy = b.Y - a.Y;"},{"type":"DELETE","lineNumber":36,"oldContent":"            float dx = b.X - a.X;"},{"type":"DELETE","lineNumber":38,"oldContent":"        {"},{"type":"DELETE","lineNumber":40,"oldContent":"        public static float DistanceSquared(Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":42,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":44,"oldContent":"        /// Calculates the distance squared between two points (faster than Distance)"},{"type":"DELETE","lineNumber":46,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"        }"},{"type":"DELETE","lineNumber":52,"oldContent":"            return value > 0 && (value & (value - 1)) == 0;"},{"type":"DELETE","lineNumber":54,"oldContent":"        {"},{"type":"DELETE","lineNumber":56,"oldContent":"        public static bool IsPowerOfTwo(int value)"},{"type":"DELETE","lineNumber":58,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":60,"oldContent":"        /// Checks if a number is a power of 2"},{"type":"DELETE","lineNumber":62,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":64,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":"        }"},{"type":"DELETE","lineNumber":68,"oldContent":"            return value;"},{"type":"DELETE","lineNumber":70,"oldContent":"            value++;"},{"type":"DELETE","lineNumber":72,"oldContent":"            value |= value >> 16;"},{"type":"DELETE","lineNumber":74,"oldContent":"            value |= value >> 8;"},{"type":"DELETE","lineNumber":76,"oldContent":"            value |= value >> 4;"},{"type":"DELETE","lineNumber":78,"oldContent":"            value |= value >> 2;"},{"type":"DELETE","lineNumber":80,"oldContent":"            value |= value >> 1;"},{"type":"INSERT","lineNumber":44,"content":"        }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":47,"content":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"INSERT","lineNumber":48,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":49,"content":"        public static int NextPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":50,"content":"        {"},{"type":"INSERT","lineNumber":52,"content":"            value |= value >> 1;"},{"type":"INSERT","lineNumber":53,"content":"            value |= value >> 2;"},{"type":"INSERT","lineNumber":54,"content":"            value |= value >> 4;"},{"type":"INSERT","lineNumber":55,"content":"            value |= value >> 8;"},{"type":"INSERT","lineNumber":56,"content":"            value |= value >> 16;"},{"type":"INSERT","lineNumber":57,"content":"            value++;"},{"type":"INSERT","lineNumber":58,"content":"            return value;"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":62,"content":"        /// Checks if a number is a power of 2"},{"type":"INSERT","lineNumber":63,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":64,"content":"        public static bool IsPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":66,"content":"            return value > 0 && (value & (value - 1)) == 0;"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"DELETE","lineNumber":86,"oldContent":"        public static int NextPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":70,"content":"        /// Calculates the distance squared between two points (faster than Distance)"},{"type":"DELETE","lineNumber":89,"oldContent":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"INSERT","lineNumber":72,"content":"        public static float DistanceSquared(Vector2 a, Vector2 b)"},{"type":"INSERT","lineNumber":73,"content":"        {"},{"type":"INSERT","lineNumber":74,"content":"            float dx = b.X - a.X;"},{"type":"INSERT","lineNumber":75,"content":"            float dy = b.Y - a.Y;"},{"type":"INSERT","lineNumber":76,"content":"            return dx * dx + dy * dy;"},{"type":"INSERT","lineNumber":77,"content":"        }"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":80,"content":"        /// Moves a value towards a target by a maximum step"},{"type":"INSERT","lineNumber":81,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":82,"content":"        public static float MoveTowards(float current, float target, float maxDelta)"},{"type":"INSERT","lineNumber":83,"content":"        {"},{"type":"INSERT","lineNumber":84,"content":"            if (Math.Abs(target - current) <= maxDelta)"},{"type":"INSERT","lineNumber":85,"content":"                return target;"},{"type":"INSERT","lineNumber":86,"content":"            return current + Math.Sign(target - current) * maxDelta;"},{"type":"INSERT","lineNumber":87,"content":"        }"},{"type":"INSERT","lineNumber":88,"content":"    }"},{"type":"INSERT","lineNumber":89,"content":"}"}]},{"timestamp":1756231170111,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"INSERT","lineNumber":25,"content":"            return length - Math.Abs(t - length);"},{"type":"DELETE","lineNumber":27,"oldContent":"            return length - Math.Abs(t - length);"},{"type":"MODIFY","lineNumber":29,"content":"        /// Inverse linear interpolation - finds t for lerp(a, b, t) = value","oldContent":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"INSERT","lineNumber":30,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":31,"content":"        public static float InverseLerp(float a, float b, float value)"},{"type":"INSERT","lineNumber":32,"content":"        {"},{"type":"INSERT","lineNumber":33,"content":"            if (Math.Abs(a - b) < 0.0001f) return 0f;"},{"type":"INSERT","lineNumber":34,"content":"            return (value - a) / (b - a);"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":38,"content":"        /// Remaps a value from one range to another"},{"type":"INSERT","lineNumber":40,"content":"        public static float Remap(float value, float fromMin, float fromMax, float toMin, float toMax)"},{"type":"INSERT","lineNumber":41,"content":"        {"},{"type":"INSERT","lineNumber":42,"content":"            float t = InverseLerp(fromMin, fromMax, value);"},{"type":"INSERT","lineNumber":43,"content":"            return float.Lerp(toMin, toMax, t);"},{"type":"INSERT","lineNumber":44,"content":"        }"},{"type":"INSERT","lineNumber":46,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":47,"content":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"INSERT","lineNumber":48,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":35,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":51,"content":"            value--;"},{"type":"DELETE","lineNumber":38,"oldContent":"        /// Inverse linear interpolation - finds t for lerp(a, b, t) = value"},{"type":"DELETE","lineNumber":41,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":44,"oldContent":"        public static float InverseLerp(float a, float b, float value)"},{"type":"DELETE","lineNumber":46,"oldContent":"        {"},{"type":"INSERT","lineNumber":59,"content":"        }"},{"type":"DELETE","lineNumber":49,"oldContent":"            if (Math.Abs(a - b) < 0.0001f) return 0f;"},{"type":"DELETE","lineNumber":52,"oldContent":"            return (value - a) / (b - a);"},{"type":"DELETE","lineNumber":54,"oldContent":"        }"},{"type":"INSERT","lineNumber":65,"content":"        {"},{"type":"DELETE","lineNumber":60,"oldContent":"        /// Remaps a value from one range to another"},{"type":"INSERT","lineNumber":71,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":63,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":66,"oldContent":"        public static float Remap(float value, float fromMin, float fromMax, float toMin, float toMax)"},{"type":"DELETE","lineNumber":69,"oldContent":"        {"},{"type":"DELETE","lineNumber":72,"oldContent":"            float t = InverseLerp(fromMin, fromMax, value);"},{"type":"DELETE","lineNumber":75,"oldContent":"            return Lerp(toMin, toMax, t);"},{"type":"DELETE","lineNumber":77,"oldContent":"            value--;"},{"type":"DELETE","lineNumber":79,"oldContent":"        }"},{"type":"DELETE","lineNumber":81,"oldContent":"        {"},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":88,"oldContent":"        /// </summary>"}]},{"timestamp":1756231174225,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"DELETE","lineNumber":31,"oldContent":"        }"},{"type":"DELETE","lineNumber":33,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"        public static int NextPowerOfTwo(int value)"},{"type":"DELETE","lineNumber":39,"oldContent":"        {"},{"type":"INSERT","lineNumber":35,"content":"        }"},{"type":"DELETE","lineNumber":41,"oldContent":"            value |= value >> 1;"},{"type":"DELETE","lineNumber":43,"oldContent":"            value |= value >> 2;"},{"type":"DELETE","lineNumber":45,"oldContent":"            value |= value >> 4;"},{"type":"INSERT","lineNumber":39,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":47,"oldContent":"            value |= value >> 8;"},{"type":"DELETE","lineNumber":50,"oldContent":"            value |= value >> 16;"},{"type":"DELETE","lineNumber":51,"oldContent":"            return float.Lerp(toMin, toMax, t);"},{"type":"DELETE","lineNumber":52,"oldContent":"            value++;"},{"type":"INSERT","lineNumber":43,"content":"            return Lerp(toMin, toMax, t);"},{"type":"DELETE","lineNumber":54,"oldContent":"            return value;"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"INSERT","lineNumber":49,"content":"        public static int NextPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":50,"content":"        {"},{"type":"INSERT","lineNumber":51,"content":"            value--;"},{"type":"INSERT","lineNumber":52,"content":"            value |= value >> 1;"},{"type":"INSERT","lineNumber":53,"content":"            value |= value >> 2;"},{"type":"INSERT","lineNumber":54,"content":"            value |= value >> 4;"},{"type":"INSERT","lineNumber":55,"content":"            value |= value >> 8;"},{"type":"INSERT","lineNumber":56,"content":"            value |= value >> 16;"},{"type":"INSERT","lineNumber":57,"content":"            value++;"},{"type":"INSERT","lineNumber":58,"content":"            return value;"},{"type":"INSERT","lineNumber":59,"content":"        }"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"DELETE","lineNumber":61,"oldContent":"            value--;"},{"type":"INSERT","lineNumber":65,"content":"        {"},{"type":"DELETE","lineNumber":68,"oldContent":"        }"},{"type":"INSERT","lineNumber":71,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":73,"oldContent":"        {"},{"type":"DELETE","lineNumber":78,"oldContent":"        /// </summary>"}]},{"timestamp":1756231181806,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":36,"oldContent":"        /// </summary>"},{"type":"INSERT","lineNumber":35,"content":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":"            return Lerp(toMin, toMax, t);"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"INSERT","lineNumber":39,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":44,"oldContent":"        public static int NextPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":43,"content":"            return Lerp(toMin, toMax, t);"},{"type":"INSERT","lineNumber":44,"content":"        }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":47,"content":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"INSERT","lineNumber":48,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":49,"content":"        public static int NextPowerOfTwo(int value)"},{"type":"DELETE","lineNumber":50,"oldContent":"        }"},{"type":"DELETE","lineNumber":53,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":55,"oldContent":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"DELETE","lineNumber":58,"oldContent":"        /// </summary>"},{"type":"MODIFY","lineNumber":61,"content":"        /// <summary>","oldContent":"        /// <summary>"},{"type":"MODIFY","lineNumber":66,"content":"            return value > 0 && (value & (value - 1)) == 0;","oldContent":"            return value > 0 && (value & (value - 1)) == 0;"},{"type":"MODIFY","lineNumber":72,"content":"        public static float DistanceSquared(Vector2 a, Vector2 b)","oldContent":"        public static float DistanceSquared(Vector2 a, Vector2 b)"}]},{"timestamp":1756231354041,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"INSERT","lineNumber":20,"content":"        /// Clamps a value between a minimum and maximum"},{"type":"INSERT","lineNumber":21,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":22,"content":"        public static float Clamp(float value, float min, float max)"},{"type":"INSERT","lineNumber":23,"content":"        {"},{"type":"INSERT","lineNumber":24,"content":"            if (value < min) return min;"},{"type":"INSERT","lineNumber":25,"content":"            if (value > max) return max;"},{"type":"INSERT","lineNumber":26,"content":"            return value;"},{"type":"INSERT","lineNumber":27,"content":"        }"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":30,"content":"        /// Returns the sign of a value (-1, 0, or 1)"},{"type":"INSERT","lineNumber":31,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":32,"content":"        public static float Sign(float value)"},{"type":"INSERT","lineNumber":33,"content":"        {"},{"type":"INSERT","lineNumber":34,"content":"            if (value > 0f) return 1f;"},{"type":"INSERT","lineNumber":35,"content":"            if (value < 0f) return -1f;"},{"type":"INSERT","lineNumber":36,"content":"            return 0f;"},{"type":"INSERT","lineNumber":37,"content":"        }"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":40,"content":"        /// Linear interpolation between two values"},{"type":"INSERT","lineNumber":41,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":42,"content":"        public static float Lerp(float a, float b, float t)"},{"type":"INSERT","lineNumber":43,"content":"        {"},{"type":"INSERT","lineNumber":44,"content":"            return a + (b - a) * t;"},{"type":"INSERT","lineNumber":45,"content":"        }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":48,"content":"        /// Repeats a value within a given range"},{"type":"INSERT","lineNumber":49,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":50,"content":"        public static float Repeat(float t, float length)"},{"type":"INSERT","lineNumber":51,"content":"        {"},{"type":"INSERT","lineNumber":52,"content":"            return Clamp(t - (float)Math.Floor(t / length) * length, 0f, length);"},{"type":"INSERT","lineNumber":53,"content":"        }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"        /// <summary>"},{"type":"DELETE","lineNumber":34,"oldContent":"        }"},{"type":"INSERT","lineNumber":71,"content":"        }"},{"type":"DELETE","lineNumber":38,"oldContent":"        /// </summary>"},{"type":"INSERT","lineNumber":75,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":41,"oldContent":"            return Lerp(toMin, toMax, t);"},{"type":"INSERT","lineNumber":78,"content":"            float t = InverseLerp(fromMin, fromMax, value);"},{"type":"INSERT","lineNumber":79,"content":"            return Lerp(toMin, toMax, t);"},{"type":"DELETE","lineNumber":45,"oldContent":"            float t = InverseLerp(fromMin, fromMax, value);"},{"type":"DELETE","lineNumber":47,"oldContent":"        {"},{"type":"DELETE","lineNumber":49,"oldContent":"            value--;"},{"type":"DELETE","lineNumber":51,"oldContent":"            value |= value >> 1;"},{"type":"INSERT","lineNumber":86,"content":"        {"},{"type":"INSERT","lineNumber":87,"content":"            value--;"},{"type":"INSERT","lineNumber":88,"content":"            value |= value >> 1;"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":61,"oldContent":"        /// <summary>"},{"type":"INSERT","lineNumber":101,"content":"        {"},{"type":"DELETE","lineNumber":66,"oldContent":"            return value > 0 && (value & (value - 1)) == 0;"},{"type":"INSERT","lineNumber":107,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":72,"oldContent":"        public static float DistanceSquared(Vector2 a, Vector2 b)"},{"type":"DELETE","lineNumber":89,"oldContent":"}"}]},{"timestamp":1756231363600,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"{"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"{"},{"type":"DELETE","lineNumber":21,"oldContent":"        /// Ping-pong a value between 0 and length"},{"type":"DELETE","lineNumber":23,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":25,"oldContent":"        public static float PingPong(float t, float length)"},{"type":"DELETE","lineNumber":27,"oldContent":"        {"},{"type":"DELETE","lineNumber":29,"oldContent":"            t = Repeat(t, length * 2f);"},{"type":"DELETE","lineNumber":31,"oldContent":"            return length - Math.Abs(t - length);"},{"type":"DELETE","lineNumber":34,"oldContent":"        }"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":39,"oldContent":"        /// Inverse linear interpolation - finds t for lerp(a, b, t) = value"},{"type":"DELETE","lineNumber":42,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":43,"oldContent":"        public static float InverseLerp(float a, float b, float value)"},{"type":"DELETE","lineNumber":46,"oldContent":"        {"},{"type":"DELETE","lineNumber":47,"oldContent":"            if (Math.Abs(a - b) < 0.0001f) return 0f;"},{"type":"DELETE","lineNumber":50,"oldContent":"            return (value - a) / (b - a);"},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":54,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":57,"oldContent":"        /// Remaps a value from one range to another"},{"type":"DELETE","lineNumber":59,"oldContent":"        public static float Remap(float value, float fromMin, float fromMax, float toMin, float toMax)"},{"type":"DELETE","lineNumber":63,"oldContent":"        {"},{"type":"DELETE","lineNumber":64,"oldContent":"        }"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":"        /// <summary>"},{"type":"DELETE","lineNumber":72,"oldContent":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"DELETE","lineNumber":75,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":78,"oldContent":"        public static int NextPowerOfTwo(int value)"},{"type":"DELETE","lineNumber":80,"oldContent":"            value |= value >> 2;"},{"type":"DELETE","lineNumber":82,"oldContent":"            value |= value >> 4;"},{"type":"INSERT","lineNumber":56,"content":"        /// Ping-pong a value between 0 and length"},{"type":"INSERT","lineNumber":57,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":58,"content":"        public static float PingPong(float t, float length)"},{"type":"INSERT","lineNumber":59,"content":"        {"},{"type":"INSERT","lineNumber":60,"content":"            t = Repeat(t, length * 2f);"},{"type":"INSERT","lineNumber":61,"content":"            return length - Math.Abs(t - length);"},{"type":"INSERT","lineNumber":62,"content":"        }"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":65,"content":"        /// Inverse linear interpolation - finds t for lerp(a, b, t) = value"},{"type":"INSERT","lineNumber":66,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":67,"content":"        public static float InverseLerp(float a, float b, float value)"},{"type":"INSERT","lineNumber":68,"content":"        {"},{"type":"INSERT","lineNumber":69,"content":"            if (Math.Abs(a - b) < 0.0001f) return 0f;"},{"type":"INSERT","lineNumber":70,"content":"            return (value - a) / (b - a);"},{"type":"INSERT","lineNumber":71,"content":"        }"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":74,"content":"        /// Remaps a value from one range to another"},{"type":"INSERT","lineNumber":75,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":76,"content":"        public static float Remap(float value, float fromMin, float fromMax, float toMin, float toMax)"},{"type":"INSERT","lineNumber":77,"content":"        {"},{"type":"INSERT","lineNumber":78,"content":"            float t = InverseLerp(fromMin, fromMax, value);"},{"type":"INSERT","lineNumber":79,"content":"            return Lerp(toMin, toMax, t);"},{"type":"INSERT","lineNumber":80,"content":"        }"},{"type":"INSERT","lineNumber":81,"content":""},{"type":"INSERT","lineNumber":82,"content":"        /// <summary>"},{"type":"INSERT","lineNumber":83,"content":"        /// Returns the next power of 2 greater than or equal to the input"},{"type":"INSERT","lineNumber":84,"content":"        /// </summary>"},{"type":"INSERT","lineNumber":85,"content":"        public static int NextPowerOfTwo(int value)"},{"type":"INSERT","lineNumber":86,"content":"        {"},{"type":"INSERT","lineNumber":87,"content":"            value--;"},{"type":"INSERT","lineNumber":88,"content":"            value |= value >> 1;"},{"type":"INSERT","lineNumber":89,"content":"            value |= value >> 2;"},{"type":"INSERT","lineNumber":90,"content":"            value |= value >> 4;"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":101,"content":"        {"},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"INSERT","lineNumber":107,"content":"        /// </summary>"},{"type":"DELETE","lineNumber":102,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":106,"oldContent":"            float t = InverseLerp(fromMin, fromMax, value);"},{"type":"DELETE","lineNumber":108,"oldContent":"            return Lerp(toMin, toMax, t);"},{"type":"DELETE","lineNumber":116,"oldContent":"        {"},{"type":"DELETE","lineNumber":118,"oldContent":"            value--;"},{"type":"DELETE","lineNumber":120,"oldContent":"            value |= value >> 1;"},{"type":"DELETE","lineNumber":122,"oldContent":"        /// </summary>"},{"type":"DELETE","lineNumber":123,"oldContent":"        {"},{"type":"DELETE","lineNumber":124,"oldContent":""},{"type":"INSERT","lineNumber":125,"content":"}"}]}]}}}